#!/bin/sh

udev_root="/dev"
udev_rules="/lib/udev/rules.d"
udev_log="err"
eeprom_device="/sys/bus/i2c/devices/1-0054/eeprom"

# for new udevd
PATH=/usr/lib/udev:$PATH

make_extra_nodes () {
	# there are a few things that sysfs does not export for us.
	# these things go here (and remember to remove them in
	# remove_extra_nodes()
	#
	# Thanks to Gentoo for the initial list of these.
	if ! mount | grep -q devtmpfs; then
		ln -snf /proc/self/fd /dev/fd
		ln -snf /proc/self/fd/0 /dev/stdin
		ln -snf /proc/self/fd/1 /dev/stdout
		ln -snf /proc/self/fd/2 /dev/stderr
		ln -snf /proc/kcore /dev/core

		mknod /dev/null c 1 3
		mknod /dev/console c 5 1
		mknod /dev/zero c 1 5
	fi

	mkdir /dev/pts
	mkdir /dev/shm
}

show_bootscreen () {
	mknod /dev/fb0 c 29 0

	#if systeminfo is provided by cmdline use it, otherwise read eeprom 
	(cat /proc/cmdline | grep "systeminfo=" ) &>/dev/null
	if [ $? -eq 0 ]; then
		devconf=$(cat /proc/cmdline)
		devconf=$(echo ${devconf#*systeminfo=0x00})
		devconf=$(echo ${devconf:1:2})
		if [ "$devconf" == "1" ] ; then
			devconf="1000"
			xres="480"
		elif [ "$devconf" == "2" ] ; then
			devconf="1001"
			xres="640"
		elif [ "$devconf" == "3" ] ; then
			devconf="1002"
			xres="800"
		elif [ "$devconf" == "5" ] ; then
			devconf="1003"
			xres="1280"
		elif [ "$devconf" == "6" ] ; then
			devconf="1008"
			xres="1920"
		elif [ "$devconf" == "7" ] ; then
			devconf="1009"
			xres="1920"
		elif [ "$devconf" == "8" ] ; then
			devconf="1010"
			xres="1920"
		else
			echo "screen resolution touch not recognized set default 800x480"
			devconf="1002"
			xres="800"
		fi
	else
		# no systeminfo use eeprom, read devconf
		devconf=$(hexdump -v -s 0x00001fe -n 2 $eeprom_device | head -n 1 | cut  -f 2 -d ' ')
		if [ "$devconf" = "1000" ]; then
			xres="480"
		elif [ "$devconf" = "1001" ]; then
			xres="640"
		elif [ "$devconf" = "1002" ]; then
			xres="800"
		elif [ "$devconf" = "1003" ]; then
			xres="1280"
		elif [ "$devconf" = "1008" ]; then
			xres="1920"
		elif [ "$devconf" = "1009" ]; then
			xres="1920"
		elif [ "$devconf" = "1010" ]; then
			xres="1920"
		else
			echo "screen resolution touch not recognized set default 800x480"
			xres="800"
		fi
		#echo "#### devconf=$devconf"
	fi

	# get orientation from eeprom
	orientation=$(hexdump -v -s 0x00001f8 -n 2 $eeprom_device | head -n 1 | cut  -f 2 -d ' ')
	orientation=$(echo ${orientation:3})
	bootscreenfile=/etc/bootscreen/bootscreen_
	if [ "$orientation" == 0 ] ; then
		addchar="0_"
		bootscreenfile=$bootscreenfile$addchar
	elif [ "$orientation" == 1 ] ; then
		addchar="cw_"
		bootscreenfile=$bootscreenfile$addchar
	elif [ "$orientation" == 2 ] ; then
		addchar="ud_"
		bootscreenfile=$bootscreenfile$addchar
	elif [ "$orientation" == 3 ] ; then
		addchar="ccw_"
		bootscreenfile=$bootscreenfile$addchar
	else
		echo "eeprom screen orientation touch not recognized, set default orientation 0"
		addchar="0_"
		bootscreenfile=$bootscreenfile$addchar
	fi

	addchar=".png"
	bootscreenfile=$bootscreenfile$xres$addchar
	#echo "#### bootscreenfile=$bootscreenfile"

	if [ -e "$bootscreenfile" ]; then
		/usr/bin/fbv -i $bootscreenfile 2>&1 > /dev/null &
	else
		echo "bootscreen not found ${bootscreenfile}"
	fi
	echo 0 > /sys/class/graphics/fb0/blank
}

set_profile () {
	profi=/etc/profile_

	if [ "$devconf" = "1000" ]; then
		cap="0"
	elif [ "$devconf" = "1001" ]; then
		cap="0"
	elif [ "$devconf" = "1002" ]; then
		#if systeminfo is provided by cmdline use it, otherwise read eeprom 
		(cat /proc/cmdline | grep "systeminfo=" ) &>/dev/null
		if [ $? -eq 0 ]; then
			cap=$(cat /proc/cmdline)
			cap=$(echo ${cap#*systeminfo=0x00})
			cap=$(echo ${cap:0:1})
		else
			(cat /proc/bus/input/devices | grep "PIXCIR HID Touch Panel") &>/dev/null
			if [ $? -eq 0 ]; then
				cap="1"
			else
				cap="0"
			fi
		fi
	elif [ "$devconf" = "1003" ]; then
		#if systeminfo is provided by cmdline use it, otherwise read eeprom 
		(cat /proc/cmdline | grep "systeminfo=" ) &>/dev/null
		if [ $? -eq 0 ]; then
			cap=$(cat /proc/cmdline)
			cap=$(echo ${cap#*systeminfo=0x00})
			cap=$(echo ${cap:0:1})
		else
			(cat /proc/bus/input/devices | grep "PIXCIR HID Touch Panel") &>/dev/null
			if [ $? -eq 0 ]; then
				cap="1"
			else
				cap="0"
			fi
		fi
	elif [ "$devconf" = "1008" ]; then
		#if systeminfo is provided by cmdline use it, otherwise read eeprom 
		(cat /proc/cmdline | grep "systeminfo=" ) &>/dev/null
		if [ $? -eq 0 ]; then
			cap=$(cat /proc/cmdline)
			cap=$(echo ${cap#*systeminfo=0x00})
			cap=$(echo ${cap:0:1})
		else
			(cat /proc/bus/input/devices | grep "eGalaxTouch") &>/dev/null
			if [ $? -eq 0 ]; then
				cap="1"
			else
				cap="0"
			fi
		fi
	elif [ "$devconf" = "1009" ]; then
		#if systeminfo is provided by cmdline use it, otherwise read eeprom 
		(cat /proc/cmdline | grep "systeminfo=" ) &>/dev/null
		if [ $? -eq 0 ]; then
			cap=$(cat /proc/cmdline)
			cap=$(echo ${cap#*systeminfo=0x00})
			cap=$(echo ${cap:0:1})
		else
			(cat /proc/bus/input/devices | grep "eGalaxTouch") &>/dev/null
			if [ $? -eq 0 ]; then
				cap="1"
			else
				cap="0"
			fi
		fi
	elif [ "$devconf" = "1010" ]; then
		cap="0"
	else
		echo "no valid display resolution in eeprom found, use default resolution 800x480"
		cap="0"
	fi

	if [ "$cap" == "1" ] ; then
		echo "cap touch found"
		addchar="cap_"
		profi=$profi$addchar
	elif [ "$cap" == "0" ] ; then
		echo "res touch found"
		addchar="res_"	
		profi=$profi$addchar
	else
		echo "cap/res touch not recognized"
	fi

	if [ "$orientation" == 0 ] ; then
		addchar="0"
		profi=$profi$addchar
	elif [ "$orientation" == 1 ] ; then
		addchar="cw"
		profi=$profi$addchar
	elif [ "$orientation" == 2 ] ; then
		addchar="ud"
		profi=$profi$addchar
	elif [ "$orientation" == 3 ] ; then
		addchar="ccw"
		profi=$profi$addchar
	else
		echo "profile screen orientation touch not recognized, set default orientation 0"
		addchar="0"
		profi=$profi$addchar
	fi
	#echo "#### profile= ${profi}"

	if [ -e "$profi" ] ; then
		rm /etc/profile
		ln -s $profi /etc/profile
		source /etc/profile > /dev/null 2>&1
	else
		echo "profile not found profile= ${profi}"
	fi
}

case $1 in
start)
	echo "starting udev"

	# don't use udev if sysfs is not mounted.
	if [ ! -d /sys/kernel ]; then
		echo "failed"
		echo "error: sysfs not mounted"
		exit 1
	fi

	# only mount a tmpfs if devtmpfs is not already there
	if ! mount | grep -q devtmpfs; then
		# The reason we don't write to mtab is because we don't ever
		# want /dev to be unavailable (such as by `umount -a').
		echo "mounting tmpfs at $udev_root"
		mount -n -t tmpfs tmpfs $udev_root -o mode=755
	fi

	# The /run is used by udev and must be mounted at this early stage
	echo "mounting tmpfs at /run"
	mount -n -t tmpfs tmpfs /run -o mode=755

	# udev handles uevents itself, so we don't need to have
	# the kernel call out to any binary in response to them
	if [ -e /sys/kernel/uevent_helper ]; then
		echo > /proc/sys/kernel/hotplug
	fi

	echo "creating static nodes"
	make_extra_nodes

	count=$(dmesg | grep -c "timed")
	if [ $count -ne 0 ]; then
		reboot -f
	fi

	#echo "show bootscreen"
	show_bootscreen
	echo 255 > /sys/class/backlight/backlight/brightness 

	# Start the udev daemon to continually
	# watch for, and act on, uevents
	echo -n "starting udevd..."
	udevd --daemon
	if [ "$?" = "0" ]; then
		echo "done"
	else
		echo "failed"
	fi

	# Now traverse sys/ in order to "coldplug"
	# devices that have already been discovered
	udevadm trigger --action=add
	# Now wait for udevd to process
	# the uevents we triggered
	echo -n "waiting for devices..."
	udevadm settle --timeout=10
	if [ "$?" = "0" ]; then
		echo "done"
	else
		echo "failed"
	fi

	# We can only mount /dev/pts after initialising udev
	if [ -d "/dev/pts" ]; then
		mount /dev/pts
	fi

	#echo "set_profile"
	set_profile

	exit 0

	;;
stop)
	echo "stopping udevd... error, udevd cannot be stopped, aborting"
	;;
*)
	echo "usage: $0 [start|stop]"
	;;
esac

