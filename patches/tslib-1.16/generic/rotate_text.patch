diff -Naur tslib-1.16_org/tests/fbutils.h tslib-1.16/tests/fbutils.h
--- tslib-1.16_org/tests/fbutils.h	2017-12-28 13:20:40.000000000 +0100
+++ tslib-1.16/tests/fbutils.h	2020-03-16 11:34:36.241466000 +0100
@@ -25,12 +25,22 @@
 extern uint32_t xres, yres;
 extern int8_t rotation;
 
+typedef uint32_t __u32;
+
 int open_framebuffer(void);
 void close_framebuffer(void);
 void setcolor(unsigned colidx, unsigned value);
 void put_cross(int x, int y, unsigned colidx);
 void put_string(int x, int y, char *s, unsigned colidx);
 void put_string_center(int x, int y, char *s, unsigned colidx);
+
+void put_string_1(int orientation, int x, int y, char *s, unsigned colidx);
+void put_string_center_1(int orientation, int x, int y, char *s, unsigned colidx);
+void rotate_ud(const char *in, char *out, __u32 width, __u32 height);
+void rotate_cw(const char *in, char *out, __u32 width, __u32 height);
+void rotate_ccw(const char *in, char *out, __u32 width, __u32 height);
+void rotate(int orientation);
+
 void pixel(int x, int y, unsigned colidx);
 void line(int x1, int y1, int x2, int y2, unsigned colidx);
 void rect(int x1, int y1, int x2, int y2, unsigned colidx);
diff -Naur tslib-1.16_org/tests/fbutils-linux.c tslib-1.16/tests/fbutils-linux.c
--- tslib-1.16_org/tests/fbutils-linux.c	2017-12-28 13:20:40.000000000 +0100
+++ tslib-1.16/tests/fbutils-linux.c	2020-03-16 11:25:24.981466000 +0100
@@ -246,6 +246,68 @@
 		   y - font_vga_8x8.height / 2, s, colidx);
 }
 
+
+void put_string_1(int orientation, int x, int y, char *s, unsigned colidx)
+{
+	int i;
+
+  switch (orientation)
+  { 
+    case 1: //portrait90
+    case 3: //portrait270
+  
+      for (i = 0; *s; i++, x -= font_vga_8x8.width, s++)
+      {
+        put_char (y, x, *s, colidx);
+      }
+  
+    break;
+    
+    default:
+      for (i = 0; *s; i++, x += font_vga_8x8.width, s++)
+      {
+        put_char (x, y, *s, colidx);              
+      } 
+    break;
+  }
+  
+}
+
+void put_string_center_1(int orientation, int x, int y, char *s, unsigned colidx)
+{
+  
+  size_t sl = strlen (s);
+  
+  switch (orientation)
+  { 
+    case 1: //portrait
+        put_string_1 (orientation, 
+                    y + (sl / 2) * font_vga_8x8.width, 
+                    x - font_vga_8x8.height / 2, 
+                    s, 
+                    colidx);
+    break;
+              
+    case 3: //portrait270           
+        put_string_1 (orientation, 
+                    y + (sl / 2) * font_vga_8x8.width, 
+                    x - font_vga_8x8.height / 2, 
+                    s, 
+                    colidx);
+    break;
+    
+    default:
+        put_string_1 (orientation, 
+                    x - (sl / 2) * font_vga_8x8.width, 
+                    y - font_vga_8x8.height / 2, 
+                    s, 
+                    colidx);
+    break;
+  }
+    
+}
+
+
 void setcolor(uint32_t colidx, uint32_t value)
 {
 	uint32_t res;
@@ -471,3 +533,122 @@
 		}
 	}
 }
+
+
+int pattern_test_bit(__u32 x, __u32 y, __u32 pitch, const char *pat)
+{
+	__u32 tmp = (y * pitch) + x, index = tmp / 8,  bit = tmp % 8;
+
+	pat +=index;
+	return (*pat) & (0x80 >> bit);
+}
+
+void pattern_set_bit(__u32 x, __u32 y, __u32 pitch, char *pat)
+{
+	__u32 tmp = (y * pitch) + x, index = tmp / 8, bit = tmp % 8;
+
+	pat += index;
+
+	(*pat) |= 0x80 >> bit;
+}
+
+void rotate_ud(const char *in, char *out, __u32 width, __u32 height)
+{
+	int i, j;
+	int shift = (8 - (width % 8)) & 7;
+
+	width = (width + 7) & ~7;
+
+	for (i = 0; i < height; i++) {
+		for (j = 0; j < width - shift; j++) {
+			if (pattern_test_bit(j, i, width, in))
+				pattern_set_bit(width - (1 + j + shift),
+						height - (1 + i),
+						width, out);
+		}
+
+	}
+}
+
+void rotate_cw(const char *in, char *out, __u32 width, __u32 height)
+{
+	int i, j, h = height, w = width;
+	int shift = (8 - (height % 8)) & 7;
+
+	width = (width + 7) & ~7;
+	height = (height + 7) & ~7;
+
+	for (i = 0; i < h; i++) {
+		for (j = 0; j < w; j++) {
+			if (pattern_test_bit(j, i, width, in))
+				pattern_set_bit(height - 1 - i - shift, j,
+						height, out);
+
+		}
+	}
+}
+
+void rotate_ccw(const char *in, char *out, __u32 width, __u32 height)
+{
+	int i, j, h = height, w = width;
+	int shift = (8 - (width % 8)) & 7;
+
+	width = (width + 7) & ~7;
+	height = (height + 7) & ~7;
+
+	for (i = 0; i < h; i++) {
+		for (j = 0; j < w; j++) {
+			if (pattern_test_bit(j, i, width, in))
+				pattern_set_bit(i, width - 1 - j - shift,
+						height, out);
+		}
+	}
+}
+
+void rotate(int orientation)
+{
+  int i;
+  int k=0;
+  
+  switch (orientation)
+  {
+    case 3:
+      //portrait270
+      for (i=0; i < 255; i++)
+      {
+        unsigned char dst[8] = {0,0,0,0,0,0,0,0};
+        rotate_ccw(&font_vga_8x8.data[k], &dst[0], 8, 8);
+        memcpy(&font_vga_8x8.data[k], &dst[0], 8);
+        
+        k+=8;
+      }
+    
+      break;
+      
+    case 2:
+      //landscape180
+      for (i=0; i < 255; i++)
+      {
+        unsigned char dst[8] = {0,0,0,0,0,0,0,0};
+        rotate_ud(&font_vga_8x8.data[k], &dst[0], 8, 8);
+        memcpy(&font_vga_8x8.data[k], &dst[0], 8);
+        
+        k+=8;
+      }
+      break;  
+      
+    case 1:
+      //portrait90
+      for (i=0; i < 255; i++)
+      {
+        unsigned char dst[8] = {0,0,0,0,0,0,0,0};
+        rotate_cw(&font_vga_8x8.data[k], &dst[0], 8, 8);
+        memcpy(&font_vga_8x8.data[k], &dst[0], 8);
+        
+        k+=8;
+      }
+    
+      break;  
+  }
+  
+}
diff -Naur tslib-1.16_org/tests/ts_calibrate.c tslib-1.16/tests/ts_calibrate.c
--- tslib-1.16_org/tests/ts_calibrate.c	2020-03-16 14:07:54.110834352 +0100
+++ tslib-1.16/tests/ts_calibrate.c	2020-03-16 11:26:31.165466000 +0100
@@ -38,6 +38,8 @@
 #define CALIB_TIMEOUT_MIN    5
 #define CNF_FILE            DISPLAY_CONF_FILE
 
+int arrX[3];
+int arrY[3];
 
 static int palette[] = {
 //	0x000000, 0xffe080, 0xffffff, 0xe0c0a0
@@ -59,10 +61,11 @@
 } sampleThreadData;
 
 int g_iTimeoutValue = CALIB_TIMEOUT;
+int g_iDisplayOrientation = 0;
 void sample_thread_function ( void *ptr );
 int get_sample_use_thread(sampleThreadData * pData);
 int ReadTimeoutValue();
-
+int ReadDisplayOrientation();
 
 static void sig(int sig)
 {
@@ -153,6 +156,21 @@
 	printf("\n");
 }
 
+char *strrev(char *str)
+{
+      char *p1, *p2;
+
+      if (! str || ! *str)
+            return str;
+      for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2)
+      {
+            *p1 ^= *p2;
+            *p2 ^= *p1;
+            *p1 ^= *p2;
+      }
+      return str;
+}
+
 int main(int argc, char **argv)
 {
 	struct tsdev *ts;
@@ -165,7 +183,11 @@
 	char *calfile = NULL;
 	unsigned int i, len;
 
-  char szText[128] = "";
+  char szInstruction[128] = "";
+  char szTitle[] = "Touch calibration utility";
+  char szSuccess [] = "Touch calibration successful";
+  char szTimeout [] = "Touch calibration timeout";
+
   sampleThreadData thread_data;
 
 	signal(SIGSEGV, sig);
@@ -229,19 +251,79 @@
 		exit(1);
 	}
 
+
+//calibration timeout and rotation (display orientation)
+ReadTimeoutValue();
+ReadDisplayOrientation();
+rotate(g_iDisplayOrientation);  
+
+sprintf(szInstruction, "Touch crosshair within %d [s]", g_iTimeoutValue);
+
+//default landscape
+arrX[0] = xres / 2;
+arrY[0] = yres / 4 - 20;  
+arrX[1] = xres / 2;
+arrY[1] = yres / 4;  
+arrX[2] = xres / 2;
+arrY[2] = yres / 4 + 20;    
+
+switch (g_iDisplayOrientation)
+{ 
+  case 1: //portrait
+   
+    strrev(szTitle);
+    strrev(szInstruction);
+    strrev(szSuccess);
+    strrev(szTimeout);
+         
+    arrX[0] = xres * 3/ 4 + 20;  
+    arrY[0] = yres / 2;
+    
+    arrX[1] = xres * 3/ 4;  
+    arrY[1] = yres / 2;
+          
+    arrX[2] = xres * 3/ 4 - 20;   
+    arrY[2] = yres / 2;
+    
+    break;
+       
+  case 2: //landscape180
+    strrev(szTitle);
+    strrev(szInstruction);
+    strrev(szSuccess);
+    strrev(szTimeout);
+    
+    arrX[2] = xres / 2;
+    arrY[2] = yres * 3/ 4 - 20;  
+    arrX[1] = xres / 2;
+    arrY[1] = yres * 3/ 4;  
+    arrX[0] = xres / 2;
+    arrY[0] = yres * 3/ 4 + 20;    
+    
+    break;
+    
+  case 3: //portrait270
+    
+   arrX[2] = xres / 4 + 20;  
+   arrY[2] = yres / 2;
+    
+   arrX[1] = xres / 4;  
+   arrY[1] = yres / 2;
+          
+   arrX[0] = xres / 4 - 20;   
+   arrY[0] = yres / 2;   
+    
+  break;
+}
+
 	for (i = 0; i < NR_COLORS; i++)
 		setcolor(i, palette[i]);
 
-  put_string_center (xres / 2, yres / 4 - 20,
-			   "Touch calibration utility", 1);
-
-  ReadTimeoutValue();         
-  sprintf(szText, "Touch crosshair within %d [s] to calibrate", g_iTimeoutValue);
+  put_string_center_1 (g_iDisplayOrientation, arrX[0], arrY[0], szTitle, 1);
          
   //Touch crosshair to calibrate         
-	put_string_center (xres / 2, yres / 4 , szText, 2);
+  put_string_center_1 (g_iDisplayOrientation, arrX[1], arrY[1] , szInstruction, 2);
 
-	printf("xres = %d, yres = %d\n", xres, yres);
 
 	/* Clear the buffer */
 	clearbuf(ts);
@@ -331,14 +413,15 @@
       i = -1;
     }
   
-    put_string_center (xres/2, yres/4 + 20,  "Touch calibration successful", 2);      
+    put_string_center_1 (g_iDisplayOrientation, arrX[2], arrY[2],  szSuccess, 2);
   }
   else
   {
-    put_string_center (xres/2, yres/4 + 20 , "Touch calibration timeout", 2);
+    put_string_center_1 (g_iDisplayOrientation, arrX[2], arrY[2] , szTimeout, 2);
   }
 
   fillrect(0, 0, xres - 1, yres - 1, 0);
+
 	close_framebuffer();
 	ts_close(ts);
 	return i;
@@ -385,8 +468,17 @@
     {
       int k;             
       sprintf(szText, "%02d", g_iTimeoutValue - iCounter);
+      
+      switch (g_iDisplayOrientation)
+      {    
+        case 1:
+        case 2:
+          strrev(szText);
+        break;                
+      }
+      
       //show text
-      put_string_center (x, y , szText, color | XORMODE );
+      put_string_center_1 (g_iDisplayOrientation, arrX[2], arrY[2] , szText, color | XORMODE );
       
       //wait one second
       for (k=0; k < 20; k++)
@@ -399,7 +491,7 @@
       }
                    
       //remove text  
-      put_string_center (x, y , szText, color | XORMODE );      
+      put_string_center_1 (g_iDisplayOrientation, arrX[2], arrY[2], szText, color | XORMODE );
       if (pData->thread_ended)
       {
         break;
@@ -459,3 +551,71 @@
   
   return status;
 }
+
+/// \brief trim string on the right side
+///
+/// remove line feed, carriage return, spaces from the right
+/// 
+/// \param[in] pStr  pointer to string  
+///
+/// \retval pointer to string
+///
+char * TrimRight(char *pStr)
+{
+  if (pStr)
+  {  
+    int n = strlen(pStr);
+    if (n > 0)
+    {
+      //remove lf cr sp
+      while ((pStr[n-1] == 10)||(pStr[n-1] == 13)||(pStr[n-1] == 32))
+      {
+        pStr[n-1] = 0;
+        n = strlen(pStr);
+      }
+    }
+  }
+  return pStr;
+}
+
+int ReadDisplayOrientation()
+{
+  int ret = -1;
+  char buffer[256];
+  char * pLine = NULL;
+  char szCmd1[128] = "/etc/config-tools/get_display orientation";
+  
+  FILE * pFile = popen(szCmd1, "r");
+
+  if (!pFile)
+  {
+    return ret;
+  }  
+  pLine = fgets(buffer, sizeof(buffer), pFile);
+  
+  if (pLine)
+  {
+    TrimRight(pLine);
+   
+    if (strcmp(pLine, "landscape")==0)
+    {
+      ret = 0;
+    }
+    else if (strcmp(pLine, "portrait")==0)
+    {
+      ret = 1;
+    }
+    else if (strcmp(pLine, "landscape180")==0)
+    {
+      ret = 2;
+    }
+    else if (strcmp(pLine, "portrait270")==0)
+    {
+      ret = 3;
+    }    
+  }  
+  pclose(pFile);
+  //printf("orientation=%d\n", ret);
+  g_iDisplayOrientation = ret;
+  return ret;
+}
