diff -Naur tslib-1.16_orig/tests/Makefile.am tslib-1.16/tests/Makefile.am
--- tslib-1.16_orig/tests/Makefile.am	2017-11-20 22:54:00.000000000 +0100
+++ tslib-1.16/tests/Makefile.am	2018-07-03 15:13:17.562491000 +0200
@@ -78,10 +78,10 @@
 
 if SDL
 ts_calibrate_SOURCES	= ts_calibrate_sdl.c ts_calibrate.h ts_calibrate_common.c sdlutils.c sdlutils.h
-ts_calibrate_LDADD	= $(top_builddir)/src/libts.la -lSDL2
+ts_calibrate_LDADD	= $(top_builddir)/src/libts.la -lSDL2 -lpthread -lmsgtool
 else
 ts_calibrate_SOURCES	= ts_calibrate.c ts_calibrate.h ts_calibrate_common.c fbutils.h testutils.c testutils.h font_8x8.c font_8x16.c font.h
-ts_calibrate_LDADD	= $(top_builddir)/src/libts.la
+ts_calibrate_LDADD	= $(top_builddir)/src/libts.la -lpthread -lmsgtool
 if FREEBSD
 ts_calibrate_SOURCES	+= fbutils-bsd.c
 else
diff -Naur tslib-1.16_orig/tests/ts_calibrate.c tslib-1.16/tests/ts_calibrate.c
--- tslib-1.16_orig/tests/ts_calibrate.c	2018-04-18 07:25:19.000000000 +0200
+++ tslib-1.16/tests/ts_calibrate.c	2018-07-03 16:06:43.430491000 +0200
@@ -24,6 +24,7 @@
 #include <fcntl.h>
 #include <getopt.h>
 #include <errno.h>
+#include <pthread.h>
 
 #include "tslib.h"
 
@@ -31,11 +32,38 @@
 #include "testutils.h"
 #include "ts_calibrate.h"
 
+#include "msgtool.h"
+
+#define CALIB_TIMEOUT       30
+#define CALIB_TIMEOUT_MIN    5
+#define CNF_FILE            DISPLAY_CONF_FILE
+
+
 static int palette[] = {
-	0x000000, 0xffe080, 0xffffff, 0xe0c0a0
+//	0x000000, 0xffe080, 0xffffff, 0xe0c0a0
+	0x000000, 0x00ff00, 0xffffff, 0x00ff00
 };
 #define NR_COLORS (sizeof(palette) / sizeof(palette[0]))
 
+/* calib timeout thread */
+typedef struct tagSampleThreadStruct
+{
+  unsigned char thread_ended;
+  unsigned char timeout;
+  struct tsdev *pTs;
+	calibration  *pCal;
+  int index;
+  int x;
+  int y;
+  char szName[64];
+} sampleThreadData;
+
+int g_iTimeoutValue = CALIB_TIMEOUT;
+void sample_thread_function ( void *ptr );
+int get_sample_use_thread(sampleThreadData * pData);
+int ReadTimeoutValue();
+
+
 static void sig(int sig)
 {
 	close_framebuffer();
@@ -137,6 +165,9 @@
 	char *calfile = NULL;
 	unsigned int i, len;
 
+  char szText[128] = "";
+  sampleThreadData thread_data;
+
 	signal(SIGSEGV, sig);
 	signal(SIGINT, sig);
 	signal(SIGTERM, sig);
@@ -201,64 +232,230 @@
 	for (i = 0; i < NR_COLORS; i++)
 		setcolor(i, palette[i]);
 
-	put_string_center(xres / 2, yres / 4,
-			  "Touchscreen calibration utility", 1);
-	put_string_center(xres / 2, yres / 4 + 20,
-			  "Touch crosshair to calibrate", 2);
+  put_string_center (xres / 2, yres / 4 - 20,
+			   "Touch calibration utility", 1);
+
+  ReadTimeoutValue();         
+  sprintf(szText, "Touch crosshair within %d [s] to calibrate", g_iTimeoutValue);
+         
+  //Touch crosshair to calibrate         
+	put_string_center (xres / 2, yres / 4 , szText, 2);
 
 	printf("xres = %d, yres = %d\n", xres, yres);
 
 	/* Clear the buffer */
 	clearbuf(ts);
 
-	get_sample(ts, &cal, 0, 50,        50,        "Top left");
-	clearbuf(ts);
-	get_sample(ts, &cal, 1, xres - 50, 50,        "Top right");
-	clearbuf(ts);
-	get_sample(ts, &cal, 2, xres - 50, yres - 50, "Bot right");
-	clearbuf(ts);
-	get_sample(ts, &cal, 3, 50,        yres - 50, "Bot left");
-	clearbuf(ts);
-	get_sample(ts, &cal, 4, xres / 2,  yres / 2,  "Center");
-
-	if (perform_calibration (&cal)) {
-		printf("Calibration constants: ");
-		for (i = 0; i < 7; i++)
-			printf("%d ", cal.a[i]);
-		printf("\n");
-		if ((calfile = getenv("TSLIB_CALIBFILE")) != NULL) {
-			cal_fd = open(calfile, O_CREAT | O_TRUNC | O_RDWR,
-				      S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
-		} else {
-			cal_fd = open(TS_POINTERCAL, O_CREAT | O_TRUNC | O_RDWR,
-				      S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
-		}
-		if (cal_fd < 0) {
-			perror("open");
-			close_framebuffer();
-			ts_close(ts);
-			exit(1);
-		}
-
-		len = sprintf(cal_buffer, "%d %d %d %d %d %d %d %d %d",
-			      cal.a[1], cal.a[2], cal.a[0],
-			      cal.a[4], cal.a[5], cal.a[3], cal.a[6],
-			      xres, yres);
-		if (write(cal_fd, cal_buffer, len) == -1) {
-			perror("write");
-			close_framebuffer();
-			ts_close(ts);
-			exit(1);
-		}
-		close(cal_fd);
-		i = 0;
-	} else {
-		printf("Calibration failed.\n");
-		i = -1;
-	}
+  memset(&thread_data, 0x0, sizeof(thread_data));
+  thread_data.pCal = &cal;
+  thread_data.pTs = ts;
+  thread_data.timeout = 0;
+  
+  //Top left
+  //old get_sample (ts, &cal, 0, 50,        50,        "Top left");    
+  thread_data.thread_ended = 0;
+  thread_data.index = 0;
+  thread_data.x = 50;
+  thread_data.y = 50;
+  strncpy(thread_data.szName, "Top left", sizeof(thread_data.szName));  
+  get_sample_use_thread(&thread_data); 
+  
+	//Top right
+  if (!thread_data.timeout)
+  {
+	  //old get_sample (ts, &cal, 1, xres - 50, 50,        "Top right");
+    thread_data.thread_ended = 0; 
+    thread_data.index = 1;
+    thread_data.x = xres - 50;
+    thread_data.y = 50;
+    strncpy(thread_data.szName, "Top right", sizeof(thread_data.szName)); 
+    get_sample_use_thread(&thread_data); 
+  }
+  
+  //Bot right
+  if (!thread_data.timeout)
+  {  
+	  //old get_sample (ts, &cal, 2, xres - 50, yres - 50, "Bot right");
+    thread_data.thread_ended = 0;
+    thread_data.index = 2;
+    thread_data.x = xres - 50;
+    thread_data.y = yres - 50;
+    strncpy(thread_data.szName, "Bot right", sizeof(thread_data.szName));
+    get_sample_use_thread(&thread_data);
+  }  
+  
+  //Bot left
+  if (!thread_data.timeout)
+  {  
+	  //old get_sample (ts, &cal, 3, 50,        yres - 50, "Bot left");
+    thread_data.thread_ended = 0;
+    thread_data.index = 3;
+    thread_data.x = 50;
+    thread_data.y = yres - 50;
+    strncpy(thread_data.szName, "Bot left", sizeof(thread_data.szName));
+    get_sample_use_thread(&thread_data);
+  }
+    
+  //Center
+  if (!thread_data.timeout)
+  {  
+	  //old get_sample (ts, &cal, 4, xres / 2,  yres / 2,  "Center");
+    thread_data.thread_ended = 0;
+    thread_data.index = 4;
+    thread_data.x = xres / 2;
+    thread_data.y = yres / 2;
+    strncpy(thread_data.szName, "Center", sizeof(thread_data.szName));
+    get_sample_use_thread(&thread_data);
+  }
+  
+  if (!thread_data.timeout)
+  {
+    //write file pointercal 
+    if (perform_calibration (&cal)) {
+      printf ("Calibration constants: ");
+      for (i = 0; i < 7; i++) printf("%d ", cal.a [i]);
+      printf("\n");
+      if ((calfile = getenv("TSLIB_CALIBFILE")) != NULL) {
+        cal_fd = open (calfile, O_CREAT | O_RDWR, 0644);
+      } else {
+        cal_fd = open ("/etc/pointercal", O_CREAT | O_RDWR, 0644);
+      }
+      sprintf (cal_buffer,"%d %d %d %d %d %d %d %d %d",
+         cal.a[1], cal.a[2], cal.a[0],
+         cal.a[4], cal.a[5], cal.a[3], cal.a[6], xres, yres);
+      write (cal_fd, cal_buffer, strlen (cal_buffer) + 1);
+      close (cal_fd);
+                  i = 0;
+    } else {
+      printf("Calibration failed.\n");
+      i = -1;
+    }
+  
+    put_string_center (xres/2, yres/4 + 20,  "Touch calibration successful", 2);      
+  }
+  else
+  {
+    put_string_center (xres/2, yres/4 + 20 , "Touch calibration timeout", 2);
+  }
 
-	fillrect(0, 0, xres - 1, yres - 1, 0);
+  fillrect(0, 0, xres - 1, yres - 1, 0);
 	close_framebuffer();
 	ts_close(ts);
 	return i;
 }
+
+void sample_thread_function ( void *ptr )
+{
+  sampleThreadData *data;            
+  data = (sampleThreadData *) ptr;  
+
+  //printf("enter thread index %d \n", data->index);          
+  
+  pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
+  
+  if (data)
+  {
+    //printf("get_sample index %d \n", data->index);
+    //get_sample (ts, &cal, 0, 50,        50,        "Top left");      
+    get_sample (data->pTs, data->pCal, data->index, data->x, data->y, &data->szName[0]);
+  }
+      
+  //printf("exit thread index %d \n", data->index);
+  
+  data->thread_ended = 1;
+  pthread_exit(0); /* exit */        
+} 
+
+
+int get_sample_use_thread(sampleThreadData * pData)
+{
+  pthread_t threadSample;
+  int iCounter, iRet, x, y, color ;  
+  char szText[128]="";
+  
+  color = 2;
+  x = xres / 2;
+  y = yres / 4 + 20;
+  
+  iRet = pthread_create (&threadSample, NULL, (void *) &sample_thread_function, (void *) pData);   
+  if (iRet == 0)
+  {        
+    //wait until thread is finished or timeout is expired
+    for (iCounter=0; iCounter < g_iTimeoutValue; iCounter++)
+    {
+      int k;             
+      sprintf(szText, "%02d", g_iTimeoutValue - iCounter);
+      //show text
+      put_string_center (x, y , szText, color | XORMODE );
+      
+      //wait one second
+      for (k=0; k < 20; k++)
+      {
+        usleep(50*1000);     
+        if (pData->thread_ended)
+        {
+          break;
+        }
+      }
+                   
+      //remove text  
+      put_string_center (x, y , szText, color | XORMODE );      
+      if (pData->thread_ended)
+      {
+        break;
+      }
+    }
+    
+    if (iCounter >= g_iTimeoutValue)
+    {
+      pData->timeout = 1;           
+      iRet = pthread_cancel(threadSample);      
+      //printf("pthread_cancel returns %d \n", iRet);
+      usleep(50*1000);
+    }
+    else
+    {    
+      /* wait thread finished */
+      if(pthread_join(threadSample, NULL)) 
+      {
+        printf("Error joining thread\n");
+      }
+    }
+    //printf("timeout %d iCounter %d\n", pData->timeout, iCounter);
+  }
+  else
+  {
+    printf("pthread_create index %d FAILED\n", pData->index);  
+  }
+  
+  return 0; 
+}
+
+int ReadTimeoutValue()
+{
+  int status = -1;
+  tConfList * pHead = NULL;
+  char szOut[256] = "";
+   
+  pHead = ConfCreateList();
+  
+  if ((pHead)&&(ConfReadValues(pHead, CNF_FILE) == 0))
+  {
+    if (ConfGetValue(pHead, "calibtimeout", &szOut[0], sizeof(szOut)) == 0)
+    {
+      if (ConfIsNumber(szOut) == 0)
+      {
+        g_iTimeoutValue = atoi(szOut); 
+        
+        if (g_iTimeoutValue < CALIB_TIMEOUT_MIN)
+          g_iTimeoutValue = CALIB_TIMEOUT_MIN;
+        
+        status = 0;
+      }
+    }
+  }
+  
+  ConfDestroyList(pHead);
+  
+  return status;
+}
