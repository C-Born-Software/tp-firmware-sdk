//------------------------------------------------------------------------------
/// Copyright (c) 2000 - 2006 WAGO Kontakttechnik GmbH & Co. KG
///
/// PROPRIETARY RIGHTS of WAGO Kontakttechnik GmbH & Co. KG are involved in
/// the subject matter of this material. All manufacturing, reproduction,
/// use, and sales rights pertaining to this subject matter are governed
/// by the license agreement. The recipient of this software implicitly
/// accepts the terms of the license.
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
///
///  \file     pi.c
///
///  \version  $Revision: 6731 $1
///
///  \brief    
///
///  \author   Stefanie Meih√∂fer : WAGO Kontakttechnik GmbH & Co. KG
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Include files
//------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include <fcntl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/types.h>
#include <sys/time.h>

#include "kbus.h"
#include "config_tool_lib.h"
#include "pi_lib.h"

//------------------------------------------------------------------------------
// Local macros
//------------------------------------------------------------------------------

// show errors on screen? Normally not, because they would be also displayed e.g. on WBM
#define SHOW_ERRORS                         0


//------------------------------------------------------------------------------
// External variables
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Local typedefs
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Local variables
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// external functions
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Local functions
//------------------------------------------------------------------------------

void Test(void);

void ShowHelpText(void)
//
// Show describtion and usage of program on stdout
//
{
  int parameterIndex = 0;

  printf("\n* Read or write values of single PI values *\n\n");
  printf("Usage: pi <access> <address> <format> [value]\n\n");
  printf("access: read | write\n");
  printf("address: address of the requested value in IEC-format\n");
  printf("format: format of the value for output or input like in printf\n");
  printf("value: new value itself, only needed for writing\n");
  printf("\n");
}



int main(int    argc, 
         char** argv)
{
  int  status = SUCCESS;

  // help-text requested?
  if((argc == 2) && ((strcmp(argv[1], "--help") == 0) || (strcmp(argv[1], "-h") == 0)))
  {
    ShowHelpText();
  }

  #if TEST
  // test requested?
  else if((argc == 2) && (strcmp(argv[1], "--test") == 0))
  {
    Test();
  }
  #endif

  // read access requested
  else if((argc > 1) && (strcmp(argv[1], "read") == 0))
  {
    if(argc < 4)
    {
      status = MISSING_PARAMETER;
    }
    else
    {
      status = ReadPi(argv[2], argv[3], NULL);
    }
  }

  // write access requested
  else if((argc > 1) && (strcmp(argv[1], "write") == 0))
  {
    if(argc < 5)
    {
      status = MISSING_PARAMETER;
    }
    else
    {
      status = WritePi(argv[2], argv[3], argv[4]);
    }
  }

  // input parameter are unknown
  else
  {
    status = INVALID_PARAMETER;
  }

  #if SHOW_ERRORS
  if(status != SUCCESS)
  {
    ShowErrorText(status, "");
    ShowHelpText();
  }
  #endif

  return(status);
}


