//------------------------------------------------------------------------------
/// Copyright (c) 2000 - 2006 WAGO Kontakttechnik GmbH & Co. KG
///
/// PROPRIETARY RIGHTS of WAGO Kontakttechnik GmbH & Co. KG are involved in
/// the subject matter of this material. All manufacturing, reproduction,
/// use, and sales rights pertaining to this subject matter are governed
/// by the license agreement. The recipient of this software implicitly
/// accepts the terms of the license.
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
///
///  \file     READPI.c
///
///  \version  $Revision: 6731 $1
///
///  \brief    
///
///  \author   Stefanie Meih√∂fer : WAGO Kontakttechnik GmbH & Co. KG
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Include files
//------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "config_tool_lib.h"
#include "pi_lib.h"

//------------------------------------------------------------------------------
// Local macros
//------------------------------------------------------------------------------

#define SHOW_ERRORS                         0

#define MAX_LENGTH_PARAMETER_VALUE          20

// maximum length of whole input-parameter-string
#define MAX_LENGTH_PARAMETER_STRING         1500

//------------------------------------------------------------------------------
// External variables
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Local typedefs
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Local variables
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// external functions
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Local functions
//------------------------------------------------------------------------------



void ShowHelpText(void)
//
// Show describtion and usage of program on stdout
//
{
  int parameterIndex = 0;

  printf("\n* Get the value of a process variable *\n\n");
  printf("Usage: READPI [ ADR=address-value&FORMAT=format-value ]\n\n");
  printf("\n\n");
}


int main(int    argc, 
         char** argv)
{
  int   status  = SUCCESS;

  // help-text requested?
  if((argc == 2) && (((strcmp(argv[1], "--help") == 0) || strcmp(argv[1], "-h") == 0)))
  {
    ShowHelpText();
  }
  else
  {
    // check if the count of parameters is valid
    if(argc < 2)
    {
      status = MISSING_PARAMETER;
    }
    else
    {
      char addressString[MAX_LENGTH_PARAMETER_VALUE]    = "";
      char formatString[MAX_LENGTH_PARAMETER_VALUE]     = "";
      char lengthString[MAX_LENGTH_PARAMETER_VALUE]     = "";
      char parameterString[MAX_LENGTH_PARAMETER_STRING] = "";
      //printf("parameter:%s\n", argv[1]);

      // copy first parameter to parameter-string 
      (void)strncpy(parameterString, argv[1], sizeof(parameterString));

      // if parameter-list is already included in one string (with '&' between the parameters), we can use it directly
      // otherwise we must create one big string with all params in it
      if(argc > 2)
      {
        int argvNo = 0;

        for(argvNo = 2; argvNo < argc; ++argvNo)
        {
          (void)strncat(parameterString, "&", sizeof(parameterString));
          (void)strncat(parameterString, argv[argvNo], sizeof(parameterString));
        }
      }
      //printf("parameterString:%s\n", parameterString);

      // read single parameter from entire parameter-string, and call the processing routine, if all of them are given
      if(   (SUCCESS != GetParameterValue(parameterString, "ADR", addressString, sizeof(addressString)))
         || (SUCCESS != GetParameterValue(parameterString, "FORMAT", formatString, sizeof(formatString))) )
      {
        status = MISSING_PARAMETER;
      }
      else
      {
        // get value for array-lengt (success is not interesting, value is optional)
        (void)GetParameterValue(parameterString, "LEN", lengthString, sizeof(lengthString));
        //printf("addressString:%s formatString:%s lengthString:%s\n", addressString, formatString, lengthString);
        status = ReadPi(addressString, formatString, lengthString);
      }
    }
  }

  #if SHOW_ERRORS
  if(status != SUCCESS)
  {
    ShowErrorText(status, "");
    ShowHelpText();
  }
  #endif

  return(status);
}
