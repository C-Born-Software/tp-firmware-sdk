//------------------------------------------------------------------------------
/// Copyright (c) 2000 - 2006 WAGO Kontakttechnik GmbH & Co. KG
///
/// PROPRIETARY RIGHTS of WAGO Kontakttechnik GmbH & Co. KG are involved in
/// the subject matter of this material. All manufacturing, reproduction,
/// use, and sales rights pertaining to this subject matter are governed
/// by the license agreement. The recipient of this software implicitly
/// accepts the terms of the license.
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
///
///  \file     pi_lib.c
///
///  \version  $Revision: 6731 $1
///
///  \brief    
///
///  \author   Stefanie Meih√∂fer : WAGO Kontakttechnik GmbH & Co. KG
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Include files
//------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include <fcntl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/types.h>
#include <sys/time.h>

#include "kbus.h"
#include "config_tool_lib.h"
#include "pi_lib.h"

//------------------------------------------------------------------------------
// Local macros
//------------------------------------------------------------------------------

// time to wait at polling for a read-result: 100000 microsecond = 10ms
#define READ_WAIT_TIME                      10000

// maximum count of polls for a read-result
#define MAX_READ_TRIES                      10



//------------------------------------------------------------------------------
// External variables
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Local typedefs
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Local variables
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// external functions
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Local functions
//------------------------------------------------------------------------------

static int kbus_OpenShm(uint8_t    memoryType,
                        void**     ppKbusShm,
                        uint32_t*  pKbusShmSize,
                        uint32_t*  pPiBufferSize)
//
// Open the shared-memory-area to read the pi data
//
{
  int       status                            = 0;
  void*     pKbusShm                          = NULL;
  int       shmFileDescriptor                 = 0;
  uint32_t  kbusShmSize                       = 0;
  uint32_t  piBufferSize                      = 0;
  char      shmName[KBUS_MAX_LENGTH_SHM_NAME] = "";

  switch(memoryType)
  {
    case KBUS_MEMORY_TYPE_IO:         strncpy(shmName, KBUS_SHM_NAME, sizeof(shmName));
                                      kbusShmSize = sizeof(struct kbus_info);
                                      piBufferSize = KBUS_MAX_BYTE_MEMORY_TYPE_IO;
                                      break;

    case KBUS_MEMORY_TYPE_RETAIN:     strncpy(shmName, KBUS_RETAIN_SHM_NAME, sizeof(shmName));
                                      piBufferSize = MAX_RETAIN_SEGMENT_SIZE;
                                      kbusShmSize = piBufferSize + sizeof(kbus_tPiAccessShm);
                                      break;

    case KBUS_MEMORY_TYPE_PFC_INPUT:  strncpy(shmName, KBUS_PFC_INPUT_SHM_NAME, sizeof(shmName));
                                      piBufferSize = KBUS_MAX_BYTE_MEMORY_TYPE_PFC - KBUS_MIN_BYTE_MEMORY_TYPE_PFC + 1;
                                      kbusShmSize = piBufferSize + sizeof(kbus_tPiAccessShm);
                                      break;

    case KBUS_MEMORY_TYPE_PFC_OUTPUT: strncpy(shmName, KBUS_PFC_OUTPUT_SHM_NAME, sizeof(shmName));
                                      piBufferSize = KBUS_MAX_BYTE_MEMORY_TYPE_PFC - KBUS_MIN_BYTE_MEMORY_TYPE_PFC + 1;
                                      kbusShmSize = piBufferSize + sizeof(kbus_tPiAccessShm);
                                      break;

    default:                          status = INVALID_PARAMETER; 
                                      break;
  }

  if(SUCCESS == status)
  { 
    // open to read and write, needs changed by creation of shm
    //shmFileDescriptor = shm_open(KBUS_SHM_NAME, O_RDWR, S_IROTH | S_IWOTH);

    // open to read
    shmFileDescriptor = shm_open(shmName, O_RDONLY, S_IROTH | S_IWOTH);

    if(shmFileDescriptor < 0)
    {
      status = FILE_OPEN_ERROR;
    }
    else
    {
      // map memory
      //pKbusShmInfo = mmap(NULL, sizeof(*pKbusShmInfo), PROT_READ | PROT_WRITE, MAP_SHARED, shmFileDescriptor, 0);
      pKbusShm = mmap(NULL, kbusShmSize, PROT_READ, MAP_SHARED, shmFileDescriptor, 0);
      close(shmFileDescriptor);

      if(pKbusShm == MAP_FAILED)
      {
        status = FILE_OPEN_ERROR;
        shm_unlink(shmName);
      }

      // no error -> take values to output-parameter
      else
      {
        *ppKbusShm = pKbusShm;
        *pKbusShmSize = kbusShmSize;
        *pPiBufferSize = piBufferSize;
      }
    }
  }

  //if(pKbusShm != NULL) printf("pKbusShm open\n");
  return status;
}


static void kbus_shm_Close(void**   ppKbusShm,
                           uint32_t kbusShmSize)
//
// Close the shared-memory-area
//
{
  if(*ppKbusShm != NULL)
  {
    munmap(*ppKbusShm, kbusShmSize);
    *ppKbusShm = NULL;
  }
}


static uint8_t GetMemoryType(char      cIoType,
                             uint32_t* pByteOffset)
//
// Get the type of memory the requested pi-value is located.
//
// input: cIoType: I/O-type (I = input, Q = output)
//        pByteOffset: (pointer to) byte-offset of the variable in pi-buffer
//
// output:pByteOffset: (pointer to) byte-offset of the variable in pi-buffer, changed if type is pfc
//
// return: memory-type (KBUS_MEMORY_TYPE_IO, KBUS_MEMORY_TYPE_PFC_INPUT, KBUS_MEMORY_TYPE_PFC_OUTPUT, KBUS_MEMORY_TYPE_PFC)
//         or MEMORY_TYPE_UNKNOWN
//
{
  uint8_t memoryType = KBUS_MEMORY_TYPE_UNKNOWN;
  //printf("cIoType:%c byteOffset:%d\n", cIoType, byteOffset);

  // PI-input or -output values are requested
  if(  ((cIoType == 'I') || (cIoType == 'Q'))
     && (*pByteOffset >= KBUS_MIN_BYTE_MEMORY_TYPE_IO && (*pByteOffset <= KBUS_MAX_BYTE_MEMORY_TYPE_IO)) )
  {
    memoryType = KBUS_MEMORY_TYPE_IO;
  }

  // PFC input variables are requested
  else if(   (cIoType == 'I')
          && (*pByteOffset >= KBUS_MIN_BYTE_MEMORY_TYPE_PFC && (*pByteOffset <= KBUS_MAX_BYTE_MEMORY_TYPE_PFC)) )
  {
    memoryType = KBUS_MEMORY_TYPE_PFC_INPUT;
    *pByteOffset -= KBUS_MIN_BYTE_MEMORY_TYPE_PFC;
  }

  // PFC output variables are requested
  else if(   (cIoType == 'Q')
          && (*pByteOffset >= KBUS_MIN_BYTE_MEMORY_TYPE_PFC && (*pByteOffset <= KBUS_MAX_BYTE_MEMORY_TYPE_PFC)) )
  {
    memoryType = KBUS_MEMORY_TYPE_PFC_OUTPUT;
    *pByteOffset -= KBUS_MIN_BYTE_MEMORY_TYPE_PFC;
  }

  // retain variables are requested
  else if(cIoType == 'M')
  {
    memoryType = KBUS_MEMORY_TYPE_RETAIN;
  }

  // else - memory type is unknown - do nothing, return 0

  //printf("memoryType:%d\n", memoryType);
  return memoryType;
}


static int SendReadMessage(uint8_t memoryType)
//
// Send read request message to PLC to advise it to refresh the shared memory buffer of the requested memory type.
//
// input: memory type of the memory to read (KBUS_MEMORY_TYPE_PLC or KBUS_MEMORY_TYPE_RETAIN)
//        For KBUS_MEMORY_TYPE_IO this message is not neccesairy, because the shm-buffer is to be refreshed automatically 
{
  int status = SUCCESS;

  // open queue
  int qidPiAccess = msgget(KBUS_QKEY_PI_ACCESS, IPC_CREAT | 0666);
  //printf("qidPiAccess:%x\n", qidPiAccess);

  if(qidPiAccess < 0)
  {
    status = SYSTEM_CALL_ERROR;
  }
  else
  {
    // fill values in message-structure for queue-send
    kbus_tstPiAccessMessage stPiAccessMessage;

    memset(&stPiAccessMessage, 0, sizeof(stPiAccessMessage));
    stPiAccessMessage.messageType  = 1;
    stPiAccessMessage.accessType   = KBUS_PI_ACCESS_READ;
    stPiAccessMessage.memoryType   = memoryType;

    if(msgsnd(qidPiAccess, (void*)&stPiAccessMessage, sizeof(stPiAccessMessage), 0) < 0)
    {
      status = SYSTEM_CALL_ERROR;
      //printf("error while send read message\n");
    }
    //else printf("send read message successful\n");
  }

  return status;
}


uint8_t* GetPointerToPiReadData(void*     pKbusShm,
                                uint8_t   memoryType,
                                char      cIoType)
//
// Get pointer to buffer (in a shared memory area) of the pi-segment we want to read, depending on memory-type and I/O-type.
// Normal I/O-values are automatically refreshed by kbus. For the other segments we must instruct PLC to to actualize 
// it and wait until it does.
//
// input: pKbusShmInfo: pointer to the kbus shared-memory-area which contains the requested data
//        memoryType: type of memory (1=IO, 2=PFC, 3=RETAIN)
//        cIoType: I/O-type ('I'=input, 'Q'=output)
//
// return: pointer to requested pi-segment
//         NULL, if input is invalid
//
{
  int       status  = 0;
  uint8_t*  pPiData = NULL;

  if(pKbusShm == NULL)
  {
    return NULL;
  }
  //printf("memoryType:%d cIoType:%c \n", memoryType, cIoType);

  switch(memoryType)
  {
    // PI-input or -output values are requested
    case KBUS_MEMORY_TYPE_IO:
      {
        // plain sailing - I/O-buffer is to be refreshed automatically by kbus,
        // we just have to choose if pointer to input- or output-area is requested
        struct kbus_info* pKbusShmInfo = (struct kbus_info*)pKbusShm;

        switch(cIoType)
        {
          case 'I': pPiData = &pKbusShmInfo->image.inputs.data[0];
                    break;
          case 'Q': pPiData = &pKbusShmInfo->image.outputs.data[0];
                    break;
          default:  break;
        }
      }
      break;

    // PFC of retain variable is requested
    case KBUS_MEMORY_TYPE_PFC_INPUT: 
    case KBUS_MEMORY_TYPE_PFC_OUTPUT: 
    case KBUS_MEMORY_TYPE_RETAIN:
      {
        // we must assure, that PLC actualizes the shared memory, before we pass the data-pointer

        kbus_tPiAccessShm* pPiAccessShm = (kbus_tPiAccessShm*)pKbusShm;
        //printf("pPiAccessShm->changeIndicator:%d ->status:%d\n", pPiAccessShm->changeIndicator, pPiAccessShm->status);

        // check if retain-data is even existing
        if(pPiAccessShm->status == 0)
        {
          uint8_t   pollCounter = 0;

          // save actual change-indicator-value and send the read-request-message to PLC
          uint32_t  oldChangeIndicator = pPiAccessShm->changeIndicator;
          SendReadMessage(memoryType);

          // wait until plc had refreshed data (->change-indicator), stop after maximum tries or if an error occurs
          pollCounter = 0;
          while(   (pPiAccessShm->changeIndicator == oldChangeIndicator) 
                && (pPiAccessShm->status == SUCCESS)
                && (pollCounter < MAX_READ_TRIES) )
          {
            usleep(READ_WAIT_TIME);
            ++pollCounter;
          }

          // data was refreshed an no error occur? -> copy the data pointer
          if((pPiAccessShm->changeIndicator != oldChangeIndicator) && (pPiAccessShm->status == SUCCESS))
          {
            pPiData = pPiAccessShm->aPiSegmentCopy;
          }
          //printf("pPiAccessShm->changeIndicator2:%d ->status:%d\n", pPiAccessShm->changeIndicator, pPiAccessShm->status);
        }
      }
      break;

    // memory type is unknown - do nothing, return NULL
    default: break;
  }

  return(pPiData);
}


static uint8_t GetPiBufferAccessData(char      cDataType,
                                     int       iecAddress,
                                     int       iecBitPosition,
                                     uint32_t* pPiAccessOffsetByte,
                                     uint32_t* pPiAccessOffsetBit,
                                     uint32_t* pPiAccessSize)
//
// Convert IEC-address-values to absolute address-values for the direct access to memory-buffer.
// Characteristic of the datatyp X (= Bit) is, that the iec-address-byte and -bit values must be interpreted
// in word-size (= 2 byte)
// 
// input: cDataType: IEC data type (X, B, W, D)
//        iecAddress: IEC address, discribes the byte, word or dword number
//        iecBitPosition: IEC position of the requested bit
//
// output: pPiAccessOffsetByte: absolute byte offset in PI-buffer
//         pPiAccessOffsetBit: bit offset relating to the byte which is addressed by pPiAccessOffsetByte
//         pPiAccessSize: width of the data that must be accessed
//                        Note: for datatype X (Bit) pPiAccessSize is 0!
//
// return: error-code (SUCCESS | INVALID_PARAMETER)
//
{
  int       status            = SUCCESS;
  uint32_t  totalBitPosition  = 0;

  if((pPiAccessOffsetByte == NULL) || (pPiAccessOffsetByte == NULL) || (pPiAccessSize == NULL))
  {
    return(INVALID_PARAMETER);
  }

  // pre-initialize values
  *pPiAccessOffsetByte  = 0;
  *pPiAccessOffsetBit   = 0;
  *pPiAccessSize        = 0;

  // get offset and size of the requested data
  switch(cDataType)
  {
    // digital channel - bit
    case 'X': 
              // convert iec address values and bit-position to total bit-position 
              // - consider that iecAddress is given in 2-byte-width here!
              totalBitPosition  = (iecAddress * 2) * 8 + iecBitPosition;

              // convert total bit-position to byte- and bit-offset
              *pPiAccessOffsetByte  = totalBitPosition / 8;
              *pPiAccessOffsetBit   = totalBitPosition % 8;
              *pPiAccessSize        = 0;
              break;

    // analog channel - byte
    case 'B': *pPiAccessOffsetByte  = iecAddress;
              *pPiAccessSize        = 1;
              break;

    // analog channel - word
    case 'W': *pPiAccessOffsetByte  = iecAddress * 2;
              *pPiAccessSize        = 2;
              break;

    // analog channel - dword
    case 'D': *pPiAccessOffsetByte  = iecAddress * 4;
              *pPiAccessSize        = 4;
              break;

    default:  status = INVALID_PARAMETER;
              break;
  }

  //printf("piAccessOffsetByte:%d piAccessOffsetBit:%d piAddressSize:%d\n", *pPiAccessOffsetByte, *pPiAccessOffsetBit, *pPiAccessSize);
  return(status);
}


static int ReadValueFromBuffer(uint8_t*   pPiBuffer,
                               uint32_t   bufferSize,
                               uint32_t   piAccessOffsetByte,
                               uint32_t   piAccessOffsetBit,
                               uint32_t   piAccessSize,
                               uint32_t*  pReadData)
//
// Read value from specified buffer. Minimum size is 1 bit, maximum size are 4 bytes.
//
// input: pPiBuffer: pointer to data-buffer
//        bufferSize: size of data-buffer
//        piAccessOffsetByte: byte offset of the memory to read
//        piAccessOffsetBit: bit offset of one bit to be read (only interesting if piAccessSize = 0)
//        piAccessSize: count of bytes to read - if only one bit should be read, piAccessSize must be 0!
//
// output: pReadData: read value
//
{
  int status  = SUCCESS;
  //printf("bufferSize:%d piAccessOffsetByte:%d piAccessOffsetBit:%d piAccessSize:%d\n", bufferSize, piAccessOffsetByte, piAccessOffsetBit, piAccessSize);

  if((pPiBuffer == NULL) || (pReadData == NULL))
  {
    return(INVALID_PARAMETER);
  }

  // check if requested bytes exeed buffer range
  if((piAccessSize > sizeof(*pReadData)) || (piAccessOffsetByte + piAccessSize) > bufferSize)
  {
    return(INVALID_PARAMETER);
  }

  // if more than one bit is requested - copy bytes to output value
  if(piAccessSize > 0)
  {
    memcpy((uint8_t*)pReadData, pPiBuffer + piAccessOffsetByte, piAccessSize);
  }

  // if only one bit is requested - read whole byte,shift the requested bit to right off-site and set all other bits to 0
  else
  {
    memcpy((uint8_t*)pReadData, pPiBuffer + piAccessOffsetByte, 1);
    *pReadData = *pReadData >> piAccessOffsetBit;
    *pReadData &= 0x00000001;
  }

  //printf("readData:%x\n", *pReadData);
  return(status);
}


int IncrementIecAddress(char cDataType, 
                        int* pIecAddress, 
                        int* pIecBitPosition)
//
// Increment IEC-Address to the next higher one depending on the given data-type.
//
// input: cDataType: IEC data type (X, B, W, D)
//        iecAddress: IEC address, discribes the byte, word or dword number
//        iecBitPosition: IEC bit position 
//
{
  int status = SUCCESS;

  switch(cDataType)
  {
    // digital channel - bit
    case 'X': 
              ++(*pIecBitPosition);
              if(*pIecBitPosition > 15)
              {
                *pIecBitPosition = 0;
                *pIecAddress += 1;
              }
              break;

    // analog channel - byte / analog channel - word / analog channel - dword
    case 'B':
    case 'W':
    case 'D':
              *pIecAddress += 1;
              break;

    default:  status = INVALID_PARAMETER;
              break;
  }

  return status;
}



int ReadPi(char* pAddressString,
           char* pFormatString,
           char* pLengthString)
//
// Read one or more process values from process image.
//
// input: pAddressString: address of the requested value in IEC-style
//        pFormatString: format specifications in printf manner
//        pLengthString: length of array to read (-> requested value will be read length times)
//
{
  int       status              = SUCCESS;
  char      cIoType             = 0;
  char      cDataType           = 0;
  int       iecAddress          = 0;
  int       iecBitPosition      = 0;
  uint32_t  piAccessOffsetByte  = 0;
  uint32_t  piAccessOffsetBit   = 0;
  uint32_t  piAccessSize        = 0;
  uint8_t   piAccessMemoryType  = 0;

  if((pAddressString == NULL) || (pFormatString == NULL))
  {
    return(INVALID_PARAMETER);
  }
  //printf("pAddressString:%s pFormatString:%s\n", pAddressString, pFormatString);

  // read address values from input string
  sscanf(pAddressString, "%c%c%d.%d", &cIoType, &cDataType, &iecAddress, &iecBitPosition);
  //printf("cIoType:%c cDataType:%c iecAddress:%d iecBitPosition:%d\n", cIoType, cDataType, iecAddress, iecBitPosition);

  status = GetPiBufferAccessData(cDataType, iecAddress, iecBitPosition, 
                                 &piAccessOffsetByte, &piAccessOffsetBit, &piAccessSize);
  if(status == SUCCESS)
  {
    uint32_t  kbusShmSize         = 0;
    uint32_t  piBufferSize        = 0;
    void*     pKbusShm            = NULL;
    uint8_t   piAccessMemoryType  = 0;

    // evaluate type of requested memory an open the appendant shared memory
    piAccessMemoryType = GetMemoryType(cIoType, &piAccessOffsetByte);

    status = kbus_OpenShm(piAccessMemoryType, &pKbusShm, &kbusShmSize, &piBufferSize);

    if(status == SUCCESS)
    {
      int       piAddress   = 0;
      int       iecVarSize  = 0;
      uint8_t*  pPiBuffer   = NULL;

      // get pointer to data area with the requested data (depends on the structure of the belonging shared memory)
      pPiBuffer = GetPointerToPiReadData(pKbusShm, piAccessMemoryType, cIoType);

      if(pPiBuffer == NULL)
      {
        status = INVALID_PARAMETER;
      }
      else
      {
        int readArrayLength = -1;
        int readValueIndex  = 0;

        // if more than one value should be read, read count of values
        if(pLengthString != NULL) sscanf(pLengthString, "%d", &readArrayLength);
        if(readArrayLength == -1) readArrayLength = 1;

        // loop over all values that should be read
        while((readValueIndex < readArrayLength) && (status == SUCCESS))
        {
          uint32_t readData = 0;

          // read requested value from buffer and put it on stdio by the given format-string
          status = ReadValueFromBuffer(pPiBuffer, piBufferSize, piAccessOffsetByte, piAccessOffsetBit, piAccessSize, 
                                       &readData);
          if(status == SUCCESS)
          {
            // put value to stdout with the given format-string
            // if value is to be showed as floating point number -> convert it to float first
            if(NULL != strpbrk(pFormatString, "fge"))
            {
              float fValue = 0;
              memcpy((uint8_t*)&fValue, (uint8_t*)&readData, sizeof(fValue));
              printf(pFormatString, fValue);
            }
            else
            {
              printf(pFormatString, readData);
            }

            // if more than one value should be read, increment iec address
            if(readArrayLength > 1)
            {
              if(SUCCESS == (status = IncrementIecAddress(cDataType, &iecAddress, &iecBitPosition)))
              {
                // convert iec address to direkt access values to buffer, check overflow
                status = GetPiBufferAccessData(cDataType, iecAddress, iecBitPosition, 
                                               &piAccessOffsetByte, &piAccessOffsetBit, &piAccessSize);
                //printf("\niecAddress:%d iecBitPosition:%d - ");
              }
            }

            ++readValueIndex;
          }
        }
      }

      kbus_shm_Close(&pKbusShm, kbusShmSize);
    }
  }

  return(status);
}


static int CreateWriteMessage(uint8_t    memoryType,
                              uint32_t   piAccessOffsetByte,
                              uint32_t   piAccessOffsetBit,
                              uint32_t   piAccessSize,
                              uint32_t   writeData)
//
// Create and send messagen to PLC to change a specified process-value. 
// Minimum size of value is 1 bit, maximum size are 4 bytes.
//
// input: memoryType: type of memory to write - KBUS_MEMORY_TYPE_PFC or KBUS_MEMORY_TYPE_RETAIN (KBUS_MEMORY_TYPE_IO is not allowed)
//        piAccessOffsetByte: byte offset of the memory to write
//        piAccessOffsetBit: bit offset of one bit to be written (only interesting if piAccessSize = 0)
//        piAccessSize: count of bytes to write - if only one bit should be written, piAccessSize must be 0!
//        writeData: data value to write
//
{
  int status  = SUCCESS;

  // check if value to write is bigger than maximum value for the access-size
  switch(piAccessSize)
  {
    // one bit
    case 0: if(writeData > 1)      status = INVALID_PARAMETER; 
            break;
    // byte
    case 1: if(writeData > 0xff)   status = INVALID_PARAMETER; 
            break;
    // word
    case 2: if(writeData > 0xffff) status = INVALID_PARAMETER; 
            break;
    // dword - eror-case can never happen, because uint32_t-value can never be larger
    case 4: break;

    default:  status = INVALID_PARAMETER; break;
  }

  if(status == SUCCESS)
  {
    // get id of message-queue
    int  qidPiAccess = msgget(KBUS_QKEY_PI_ACCESS, IPC_CREAT | 0666);
    //printf("qidPiWrite:%x\n", qidPiWrite);

    if(qidPiAccess < 0)
    {
      status = SYSTEM_CALL_ERROR;
    }
    else
    {
      // fill values in message-structure for queue-send
      kbus_tstPiAccessMessage stPiAccessMessage;

      stPiAccessMessage.messageType   = 1;
      stPiAccessMessage.accessType    = KBUS_PI_ACCESS_WRITE;
      stPiAccessMessage.memoryType    = memoryType;
      stPiAccessMessage.byteOffset    = piAccessOffsetByte;
      stPiAccessMessage.bitOffset     = piAccessOffsetBit;
      stPiAccessMessage.byteCount     = piAccessSize;
      stPiAccessMessage.value         = 0;
      stPiAccessMessage.value         = writeData;
      /*
      printf("message -type:%d accessType:%d memoryType:%d byteOffset:%d byteCount:%d value:%d\n",
              stPiAccessMessage.messageType, stPiAccessMessage.accessType, stPiAccessMessage.memoryType,
              stPiAccessMessage.byteOffset, stPiAccessMessage.byteCount, stPiAccessMessage.value);
      */
      if(msgsnd(qidPiAccess, (void*)&stPiAccessMessage, sizeof(stPiAccessMessage), 0) < 0)
      {
        status = SYSTEM_CALL_ERROR;
        //printf("error while send\n");
      }
    }
  }

  return(status);
}



int WritePi(char* pAddressString,
            char* pFormatString,
            char* pValueString)
//
// Write one process value.
//
// input: pAddressString: address of the requested value in IEC-style
//
{
  int       status              = SUCCESS;
  char      cIoType             = 0;
  char      cDataType           = 0;
  int       iecAddress          = 0;
  int       iecBitPosition      = 0;
  uint32_t  piAccessOffsetByte  = 0;
  uint32_t  piAccessOffsetBit   = 0;
  uint32_t  piAccessSize        = 0;

  if((pAddressString == NULL) || (pValueString == NULL))
  {
    return(INVALID_PARAMETER);
  }
  //printf("pAddressString:%s pFormatString:%s\n", pAddressString, pFormatString);

  // read address values from input string
  sscanf(pAddressString, "%c%c%d.%d", &cIoType, &cDataType, &iecAddress, &iecBitPosition);
  //printf("cIoType:%c cDataType:%c iecAddress:%d iecBitPosition:%d\n", cIoType, cDataType, iecAddress, iecBitPosition);

  // change the given (iec-)values to values usable for direct access to data-buffer
  status = GetPiBufferAccessData(cDataType, iecAddress, iecBitPosition, 
                                 &piAccessOffsetByte, &piAccessOffsetBit, &piAccessSize);
  if(status == SUCCESS)
  {
    uint8_t memoryType  = 0;

    // get the memory type to which the requeted variable belongs
    memoryType = GetMemoryType(cIoType, &piAccessOffsetByte);

    if(memoryType != KBUS_MEMORY_TYPE_UNKNOWN)
    {
      uint32_t value = 0;
      //printf("pValueString:%s pFormatString:%s\n", pValueString, pFormatString);

      // convert value from input string to number, use the given format-string
      // if value is given as floating point number -> read float first and convert it to int
      if(NULL != strpbrk(pFormatString, "fge"))
      {
        float fValue = 0;
        sscanf(pValueString, pFormatString, &fValue);
        memcpy((uint8_t*)&value, (uint8_t*)&fValue, sizeof(fValue));
        //printf("value:%f\n", fValue);
      }
      else
      {
        sscanf(pValueString, pFormatString, &value);
      }
      //printf("value:%x\n", value);

      // create and send the message to PLC to change the value
      status = CreateWriteMessage(memoryType, piAccessOffsetByte, piAccessOffsetBit, piAccessSize, value);
    }
  }

  return status;
}



#if TEST

//------------------------------------------------------------------------------
// functions for unit tests
//------------------------------------------------------------------------------

void PrintBufferContent(uint8_t* pBuffer,
                        uint32_t bufferSize)
{
  if((pBuffer != NULL) && (bufferSize != 0))
  {
    int byteNr = 0;

    for(byteNr = 0; byteNr < bufferSize; ++byteNr)
    {
      //if((byteNr % 16) == 0) printf("\n%3d | ", byteNr);
      if((byteNr % 32) == 0) printf("\n%3d | ", byteNr);
      printf("%02x ", *(pBuffer + byteNr));
    }
    printf("\n\n");
  }

  return;
}


void ShowPiBuffer(void)
{
  struct kbus_info* pKbusShmInfo  = NULL;
  uint32_t          kbusShmSize   = 0;
  uint32_t          piBufferSize  = 0;

  printf("Show PI Buffer\n\n");

  if(SUCCESS == kbus_OpenShm(KBUS_MEMORY_TYPE_IO, (void**)&pKbusShmInfo, &kbusShmSize, &piBufferSize))
  {
    uint8_t*  pPiBuffer   = NULL;
    char      acIoTypes[] = "IQ";
    uint8_t   ioTypeNr    = 0;

    printf("kbus_in_len:%d\n", pKbusShmInfo->kbus_in_len);
    printf("kbus_out_len:%d\n", pKbusShmInfo->kbus_out_len);

    for(ioTypeNr = 0; ioTypeNr < (strlen(acIoTypes)); ++ioTypeNr)
    {
      printf("Datatype:%c\n", acIoTypes[ioTypeNr]);

      // get pointer to input or output data buffer and show it byte by byte
      pPiBuffer = GetPointerToPiReadData((void*)pKbusShmInfo, KBUS_MEMORY_TYPE_IO, acIoTypes[ioTypeNr]);
      if(pPiBuffer != NULL)
      {
        int byteNr = 0;

        for(byteNr = 0; byteNr < KBUS_PI_SIZE; ++byteNr)
        {
          //if((byteNr % 16) == 0) printf("\n%3d | ", byteNr);
          if((byteNr % 32) == 0) printf("\n%3d | ", byteNr);
          printf("%02x ", *(pPiBuffer + byteNr));
        }
      }
      printf("\n\n");
    }
    kbus_shm_Close((void**)&pKbusShmInfo, kbusShmSize);
  }

  if(SUCCESS == kbus_OpenShm(KBUS_MEMORY_TYPE_RETAIN, (void**)&pKbusShmInfo, &kbusShmSize, &piBufferSize))
  {
    uint8_t*  pPiBuffer   = NULL;

    printf("Datatype:M\n");

    // get pointer to data buffer and show it byte by byte
    pPiBuffer = GetPointerToPiReadData((void*)pKbusShmInfo, KBUS_MEMORY_TYPE_RETAIN, 0);
    if(pPiBuffer != NULL)
    {
      int byteNr = 0;

      for(byteNr = 0; byteNr < KBUS_PI_SIZE; ++byteNr)
      {
        //if((byteNr % 16) == 0) printf("\n%3d | ", byteNr);
        if((byteNr % 32) == 0) printf("\n%3d | ", byteNr);
        printf("%02x ", *(pPiBuffer + byteNr));
      }
      printf("\n\n");
    }
  }
  kbus_shm_Close((void**)&pKbusShmInfo, kbusShmSize);

  if(SUCCESS == kbus_OpenShm(KBUS_MEMORY_TYPE_PFC_INPUT, (void**)&pKbusShmInfo, &kbusShmSize, &piBufferSize))
  {
    uint8_t*  pPiBuffer   = NULL;

    printf("Datatype:PLC I\n");

    // get pointer to data buffer and show it byte by byte
    pPiBuffer = GetPointerToPiReadData((void*)pKbusShmInfo, KBUS_MEMORY_TYPE_PFC_INPUT, 0);
    if(pPiBuffer != NULL)
    {
      int byteNr = 0;

      for(byteNr = 0; byteNr < KBUS_PI_SIZE; ++byteNr)
      {
        //if((byteNr % 16) == 0) printf("\n%3d | ", byteNr);
        if((byteNr % 32) == 0) printf("\n%3d | ", byteNr);
        printf("%02x ", *(pPiBuffer + byteNr));
      }
      printf("\n\n");
    }
  }
  kbus_shm_Close((void**)&pKbusShmInfo, kbusShmSize);

  if(SUCCESS == kbus_OpenShm(KBUS_MEMORY_TYPE_PFC_OUTPUT, (void**)&pKbusShmInfo, &kbusShmSize, &piBufferSize))
  {
    uint8_t*  pPiBuffer   = NULL;

    printf("Datatype:PLC O\n");

    // get pointer to data buffer and show it byte by byte
    pPiBuffer = GetPointerToPiReadData((void*)pKbusShmInfo, KBUS_MEMORY_TYPE_PFC_OUTPUT, 0);
    PrintBufferContent(pPiBuffer, KBUS_PI_SIZE);
    /*
    if(pPiBuffer != NULL)
    {
      int byteNr = 0;

      for(byteNr = 0; byteNr < KBUS_PI_SIZE; ++byteNr)
      {
        //if((byteNr % 16) == 0) printf("\n%3d | ", byteNr);
        if((byteNr % 32) == 0) printf("\n%3d | ", byteNr);
        printf("%02x ", *(pPiBuffer + byteNr));
      }
      printf("\n\n");
    }
    */
  }
  kbus_shm_Close((void**)&pKbusShmInfo, kbusShmSize);

  return;
}


void Test(void)
{
  if(1)
  {
    ShowPiBuffer();
  }

  if(0)
  {
    typedef struct  
    {
      char      cDataType;
      int       iecAddress;
      int       iecBitPosition;
      uint32_t  piAccessOffsetByte;
      uint32_t  piAccessOffsetBit;
      uint32_t  piAccessSize;
      int       status;
    } tTestData;

    tTestData aTestData[] =
    {
      { 'a', 10,  0,  0, 0, 0, INVALID_PARAMETER },
      { 'B',  2,  0,  2, 0, 1, SUCCESS },
      { 'B',  2,  1,  2, 0, 1, SUCCESS },
      { 'W',  5,  0, 10, 0, 2, SUCCESS },
      { 'D',  3,  0, 12, 0, 4, SUCCESS },
      { 'X',  1,  0,  2, 0, 0, SUCCESS },
      { 'X',  0,  4,  0, 4, 0, SUCCESS },
      { 'X',  2,  2,  4, 2, 0, SUCCESS },
      { 'X',  2, 11,  5, 3, 0, SUCCESS },
      { 'X',  3, 15,  7, 7, 0, SUCCESS },
      { 'X',  3, 16,  8, 0, 0, SUCCESS },
      {  0 ,  0,  0,  0, 0, 0, 0}
    };

    uint32_t  piAccessOffsetByte  = 0;
    uint32_t  piAccessOffsetBit   = 0;
    uint32_t  piAccessSize        = 0;
    uint32_t  testDataIndex       = 0;
    int       status              = SUCCESS;

    printf("\n\nTest GetPiBufferAccessData\n\n");

    while(aTestData[testDataIndex].cDataType != 0)
    {
      status = GetPiBufferAccessData(aTestData[testDataIndex].cDataType, 
                                     aTestData[testDataIndex].iecAddress,
                                     aTestData[testDataIndex].iecBitPosition,
                                     &piAccessOffsetByte, &piAccessOffsetBit, &piAccessSize);
      printf("cDataType:%c iecAddress:%2d iecBitPosition:%2d piAccessOffsetByte:%2d piAccessOffsetBit:%d piAccessSize:%2d status:%d",
              aTestData[testDataIndex].cDataType, 
              aTestData[testDataIndex].iecAddress,
              aTestData[testDataIndex].iecBitPosition,
              piAccessOffsetByte, piAccessOffsetBit, piAccessSize,
              status);
      if(   (aTestData[testDataIndex].piAccessOffsetByte == piAccessOffsetByte)
         && (aTestData[testDataIndex].piAccessOffsetBit  == piAccessOffsetBit)
         && (aTestData[testDataIndex].piAccessSize       == piAccessSize)
         && (aTestData[testDataIndex].status             == status))
      {
        printf(" > ok\n");
      }
      else
      {
        printf(" > ERROR\n");
      }

      ++testDataIndex;
    }
  }

  if(0)
  {
    uint8_t testBuffer[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13 };

    typedef struct  
    {
      int       offsetByte;
      int       offsetBit;
      int       size;
      uint32_t  readData;
      int       status;

    } tTestData;

    tTestData aTestData[] =
    {
      {  18,  0,  4, 0,           INVALID_PARAMETER },    // too long
      {   0,  0,  1, 0,           SUCCESS },              // byte
      {   1,  0,  2, 0x0201,      SUCCESS },              // word
      {   4,  0,  2, 0x0504,      SUCCESS },              // word
      {   4,  0,  4, 0x07060504,  SUCCESS },              // dword
      {   2,  1,  0, 1,           SUCCESS },              // bit
      {  10,  2,  0, 0,           SUCCESS },              // bit
      {  10,  3,  0, 1,           SUCCESS },              // bit
      {   3,  0,  0, 1,           SUCCESS },              // (only) bit Nr.0

      { -1, -1, -1, 0 }
    };

    int       status        = SUCCESS;
    int       testDataIndex = 0;
    uint32_t  readData      = 0;

    printf("\n\nTest ReadValueFromBuffer\n\n");

    printf("TestBuffer: (%d) ", sizeof(testBuffer));
    for(testDataIndex = 0; testDataIndex < sizeof(testBuffer); ++testDataIndex)
    {
      printf("%2x ", testBuffer[testDataIndex]);
    }
    printf("\n\n");

    testDataIndex = 0;
    while(aTestData[testDataIndex].offsetByte != -1)
    {
      status = ReadValueFromBuffer(testBuffer, sizeof(testBuffer), 
                                   aTestData[testDataIndex].offsetByte,
                                   aTestData[testDataIndex].offsetBit,
                                   aTestData[testDataIndex].size,
                                   &readData);
      printf("offsetByte:%2d offsetByte:%2d size:%2d readData:%8x status:%d",
              aTestData[testDataIndex].offsetByte,
              aTestData[testDataIndex].offsetBit,
              aTestData[testDataIndex].size,
              readData, status);
      if((aTestData[testDataIndex].readData == readData) && (aTestData[testDataIndex].status == status))
      {
        printf(" > ok\n");
      }
      else
      {
        printf(" > ERROR");
        printf(" (readData:%x status:%d)\n", aTestData[testDataIndex].readData, aTestData[testDataIndex].status);
      }

      ++testDataIndex;
    }
  }

  printf("\n");
  return;
}
#endif
