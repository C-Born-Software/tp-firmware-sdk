#!/bin/bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018 WAGO Kontakttechnik GmbH & Co. KG

order=$(/etc/config-tools/get_typelabel_value ORDER)
board_variant=$(< /sys/class/wago/system/board_variant)

DIPSWITCHDIR=/dev/dip-switch  

# go up process hierarchy to see if we were started from rcS
# during system initialisation.
function is_initphase
{
  local STATUS="1"
  local RCS="(rcS)"
  local PARENTPID=$$
  local PNAME=""

  while [ "$PARENTPID" -ne 1 ]; do
    set -- $(< /proc/$PARENTPID/stat)
    PNAME=$2
    PARENTPID=$4
    if [ "$PNAME" = $RCS ]; then
      STATUS="0"
      break
    fi
  done
  return $STATUS
}

function is_4port_eth()
{
    [[ ${order:0:8} == "750-8215" || \
       ${order:0:8} == "750-8211" || \
       ${order:0:8} == "750-8210" ]]
}

# read dip switch value from sysfs
function get_dip_netvalue
{
    local dipvalue=0
    if [ -d $DIPSWITCHDIR ]; then
        dipvalue=$(($(<$DIPSWITCHDIR/value)))
    fi
    echo $dipvalue
}

function do_ifupdown
{
    mode=$1

    if [ "$mode" = UP ]; then
        # kernel defaults X1 and X2 to be powered down.
        # ifup of ethX1 or ethX2 powers on the network ports. If a port is disabled,
        # /etc/network/interfaces is set so that no power on occurs.
        ifup lo
    else
        ifdown -a
    fi
}


function get_next_macs()
{
    local startMac="$1"
    local macCount="$2"
    local isValidMac="FALSE"

    # Check MAC address has valid format.
    [[ "$startMac" =~ ^([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}$ ]] && isValidMac="TRUE"

    if [[ $isValidMac == "TRUE" ]]; then
        # Remove colons
        mac_plain=${startMac//:/}
        macs=($mac_plain)

        local i=1
        while [ $i -le "$macCount" ] ; do
            macs=( "${macs[@]}" $(printf "%012X" $(( 0x$mac_plain + i )) ) )
            ((i++))
        done
    else
        echo "NETWORK_INIT - Invalid MAC address \"startMac\". Failed generating subsequent addresses."
    fi
}

function networking_stop
{
    if grep -q "nfsroot" /proc/cmdline; then
        echo "booting from nfs, skip networking stop"
        exit 0
    fi
}


function enable_interrupt_pacing
{
    ethtool -C eth0 rx-usecs 1000
}


function networking_start
{
    if is_4port_eth || [[ $board_variant =~ ^pac100* ]]; then
        enable_interrupt_pacing
    fi

    if grep -q "nfsroot" /proc/cmdline; then
        echo "booting from nfs, skip networking start"
        exit 0
    fi
    echo "starting network interfaces..."

    echo "DIP_SWITCH_VALUE=$(get_dip_netvalue)" > /etc/specific/dipvalue-on-reset

    # set weak endsystem mode as default. See rfc1122 and kernel Documentation/networking/ip-sysctl.txt.
    echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore

    # set arp accept to send replies on gratuitous arp's with our own ip address.
    echo 1 > /proc/sys/net/ipv4/conf/all/arp_accept

    # Setup mac addresses - default behaviour is to use the controller's mac address for all interfaces
    # If you want to use different mac addresses you need to enable promiscous mode of eth0
    # which is disabled by default.
    # To do that uncomment the following line and set your desired mac addresses here.
    # ifconfig eth0 promisc  # this enables promiscous mode, to disable use 'ifconfig eth0 -promisc'

    # get configured mac address and use it for the dsa slave devices

    # NOTE: config-tools dependency here!!
    local macaddr
    macaddr=$(/etc/config-tools/get_typelabel_value MAC | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}')
    if is_4port_eth; then
	    # Get next MAC addresses and store them to macs.
        # macs[0] contains the original MAC address ($macaddr).
        declare -a macs
    	  get_next_macs "$macaddr" 4
        # Add the main MAC to the ATU, CPU port is 6.
        /sbin/pfcXXX_mv88e6321_write_atu.sh $macaddr 6 
        # Add the other MACs to the ATU as well.
        /sbin/pfcXXX_mv88e6321_write_atu.sh ${macs[1]} 6
        /sbin/pfcXXX_mv88e6321_write_atu.sh ${macs[2]} 6
        /sbin/pfcXXX_mv88e6321_write_atu.sh ${macs[3]} 6
        /sbin/pfcXXX_mv88e6321_write_atu.sh ${macs[4]} 6
    fi

    do_ifupdown UP
}

case "$1" in
start)
    networking_start
    ;;
stop)
    networking_stop
    ;;
reload)
    networking_stop
    networking_start
    ;;
restart|force-reload)
    networking_stop
    networking_start
    ;;
*)
    N=$BASH_COMMAND
    echo "usage: $N {start|stop|restart|force-reload}" >&2
    exit 1
    ;;
esac

exit 0
