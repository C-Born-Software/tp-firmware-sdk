#!/bin/sh

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018 WAGO Kontakttechnik GmbH & Co. KG

# This script is started to wait for link up and then bring up the bridge interfaces.
# Reason is to enable sending of gratuitous ARPs.
# The script is run in background if started during system initialisationi with
# argument bridgeup.
# Then it is called again witch argument start to wait to finish bringing up the interfaces.
#
PIDFILE="/var/run/networking-finish.pid"
order=$(/etc/config-tools/get_typelabel_value ORDER)

function get_next_macs()
{
    local startMac="$1"
    local macCount="$2"
    local isValidMac="FALSE"

    # Check MAC address has valid format.
    [[ "$startMac" =~ ^([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}$ ]] && isValidMac="TRUE"

    if [[ $isValidMac == "TRUE" ]]; then
        # Remove colons
        mac_plain=${startMac//:/}
        macs=($mac_plain)

        local i=1
        while [ $i -le "$macCount" ] ; do
            macs=( "${macs[@]}" $(printf "%012X" $(( 0x$mac_plain + i )) ) )
            ((i++))
        done
    else
        echo "NETWORK_INIT - Invalid MAC address \"startMac\". Failed generating subsequent addresses."
    fi
}

function is_4port_eth()
{
    [[ ${order:0:8} == "750-8215" || \
       ${order:0:8} == "750-8211" || \
       ${order:0:8} == "750-8210" ]]
}

function is_linkup
{
    # Needs network interface name ethXn as argument.
    local linkup=$(ethtool $1 | awk '/Link detected:/ {print $NF}')
    [ "$linkup" = yes ]
}

function read_pidfile
{
    # atomic read of pidfile, returns pid or 0 on non-existing pidfile
    local pid="0"
    local tmpfile=$(mktemp -t -p /tmp netwpid.XXXXXX)

    cat $PIDFILE > $tmpfile 2> /dev/null
    [ $? -eq 0 ] && pid=$(<$tmpfile)
    rm -f $tmpfile
    echo $pid
}

function is_self_running
{
    local PID=0
    local status=1

    # See if we are running already.
    PID=$(read_pidfile)
    if [ $PID -gt 0 ]; then
        # We got a PID. Freeze the process.
        if kill -SIGSTOP $PID &> /dev/null; then
            if [ -e /proc/$PID ] && grep -q networking /proc/$PID/cmdline; then
                # networking background process is running already.
                status=0
            else
                # no process. Stale pid file.
                rm /var/run/networking.pid
            fi
            # Continue the frozen process.
            kill -SIGCONT $PID
        fi
    fi
    return $status
}

function wait_for_link_up
{
    local repeats=0
    local dsa_mode=$(sed -n 's/# dsa_mode=\(.*\)/\1/p' /etc/network/interfaces)

    # Wait for link up.
    check_linkup="ethX1"
    if [ $dsa_mode = 1 ]; then
        check_linkup="ethX1 ethX2"
    fi
    while [ $repeats -lt 20 ]; do
        for dev in $check_linkup; do
            if ! is_linkup $dev; then
                break
            fi
            false
        done
        if [ $? -ne 0 ]; then
            break
        fi
        usleep 100000
        repeats=$(($repeats + 1))
    done

    # This sleep is to wait for auto MDI-X switching to finish.
    sleep 2
}

function interfaces_up
{
    wait_for_link_up
    #ifup br0
    #ifup br1
    #local order=$(/etc/config-tools/get_typelabel_value ORDER)
    #if [[ ${order:0:8} == "750-8215" ]]; then
    #	ifup br2
   	#fi
}


function write_atu
{
    local macaddr=$(/etc/config-tools/get_typelabel_value MAC | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}')
    if is_4port_eth; then
	    # Get next MAC addresses and store them to macs.
        # macs[0] contains the original MAC address ($macaddr).
        declare -a macs
    	  get_next_macs "$macaddr" 4
        # Add the main MAC to the ATU, CPU port is 6.
        /sbin/pfcXXX_mv88e6321_write_atu.sh $macaddr 6
        # Add the other MACs to the ATU as well.
        /sbin/pfcXXX_mv88e6321_write_atu.sh ${macs[1]} 6
        /sbin/pfcXXX_mv88e6321_write_atu.sh ${macs[2]} 6
        /sbin/pfcXXX_mv88e6321_write_atu.sh ${macs[3]} 6
        /sbin/pfcXXX_mv88e6321_write_atu.sh ${macs[4]} 6
    fi
}

# main program. Enable gratuitous ARP, wait for link to become up and start the bridge
# interfaces.
case "$1" in
bridgeup)
    if ! is_self_running; then
        echo $$ > $PIDFILE
        #interfaces_up
        rm $PIDFILE
    fi
    ;;
start|wait)
    echo "Finish up networking ..."
    write_atu
    ;;
stop)
    ;;
*)
    echo "usage: /etc/init.d/networking-finish {bridgeup|start|wait}" >&2
    exit 1
    ;;
esac
exit 0
