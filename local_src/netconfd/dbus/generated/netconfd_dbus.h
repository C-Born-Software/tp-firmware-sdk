/*
 * Generated by gdbus-codegen 2.56.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __NETCONFD_DBUS_H__
#define __NETCONFD_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for de.wago.netconfd1.interface_config */

#define NETCONFD_TYPE_INTERFACE_CONFIG (netconfd_interface_config_get_type ())
#define NETCONFD_INTERFACE_CONFIG(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NETCONFD_TYPE_INTERFACE_CONFIG, netconfdInterface_config))
#define NETCONFD_IS_INTERFACE_CONFIG(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NETCONFD_TYPE_INTERFACE_CONFIG))
#define NETCONFD_INTERFACE_CONFIG_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NETCONFD_TYPE_INTERFACE_CONFIG, netconfdInterface_configIface))

struct _netconfdInterface_config;
typedef struct _netconfdInterface_config netconfdInterface_config;
typedef struct _netconfdInterface_configIface netconfdInterface_configIface;

struct _netconfdInterface_configIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_backup) (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_config);

  gboolean (*handle_get) (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_getbackupparamcount) (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_getdeviceinterfaces) (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_getinterfaceconfig) (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_restore) (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_config);

  gboolean (*handle_set) (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_config);

  gboolean (*handle_setinterfaceconfig) (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_config);

};

GType netconfd_interface_config_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *netconfd_interface_config_interface_info (void);
guint netconfd_interface_config_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void netconfd_interface_config_complete_set (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    gint result);

void netconfd_interface_config_complete_get (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *config);

void netconfd_interface_config_complete_getdeviceinterfaces (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *interfaces);

void netconfd_interface_config_complete_getinterfaceconfig (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *config);

void netconfd_interface_config_complete_setinterfaceconfig (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    gint result);

void netconfd_interface_config_complete_getbackupparamcount (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *interfaces);

void netconfd_interface_config_complete_backup (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    gint result);

void netconfd_interface_config_complete_restore (
    netconfdInterface_config *object,
    GDBusMethodInvocation *invocation,
    gint result);



/* D-Bus method calls: */
void netconfd_interface_config_call_set (
    netconfdInterface_config *proxy,
    const gchar *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_interface_config_call_set_finish (
    netconfdInterface_config *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_interface_config_call_set_sync (
    netconfdInterface_config *proxy,
    const gchar *arg_config,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void netconfd_interface_config_call_get (
    netconfdInterface_config *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_interface_config_call_get_finish (
    netconfdInterface_config *proxy,
    gchar **out_config,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_interface_config_call_get_sync (
    netconfdInterface_config *proxy,
    gchar **out_config,
    GCancellable *cancellable,
    GError **error);

void netconfd_interface_config_call_getdeviceinterfaces (
    netconfdInterface_config *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_interface_config_call_getdeviceinterfaces_finish (
    netconfdInterface_config *proxy,
    gchar **out_interfaces,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_interface_config_call_getdeviceinterfaces_sync (
    netconfdInterface_config *proxy,
    gchar **out_interfaces,
    GCancellable *cancellable,
    GError **error);

void netconfd_interface_config_call_getinterfaceconfig (
    netconfdInterface_config *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_interface_config_call_getinterfaceconfig_finish (
    netconfdInterface_config *proxy,
    gchar **out_config,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_interface_config_call_getinterfaceconfig_sync (
    netconfdInterface_config *proxy,
    gchar **out_config,
    GCancellable *cancellable,
    GError **error);

void netconfd_interface_config_call_setinterfaceconfig (
    netconfdInterface_config *proxy,
    const gchar *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_interface_config_call_setinterfaceconfig_finish (
    netconfdInterface_config *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_interface_config_call_setinterfaceconfig_sync (
    netconfdInterface_config *proxy,
    const gchar *arg_config,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void netconfd_interface_config_call_getbackupparamcount (
    netconfdInterface_config *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_interface_config_call_getbackupparamcount_finish (
    netconfdInterface_config *proxy,
    gchar **out_interfaces,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_interface_config_call_getbackupparamcount_sync (
    netconfdInterface_config *proxy,
    gchar **out_interfaces,
    GCancellable *cancellable,
    GError **error);

void netconfd_interface_config_call_backup (
    netconfdInterface_config *proxy,
    const gchar *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_interface_config_call_backup_finish (
    netconfdInterface_config *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_interface_config_call_backup_sync (
    netconfdInterface_config *proxy,
    const gchar *arg_config,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void netconfd_interface_config_call_restore (
    netconfdInterface_config *proxy,
    const gchar *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_interface_config_call_restore_finish (
    netconfdInterface_config *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_interface_config_call_restore_sync (
    netconfdInterface_config *proxy,
    const gchar *arg_config,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define NETCONFD_TYPE_INTERFACE_CONFIG_PROXY (netconfd_interface_config_proxy_get_type ())
#define NETCONFD_INTERFACE_CONFIG_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NETCONFD_TYPE_INTERFACE_CONFIG_PROXY, netconfdInterface_configProxy))
#define NETCONFD_INTERFACE_CONFIG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NETCONFD_TYPE_INTERFACE_CONFIG_PROXY, netconfdInterface_configProxyClass))
#define NETCONFD_INTERFACE_CONFIG_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NETCONFD_TYPE_INTERFACE_CONFIG_PROXY, netconfdInterface_configProxyClass))
#define NETCONFD_IS_INTERFACE_CONFIG_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NETCONFD_TYPE_INTERFACE_CONFIG_PROXY))
#define NETCONFD_IS_INTERFACE_CONFIG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NETCONFD_TYPE_INTERFACE_CONFIG_PROXY))

typedef struct _netconfdInterface_configProxy netconfdInterface_configProxy;
typedef struct _netconfdInterface_configProxyClass netconfdInterface_configProxyClass;
typedef struct _netconfdInterface_configProxyPrivate netconfdInterface_configProxyPrivate;

struct _netconfdInterface_configProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  netconfdInterface_configProxyPrivate *priv;
};

struct _netconfdInterface_configProxyClass
{
  GDBusProxyClass parent_class;
};

GType netconfd_interface_config_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (netconfdInterface_configProxy, g_object_unref)
#endif

void netconfd_interface_config_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
netconfdInterface_config *netconfd_interface_config_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
netconfdInterface_config *netconfd_interface_config_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void netconfd_interface_config_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
netconfdInterface_config *netconfd_interface_config_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
netconfdInterface_config *netconfd_interface_config_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NETCONFD_TYPE_INTERFACE_CONFIG_SKELETON (netconfd_interface_config_skeleton_get_type ())
#define NETCONFD_INTERFACE_CONFIG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NETCONFD_TYPE_INTERFACE_CONFIG_SKELETON, netconfdInterface_configSkeleton))
#define NETCONFD_INTERFACE_CONFIG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NETCONFD_TYPE_INTERFACE_CONFIG_SKELETON, netconfdInterface_configSkeletonClass))
#define NETCONFD_INTERFACE_CONFIG_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NETCONFD_TYPE_INTERFACE_CONFIG_SKELETON, netconfdInterface_configSkeletonClass))
#define NETCONFD_IS_INTERFACE_CONFIG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NETCONFD_TYPE_INTERFACE_CONFIG_SKELETON))
#define NETCONFD_IS_INTERFACE_CONFIG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NETCONFD_TYPE_INTERFACE_CONFIG_SKELETON))

typedef struct _netconfdInterface_configSkeleton netconfdInterface_configSkeleton;
typedef struct _netconfdInterface_configSkeletonClass netconfdInterface_configSkeletonClass;
typedef struct _netconfdInterface_configSkeletonPrivate netconfdInterface_configSkeletonPrivate;

struct _netconfdInterface_configSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  netconfdInterface_configSkeletonPrivate *priv;
};

struct _netconfdInterface_configSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType netconfd_interface_config_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (netconfdInterface_configSkeleton, g_object_unref)
#endif

netconfdInterface_config *netconfd_interface_config_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for de.wago.netconfd1.ip_config */

#define NETCONFD_TYPE_IP_CONFIG (netconfd_ip_config_get_type ())
#define NETCONFD_IP_CONFIG(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NETCONFD_TYPE_IP_CONFIG, netconfdIp_config))
#define NETCONFD_IS_IP_CONFIG(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NETCONFD_TYPE_IP_CONFIG))
#define NETCONFD_IP_CONFIG_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NETCONFD_TYPE_IP_CONFIG, netconfdIp_configIface))

struct _netconfdIp_config;
typedef struct _netconfdIp_config netconfdIp_config;
typedef struct _netconfdIp_configIface netconfdIp_configIface;

struct _netconfdIp_configIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get) (
    netconfdIp_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_config);

  gboolean (*handle_getall) (
    netconfdIp_config *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set) (
    netconfdIp_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_config);

  gboolean (*handle_setall) (
    netconfdIp_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_config);

};

GType netconfd_ip_config_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *netconfd_ip_config_interface_info (void);
guint netconfd_ip_config_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void netconfd_ip_config_complete_setall (
    netconfdIp_config *object,
    GDBusMethodInvocation *invocation,
    gint result);

void netconfd_ip_config_complete_set (
    netconfdIp_config *object,
    GDBusMethodInvocation *invocation,
    gint result);

void netconfd_ip_config_complete_get (
    netconfdIp_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *config);

void netconfd_ip_config_complete_getall (
    netconfdIp_config *object,
    GDBusMethodInvocation *invocation,
    const gchar *config);



/* D-Bus method calls: */
void netconfd_ip_config_call_setall (
    netconfdIp_config *proxy,
    const gchar *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_ip_config_call_setall_finish (
    netconfdIp_config *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_ip_config_call_setall_sync (
    netconfdIp_config *proxy,
    const gchar *arg_config,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void netconfd_ip_config_call_set (
    netconfdIp_config *proxy,
    const gchar *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_ip_config_call_set_finish (
    netconfdIp_config *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_ip_config_call_set_sync (
    netconfdIp_config *proxy,
    const gchar *arg_config,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void netconfd_ip_config_call_get (
    netconfdIp_config *proxy,
    const gchar *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_ip_config_call_get_finish (
    netconfdIp_config *proxy,
    gchar **out_config,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_ip_config_call_get_sync (
    netconfdIp_config *proxy,
    const gchar *arg_config,
    gchar **out_config,
    GCancellable *cancellable,
    GError **error);

void netconfd_ip_config_call_getall (
    netconfdIp_config *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean netconfd_ip_config_call_getall_finish (
    netconfdIp_config *proxy,
    gchar **out_config,
    GAsyncResult *res,
    GError **error);

gboolean netconfd_ip_config_call_getall_sync (
    netconfdIp_config *proxy,
    gchar **out_config,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define NETCONFD_TYPE_IP_CONFIG_PROXY (netconfd_ip_config_proxy_get_type ())
#define NETCONFD_IP_CONFIG_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NETCONFD_TYPE_IP_CONFIG_PROXY, netconfdIp_configProxy))
#define NETCONFD_IP_CONFIG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NETCONFD_TYPE_IP_CONFIG_PROXY, netconfdIp_configProxyClass))
#define NETCONFD_IP_CONFIG_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NETCONFD_TYPE_IP_CONFIG_PROXY, netconfdIp_configProxyClass))
#define NETCONFD_IS_IP_CONFIG_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NETCONFD_TYPE_IP_CONFIG_PROXY))
#define NETCONFD_IS_IP_CONFIG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NETCONFD_TYPE_IP_CONFIG_PROXY))

typedef struct _netconfdIp_configProxy netconfdIp_configProxy;
typedef struct _netconfdIp_configProxyClass netconfdIp_configProxyClass;
typedef struct _netconfdIp_configProxyPrivate netconfdIp_configProxyPrivate;

struct _netconfdIp_configProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  netconfdIp_configProxyPrivate *priv;
};

struct _netconfdIp_configProxyClass
{
  GDBusProxyClass parent_class;
};

GType netconfd_ip_config_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (netconfdIp_configProxy, g_object_unref)
#endif

void netconfd_ip_config_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
netconfdIp_config *netconfd_ip_config_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
netconfdIp_config *netconfd_ip_config_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void netconfd_ip_config_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
netconfdIp_config *netconfd_ip_config_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
netconfdIp_config *netconfd_ip_config_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NETCONFD_TYPE_IP_CONFIG_SKELETON (netconfd_ip_config_skeleton_get_type ())
#define NETCONFD_IP_CONFIG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NETCONFD_TYPE_IP_CONFIG_SKELETON, netconfdIp_configSkeleton))
#define NETCONFD_IP_CONFIG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NETCONFD_TYPE_IP_CONFIG_SKELETON, netconfdIp_configSkeletonClass))
#define NETCONFD_IP_CONFIG_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NETCONFD_TYPE_IP_CONFIG_SKELETON, netconfdIp_configSkeletonClass))
#define NETCONFD_IS_IP_CONFIG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NETCONFD_TYPE_IP_CONFIG_SKELETON))
#define NETCONFD_IS_IP_CONFIG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NETCONFD_TYPE_IP_CONFIG_SKELETON))

typedef struct _netconfdIp_configSkeleton netconfdIp_configSkeleton;
typedef struct _netconfdIp_configSkeletonClass netconfdIp_configSkeletonClass;
typedef struct _netconfdIp_configSkeletonPrivate netconfdIp_configSkeletonPrivate;

struct _netconfdIp_configSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  netconfdIp_configSkeletonPrivate *priv;
};

struct _netconfdIp_configSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType netconfd_ip_config_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (netconfdIp_configSkeleton, g_object_unref)
#endif

netconfdIp_config *netconfd_ip_config_skeleton_new (void);


/* ---- */

#define NETCONFD_TYPE_OBJECT (netconfd_object_get_type ())
#define NETCONFD_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NETCONFD_TYPE_OBJECT, netconfdObject))
#define NETCONFD_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NETCONFD_TYPE_OBJECT))
#define NETCONFD_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NETCONFD_TYPE_OBJECT, netconfdObject))

struct _netconfdObject;
typedef struct _netconfdObject netconfdObject;
typedef struct _netconfdObjectIface netconfdObjectIface;

struct _netconfdObjectIface
{
  GTypeInterface parent_iface;
};

GType netconfd_object_get_type (void) G_GNUC_CONST;

netconfdInterface_config *netconfd_object_get_interface_config (netconfdObject *object);
netconfdIp_config *netconfd_object_get_ip_config (netconfdObject *object);
netconfdInterface_config *netconfd_object_peek_interface_config (netconfdObject *object);
netconfdIp_config *netconfd_object_peek_ip_config (netconfdObject *object);

#define NETCONFD_TYPE_OBJECT_PROXY (netconfd_object_proxy_get_type ())
#define NETCONFD_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NETCONFD_TYPE_OBJECT_PROXY, netconfdObjectProxy))
#define NETCONFD_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NETCONFD_TYPE_OBJECT_PROXY, netconfdObjectProxyClass))
#define NETCONFD_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NETCONFD_TYPE_OBJECT_PROXY, netconfdObjectProxyClass))
#define NETCONFD_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NETCONFD_TYPE_OBJECT_PROXY))
#define NETCONFD_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NETCONFD_TYPE_OBJECT_PROXY))

typedef struct _netconfdObjectProxy netconfdObjectProxy;
typedef struct _netconfdObjectProxyClass netconfdObjectProxyClass;
typedef struct _netconfdObjectProxyPrivate netconfdObjectProxyPrivate;

struct _netconfdObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  netconfdObjectProxyPrivate *priv;
};

struct _netconfdObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType netconfd_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (netconfdObjectProxy, g_object_unref)
#endif

netconfdObjectProxy *netconfd_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define NETCONFD_TYPE_OBJECT_SKELETON (netconfd_object_skeleton_get_type ())
#define NETCONFD_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NETCONFD_TYPE_OBJECT_SKELETON, netconfdObjectSkeleton))
#define NETCONFD_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NETCONFD_TYPE_OBJECT_SKELETON, netconfdObjectSkeletonClass))
#define NETCONFD_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NETCONFD_TYPE_OBJECT_SKELETON, netconfdObjectSkeletonClass))
#define NETCONFD_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NETCONFD_TYPE_OBJECT_SKELETON))
#define NETCONFD_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NETCONFD_TYPE_OBJECT_SKELETON))

typedef struct _netconfdObjectSkeleton netconfdObjectSkeleton;
typedef struct _netconfdObjectSkeletonClass netconfdObjectSkeletonClass;
typedef struct _netconfdObjectSkeletonPrivate netconfdObjectSkeletonPrivate;

struct _netconfdObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  netconfdObjectSkeletonPrivate *priv;
};

struct _netconfdObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType netconfd_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (netconfdObjectSkeleton, g_object_unref)
#endif

netconfdObjectSkeleton *netconfd_object_skeleton_new (const gchar *object_path);
void netconfd_object_skeleton_set_interface_config (netconfdObjectSkeleton *object, netconfdInterface_config *interface_);
void netconfd_object_skeleton_set_ip_config (netconfdObjectSkeleton *object, netconfdIp_config *interface_);

/* ---- */

#define NETCONFD_TYPE_OBJECT_MANAGER_CLIENT (netconfd_object_manager_client_get_type ())
#define NETCONFD_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NETCONFD_TYPE_OBJECT_MANAGER_CLIENT, netconfdObjectManagerClient))
#define NETCONFD_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NETCONFD_TYPE_OBJECT_MANAGER_CLIENT, netconfdObjectManagerClientClass))
#define NETCONFD_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NETCONFD_TYPE_OBJECT_MANAGER_CLIENT, netconfdObjectManagerClientClass))
#define NETCONFD_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NETCONFD_TYPE_OBJECT_MANAGER_CLIENT))
#define NETCONFD_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NETCONFD_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _netconfdObjectManagerClient netconfdObjectManagerClient;
typedef struct _netconfdObjectManagerClientClass netconfdObjectManagerClientClass;
typedef struct _netconfdObjectManagerClientPrivate netconfdObjectManagerClientPrivate;

struct _netconfdObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  netconfdObjectManagerClientPrivate *priv;
};

struct _netconfdObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (netconfdObjectManagerClient, g_object_unref)
#endif

GType netconfd_object_manager_client_get_type (void) G_GNUC_CONST;

GType netconfd_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void netconfd_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *netconfd_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *netconfd_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void netconfd_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *netconfd_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *netconfd_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __NETCONFD_DBUS_H__ */
