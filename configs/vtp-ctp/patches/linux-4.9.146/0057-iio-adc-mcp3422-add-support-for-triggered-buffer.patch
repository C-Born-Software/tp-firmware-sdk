From 1645fd88a7cc79a8a3a071701e28f872793b4a99 Mon Sep 17 00:00:00 2001
From: Boerje Sewing <boerje.sewing@who-ing.de>
Date: Mon, 18 Apr 2016 15:26:16 +0200
Subject: [PATCH] iio: adc: mcp3422: add support for triggered buffer.

Signed-off-by: Boerje Sewing <boerje.sewing@who-ing.de>
---
 drivers/iio/adc/Kconfig   |   2 +
 drivers/iio/adc/mcp3422.c | 100 ++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 98 insertions(+), 4 deletions(-)

diff --git a/drivers/iio/adc/Kconfig b/drivers/iio/adc/Kconfig
index 99c0514..afe3c53 100644
--- a/drivers/iio/adc/Kconfig
+++ b/drivers/iio/adc/Kconfig
@@ -318,6 +318,8 @@ config MCP320X
 config MCP3422
 	tristate "Microchip Technology MCP3421/2/3/4/5/6/7/8 driver"
 	depends on I2C
+	select IIO_BUFFER
+	select IIO_TRIGGERED_BUFFER
 	help
 	  Say yes here to build support for Microchip Technology's MCP3421
 	  MCP3422, MCP3423, MCP3424, MCP3425, MCP3426, MCP3427 or MCP3428
diff --git a/drivers/iio/adc/mcp3422.c b/drivers/iio/adc/mcp3422.c
index 254135e..a5148f5 100644
--- a/drivers/iio/adc/mcp3422.c
+++ b/drivers/iio/adc/mcp3422.c
@@ -18,6 +18,7 @@
  */
 
 #include <linux/err.h>
+#include <linux/slab.h>
 #include <linux/i2c.h>
 #include <linux/module.h>
 #include <linux/delay.h>
@@ -26,6 +27,11 @@
 
 #include <linux/iio/iio.h>
 #include <linux/iio/sysfs.h>
+#include <linux/iio/events.h>
+#include <linux/iio/buffer.h>
+#include <linux/iio/trigger_consumer.h>
+#include <linux/iio/triggered_buffer.h>
+#include <linux/iio/kfifo_buf.h>
 
 /* Masks */
 #define MCP3422_CHANNEL_MASK	0x60
@@ -39,7 +45,8 @@
 #define MCP3422_PGA_2	1
 #define MCP3422_PGA_4	2
 #define MCP3422_PGA_8	3
-#define MCP3422_CONT_SAMPLING	0x10
+#define MCP3422_CONT_SAMPLING	  0x10
+#define MCP3422_ONESHOT_SAMPLING  0x00
 
 #define MCP3422_CHANNEL(config)	(((config) & MCP3422_CHANNEL_MASK) >> 5)
 #define MCP3422_PGA(config)	((config) & MCP3422_PGA_MASK)
@@ -49,16 +56,37 @@
 #define MCP3422_PGA_VALUE(value) ((value) & MCP3422_PGA_MASK)
 #define MCP3422_SAMPLE_RATE_VALUE(value) ((value << 2) & MCP3422_SRATE_MASK)
 
-#define MCP3422_CHAN(_index) \
+#define MCP3422_CHAN(_index, _realbits) \
 	{ \
 		.type = IIO_VOLTAGE, \
 		.indexed = 1, \
-		.channel = _index, \
+		.channel = (_index), \
 		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) \
 				| BIT(IIO_CHAN_INFO_SCALE), \
 		.info_mask_shared_by_type = BIT(IIO_CHAN_INFO_SAMP_FREQ), \
+                .scan_index = (_index), \
+                .scan_type = { /* Description of storage in buffer */ \
+			.sign = 'u', /* unsigned */ \
+			.realbits = (_realbits), /* 12, 14, 16 or 18 bits */ \
+			.storagebits = 32, /* 32 bits used for storage */ \
+			.shift = 32 - (_realbits), /* zero, 2, 4 or 6 shift */ \
+                }, \
 	}
 
+static const struct iio_chan_spec mcp3422_channels[] = {
+	MCP3422_CHAN(0, 12),
+	MCP3422_CHAN(1, 12),
+        IIO_CHAN_SOFT_TIMESTAMP(2),
+};
+
+static const struct iio_chan_spec mcp3424_channels[] = {
+	MCP3422_CHAN(0, 12),
+	MCP3422_CHAN(1, 12),
+	MCP3422_CHAN(2, 12),
+	MCP3422_CHAN(3, 12),
+        IIO_CHAN_SOFT_TIMESTAMP(4),
+};
+
 static const int mcp3422_scales[4][4] = {
 	{ 1000000, 500000, 250000, 125000 },
 	{ 250000,  125000, 62500,  31250  },
@@ -92,6 +120,7 @@ struct mcp3422 {
 	u8 id;
 	u8 config;
 	u8 pga[4];
+        u8 *rx_buf;
 	struct mutex lock;
 };
 
@@ -322,6 +351,46 @@ static const struct iio_chan_spec mcp3424_channels[] = {
 	MCP3422_CHAN(3),
 };
 
+static irqreturn_t mcp3422_trigger_handler(int irq, void *p)
+{
+	struct iio_poll_func *pf = p;
+	struct iio_dev *indio_dev = pf->indio_dev;
+	struct mcp3422 *adc = iio_priv(indio_dev);
+        int ret = 0;
+        int *data;
+        u8 current_channel;
+        u8 config;
+
+        data = kmalloc(indio_dev->scan_bytes, GFP_KERNEL);
+	if (!data)
+		goto out;
+
+        /* Read converted values channel by channel.  */
+        for (current_channel = 0; current_channel < indio_dev->masklength; ++current_channel) {
+                if (test_bit(current_channel, indio_dev->active_scan_mask)) {
+                        config = adc->config;
+                        config &= ~MCP3422_CHANNEL_MASK;
+                        config |= MCP3422_CHANNEL_VALUE(current_channel);
+                        config &= ~MCP3422_PGA_MASK;
+                        config |= MCP3422_PGA_VALUE(adc->pga[current_channel]);
+                        ret = mcp3422_update_config(adc, config);
+                        if (ret < 0)
+                                continue;
+                        msleep(mcp3422_read_times[MCP3422_SAMPLE_RATE(adc->config)]);
+                        ret = mcp3422_read(adc, &data[current_channel], &config);
+                        if (ret < 0)
+                                dev_err(&indio_dev->dev, "Couldn't read from mcp342x channel %d", current_channel);
+                }
+	}
+
+	iio_push_to_buffers_with_timestamp(indio_dev, data, iio_get_time_ns());
+
+	kfree(data);
+out:
+	iio_trigger_notify_done(indio_dev->trig);
+	return IRQ_HANDLED;
+}
+
 static const struct iio_info mcp3422_info = {
 	.read_raw = mcp3422_read_raw,
 	.write_raw = mcp3422_write_raw,
@@ -338,6 +407,7 @@ static int mcp3422_probe(struct i2c_client *client,
 	int err;
 	u8 config;
 
+        /* check for basis i2c functionality */
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
 		return -EOPNOTSUPP;
 
@@ -351,6 +421,7 @@ static int mcp3422_probe(struct i2c_client *client,
 
 	mutex_init(&adc->lock);
 
+        /* Establish that the iio_dev is a child of the i2c device  */
 	indio_dev->dev.parent = &client->dev;
 	indio_dev->dev.of_node = client->dev.of_node;
 	indio_dev->name = dev_name(&client->dev);
@@ -384,12 +455,32 @@ static int mcp3422_probe(struct i2c_client *client,
 		| MCP3422_SAMPLE_RATE_VALUE(MCP3422_SRATE_240));
 	mcp3422_update_config(adc, config);
 
+        /* create buffer */
+        err = iio_triggered_buffer_setup(indio_dev, NULL,
+		&mcp3422_trigger_handler, NULL);
+	if (err < 0) {
+	        dev_err(&indio_dev->dev, "Failed to setup buffer\n");
+		return err;	
+        }
+
+        /* Register device to i2c sub system and kernel */
 	err = devm_iio_device_register(&client->dev, indio_dev);
 	if (err < 0)
-		return err;
+		goto error_cleanup_ring;
 
 	i2c_set_clientdata(client, indio_dev);
 
+        return 0;
+
+error_cleanup_ring:
+        iio_triggered_buffer_cleanup(indio_dev);
+	return err;
+}
+static int mcp3422_remove(struct i2c_client *client)
+{
+        struct iio_dev *indio_dev = i2c_get_clientdata(client);
+	iio_device_unregister(indio_dev);
+	iio_triggered_buffer_cleanup(indio_dev);
 	return 0;
 }
 
@@ -420,6 +511,7 @@ static struct i2c_driver mcp3422_driver = {
 		.of_match_table = of_match_ptr(mcp3422_of_match),
 	},
 	.probe = mcp3422_probe,
+	.remove = mcp3422_remove,
 	.id_table = mcp3422_id,
 };
 module_i2c_driver(mcp3422_driver);
-- 
2.7.4

