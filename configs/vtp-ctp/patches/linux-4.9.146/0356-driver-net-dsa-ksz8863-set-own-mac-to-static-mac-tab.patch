From fd9d23e975702bf5a94f658ada1c3c3bdd64d89c Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Thu, 11 Jul 2019 15:22:02 +0200
Subject: [PATCH] driver: net: dsa: ksz8863: set own mac to static mac table

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/dsa/ksz886x/ksz8863.c | 198 +++++++++++++++++++++++++++++++++++++-
 include/linux/ksz8863.h           | 108 +++++++++++++++++++++
 2 files changed, 303 insertions(+), 3 deletions(-)

diff --git a/drivers/net/dsa/ksz886x/ksz8863.c b/drivers/net/dsa/ksz886x/ksz8863.c
index 52dfa9e..bfdd98e 100644
--- a/drivers/net/dsa/ksz886x/ksz8863.c
+++ b/drivers/net/dsa/ksz886x/ksz8863.c
@@ -22,11 +22,13 @@
 
 #include <linux/module.h>
 #include <linux/of.h>
+#include <linux/of_net.h>
 #include <linux/mdio.h>
 #include <linux/phy.h>
 #include <linux/gpio/consumer.h>
 #include <net/dsa.h>
 #include <linux/delay.h>
+#include <linux/etherdevice.h>
 #include <linux/ksz8863.h>
 
 static inline int port_to_index(int port)
@@ -100,6 +102,34 @@ static inline int ksz8863_set_bit(struct ksz8863_chip *chip, int reg, u8 mask,
 	return err;
 }
 
+static int ksz8863_set_eth_addr(struct ksz8863_chip *chip)
+{
+	int err;
+	struct ksz8863_static_mac_tbl_entry entry;
+
+	if (!is_valid_ether_addr(chip->eth_addr))
+		return -EINVAL;
+
+	memset(&entry, 0, sizeof(entry));
+
+	entry.mac[0] = chip->eth_addr[5];
+	entry.mac[1] = chip->eth_addr[4];
+	entry.mac[2] = chip->eth_addr[3];
+	entry.mac[3] = chip->eth_addr[2];
+	entry.mac[4] = chip->eth_addr[1];
+	entry.mac[5] = chip->eth_addr[0];
+
+	entry.forward_ports = KSZ8863_SMAC_ENTRY_FWD_PORTS_PORT3;
+	entry.valid = 1;
+	entry.override = 1;
+	entry.use_fid = 0;
+	entry.fid = 0;
+
+	err = chip->mii_ops->write_table(chip, KSZ8863_TBL_STATIC_MAC, 0,
+					 (u8 *)&entry, sizeof(entry));
+	return err;
+}
+
 static int ksz8863_setup_global(struct ksz8863_chip *chip)
 {
 	int err;
@@ -197,7 +227,17 @@ static int ksz8863_setup_adv_ctrl(struct ksz8863_chip *chip)
 	val &= ~KSZ8863_REG_PWR_LED_LED_MODE_SEL_MASK;
 	val |= (KSZ8863_REG_PWR_LED_LED_MODE_1 <<
 		KSZ8863_REG_PWR_LED_LED_MODE_SEL_SHIFT);
+
 	err = chip->mii_ops->write(chip, KSZ8863_REG_PWR_LED, val);
+	if (err)
+		goto out_unlock;
+
+	ksz8863_reg_unlock(chip);
+
+	err = ksz8863_set_eth_addr(chip);
+
+	return err;
+
 out_unlock:
 	ksz8863_reg_unlock(chip);
 
@@ -242,6 +282,13 @@ static int ksz8863_phy_write(struct dsa_switch *ds, int port, int reg, u16 val)
 	return mdiobus_write_nested(chip->sw_bus, port, reg, val);
 }
 
+static int ks8863_flush_dyn_mac_tables(struct ksz8863_chip *chip)
+{
+	return ksz8863_set_bit(chip, KSZ8863_REG_GL_CTRL0,
+			      KSZ8863_REG_GL_CTRL0_FLUSH_DYN_MAC_TABLE, true,
+			      false);
+}
+
 static int ksz8863_flush_mac_tables(struct ksz8863_chip *chip)
 {
 	int err;
@@ -274,9 +321,7 @@ static int ksz8863_flush_mac_tables(struct ksz8863_chip *chip)
 	}
 
 	/* flush dynamic mac table */
-	err = ksz8863_set_bit(chip, KSZ8863_REG_GL_CTRL0,
-			      KSZ8863_REG_GL_CTRL0_FLUSH_DYN_MAC_TABLE, true,
-			      false);
+	err = ks8863_flush_dyn_mac_tables(chip);
 	if (err)
 		goto out_unlock;
 
@@ -435,6 +480,8 @@ static int ksz8863_set_bridged_mode(struct ksz8863_chip *chip)
 			goto out_unlock;
 	}
 
+	ret = ks8863_flush_dyn_mac_tables(chip);
+
 	/* set appropriate mode */
 	ret = set_mode(chip);
 
@@ -540,10 +587,126 @@ static int ksz8863_smi_write(struct ksz8863_chip *chip, int reg, u8 val)
 	return ret;
 }
 
+static int ksz8863_tbl_write(struct ksz8863_chip *chip,
+			     enum ksz8863_tables table,
+			     u16 addr, u8 *buffer, size_t size)
+{
+	int err, i;
+	u8 iac0v, iac1v;
+
+	/* check if address has only 9 bits width */
+	if (addr & ~(BIT(10) - 1))
+		return -EINVAL;
+
+	if (!size || size > KSZ8863_REG_INDIRECT_DATA_MAX_SIZE)
+		return -EINVAL;
+
+	ksz8863_reg_lock(chip);
+
+	for (i = 0; i < size; i++) {
+		int reg = KSZ8863_REG_INDIRECT_DATA_REG0 - i;
+		u8 mask = (i != KSZ8863_REG_INDIRECT_DATA_REG8) ? 0xFF :
+			KSZ8863_REG_INDIRECT_DATA_REG8_DATA_MASK;
+
+		err = ksz8863_smi_write(chip, reg, buffer[i] & mask);
+		if (err)
+			goto out_unlock;
+	}
+
+	iac0v = KSZ8863_REG_INDIRECT_ACCESS_CTRL0_WRITE;
+	iac0v |= table << KSZ8863_REG_INDIRECT_ACCESS_CTRL0_TBL_SHIFT;
+	iac0v |= (addr >> 8) & KSZ8863_REG_INDIRECT_ACCESS_CTRL0_ADDR_MASK;
+	iac1v = addr & 0xFF;
+
+	err = ksz8863_smi_write(chip, KSZ8863_REG_INDIRECT_ACCESS_CTRL0, iac0v);
+	if (err)
+		goto out_unlock;
+
+	err = ksz8863_smi_write(chip, KSZ8863_REG_INDIRECT_ACCESS_CTRL1, iac1v);
+
+out_unlock:
+	ksz8863_reg_unlock(chip);
+
+	return err;
+}
+
+static int ksz8863_tbl_wait_read_ready(struct ksz8863_chip *chip)
+{
+	int err;
+	unsigned long time = jiffies + HZ;
+	u8 val;
+
+	do {
+		err = ksz8863_smi_read(chip, KSZ8863_REG_INDIRECT_DATA_REG8,
+				       &val);
+		if (err)
+			return err;
+
+		if (!(val & KSZ8863_REG_INDIRECT_DATA_REG8_CPU_READ_WIP))
+			return 0;
+
+		usleep_range(10000, 20000);
+	} while (time_after(time, jiffies));
+
+	return -ETIMEDOUT;
+}
+
+static int ksz8863_tbl_read(struct ksz8863_chip *chip,
+			    enum ksz8863_tables table,
+			    u16 addr, u8 *buffer, size_t size)
+{
+	int err, i;
+	u8 iac0v, iac1v;
+
+	/* check if address has only 9 bits width */
+	if (addr & ~(BIT(10) - 1))
+		return -EINVAL;
+
+	if (!size || size > KSZ8863_REG_INDIRECT_DATA_MAX_SIZE)
+		return -EINVAL;
+
+	ksz8863_reg_lock(chip);
+
+	iac0v = KSZ8863_REG_INDIRECT_ACCESS_CTRL0_READ;
+	iac0v |= table << KSZ8863_REG_INDIRECT_ACCESS_CTRL0_TBL_SHIFT;
+	iac0v |= (addr >> 8) & KSZ8863_REG_INDIRECT_ACCESS_CTRL0_ADDR_MASK;
+	iac1v = addr & 0xFF;
+
+	err = ksz8863_smi_write(chip, KSZ8863_REG_INDIRECT_ACCESS_CTRL0, iac0v);
+	if (err)
+		goto out_unlock;
+
+	err = ksz8863_smi_write(chip, KSZ8863_REG_INDIRECT_ACCESS_CTRL1, iac1v);
+	if (err)
+		goto out_unlock;
+
+	err = ksz8863_tbl_wait_read_ready(chip);
+	if (err)
+		goto out_unlock;
+
+	for (i = 0; i < size; i++) {
+		int reg = KSZ8863_REG_INDIRECT_DATA_REG0 - i;
+
+		err = ksz8863_smi_read(chip, reg, &buffer[i]);
+		if (err)
+			goto out_unlock;
+
+		if (reg == KSZ8863_REG_INDIRECT_DATA_REG8)
+			buffer[i] &= KSZ8863_REG_INDIRECT_DATA_REG8_DATA_MASK;
+	}
+
+out_unlock:
+	ksz8863_reg_unlock(chip);
+
+	return err;
+}
+
 static int of_get_ksz8863_data(struct ksz8863_chip *chip)
 {
 	struct device *dev = chip->dev;
 	struct device_node *np = dev->of_node;
+	struct device_node *of_aliases, *of_ethernet;
+	const char *eth0_prop_name, *mac_addr;
 
 	if (!np)
 		return 0;
@@ -562,6 +725,33 @@ static int of_get_ksz8863_data(struct ksz8863_chip *chip)
 		chip->reset = true;
 	}
 
+	/* get device mac address from device-tree */
+	of_aliases = of_find_node_by_path("/aliases");
+	if (!of_aliases) {
+		dev_err(dev, "No aliases property found");
+		return -EINVAL;
+	}
+
+	if (of_property_read_string(of_aliases, "ethernet0", &eth0_prop_name)) {
+		dev_err(dev, "No ethernet0 alias found");
+		return -EINVAL;
+	}
+
+	of_ethernet = of_find_node_by_path(eth0_prop_name);
+	if (!of_ethernet) {
+		dev_err(dev, "No ethernet0 = \"%s\" property found",
+			eth0_prop_name);
+		return -EINVAL;
+	}
+
+	mac_addr = of_get_mac_address(of_ethernet);
+	if (!mac_addr) {
+		dev_err(dev, "No valid ethernet address found");
+		return -EINVAL;
+	}
+
+	memcpy(chip->eth_addr, mac_addr, sizeof(chip->eth_addr));
+
 	return 0;
 }
 
@@ -593,6 +783,8 @@ static void ksz8863_free_chip(struct ksz8863_chip *chip)
 static const struct ksz8863_bus_ops ksz8863_smi_ops = {
 	.read = ksz8863_smi_read,
 	.write = ksz8863_smi_write,
+	.read_table = ksz8863_tbl_read,
+	.write_table = ksz8863_tbl_write,
 };
 
 static void ksz8863_smi_init(struct ksz8863_chip *chip, struct mii_bus *bus,
diff --git a/include/linux/ksz8863.h b/include/linux/ksz8863.h
index b22b702..27c857a 100644
--- a/include/linux/ksz8863.h
+++ b/include/linux/ksz8863.h
@@ -20,6 +20,8 @@
 
 #define KSZ8863_NUM_PORTS 3
 
+#define KSZ8863_EXT_PORTS 2
+
 #define KSZ8863_EXT_PORT1_ID 1
 #define KSZ8863_EXT_PORT2_ID 2
 
@@ -41,6 +43,7 @@
 #define KSZ8863_REG_GL_CTRL0_FLUSH_DYN_MAC_TABLE	BIT(5)
 #define KSZ8863_REG_GL_CTRL0_FLUSH_STA_MAC_TABLE	BIT(4)
 #define KSZ8863_REG_GL_CTRL0_PASS_PAUSE			BIT(3)
+#define KSZ8863_REG_GL_CTRL0_LINK_AUTO_AGING		BIT(0)
 
 #define KSZ8863_REG_GL_CTRL1			0x03
 
@@ -124,6 +127,18 @@
 #define KSZ8863_REG_PORT_CTRL0_REMOVE_TAG		BIT(1)
 #define KSZ8863_REG_PORT_CTRL0_4_PRIOS_ENABLE		BIT(0)
 
+#define KSZ8863_REG_PORT1_CTRL1			0x11
+#define KSZ8863_REG_PORT2_CTRL1			0x21
+#define KSZ8863_REG_PORT3_CTRL1			0x31
+
+#define KSZ8863_REG_PORT_CTRL1_MIRROR_SNIFFER		BIT(7)
+#define KSZ8863_REG_PORT_CTRL1_MIRROR_RX		BIT(6)
+#define KSZ8863_REG_PORT_CTRL1_MIRROR_TX		BIT(5)
+#define KSZ8863_REG_PORT_CTRL1_MIRROR_MASK		0xE0
+#define KSZ8863_REG_PORT_CTRL1_DOUBLE_TAG		BIT(4)
+#define KSZ8863_REG_PORT_CTRL1_802_1P_REMAPPING		BIT(3)
+#define KSZ8863_REG_PORT_CTRL1_VLAN_MEMBERSHIP		0x07
+
 #define KSZ8863_REG_PORT1_CTRL2			0x12
 #define KSZ8863_REG_PORT2_CTRL2			0x22
 #define KSZ8863_REG_PORT3_CTRL2			0x32
@@ -165,6 +180,51 @@
 #define KSZ8863_REG_PORT_CTRL13_FORCE_MDIX		BIT(1)
 #define KSZ8863_REG_PORT_CTRL13_LOOPBACK		BIT(0)
 
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL0	0x79
+
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL0_READ		BIT(4)
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL0_WRITE		0
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL0_TBL_SHIFT	2
+/* table select see ksz8863_table enum */
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL0_ADDR_MASK	0x3
+
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL1	0x7A
+
+#define KSZ8863_REG_INDIRECT_DATA_REG8		0x7B
+
+#define KSZ8863_REG_INDIRECT_DATA_REG8_CPU_READ_WIP	BIT(7)
+#define KSZ8863_REG_INDIRECT_DATA_REG8_DATA_MASK	0x7
+
+#define KSZ8863_REG_INDIRECT_DATA_REG7		0x7C
+#define KSZ8863_REG_INDIRECT_DATA_REG6		0x7D
+#define KSZ8863_REG_INDIRECT_DATA_REG5		0x7E
+#define KSZ8863_REG_INDIRECT_DATA_REG4		0x7F
+#define KSZ8863_REG_INDIRECT_DATA_REG3		0x80
+#define KSZ8863_REG_INDIRECT_DATA_REG2		0x81
+#define KSZ8863_REG_INDIRECT_DATA_REG1		0x82
+#define KSZ8863_REG_INDIRECT_DATA_REG0		0x83
+
+#define KSZ8863_REG_INDIRECT_DATA_MAX_SIZE	9
+
+#define KSZ8863_REG_PORT1_EGRESS_RL_Q0		0x9A
+#define KSZ8863_REG_PORT2_EGRESS_RL_Q0		0x9E
+#define KSZ8863_REG_PORT3_EGRESS_RL_Q0		0xA2
+
+#define KSZ8863_REG_PORT1_EGRESS_RL_Q1		0x9B
+#define KSZ8863_REG_PORT2_EGRESS_RL_Q1		0x9F
+#define KSZ8863_REG_PORT3_EGRESS_RL_Q1		0xA3
+
+#define KSZ8863_REG_PORT1_EGRESS_RL_Q2		0x9C
+#define KSZ8863_REG_PORT2_EGRESS_RL_Q2		0xA0
+#define KSZ8863_REG_PORT3_EGRESS_RL_Q2		0xA4
+
+#define KSZ8863_REG_PORT1_EGRESS_RL_Q3		0x9D
+#define KSZ8863_REG_PORT2_EGRESS_RL_Q3		0xA1
+#define KSZ8863_REG_PORT3_EGRESS_RL_Q3		0xA5
+
+#define KSZ8863_REG_PORT_EGRESS_RL_Q0_ENABLE		BIT(7)
+#define KSZ8863_REG_PORT_EGRESS_RL_MASK			0x7F
+
 #define KSZ8863_REG_INTERNAL_1V8_LDO_CTRL	0xC1
 #define KSZ8863_REG_INTERNAL_1V8_LDO_CTRL_DISABLE	BIT(6)
 
@@ -218,11 +278,59 @@ struct ksz8863_chip {
 
 	/* switched / separated mode */
 	bool switched;
+
+	/* device mac address */
+	u8 eth_addr[6];
 };
 
+enum ksz8863_tables {
+	KSZ8863_TBL_STATIC_MAC,
+	KSZ8863_TBL_VLAN,
+	KSZ8863_TBL_DYN_MAC,
+	KSZ8863_TBL_MIB_CNT,
+};
+
+/* this struct is designed for easy coping to
+ * ksz8863 inderect data register. Do not alter
+ * the fields order!
+ */
+struct ksz8863_static_mac_tbl_entry {
+	u8 mac[6];
+	u16 forward_ports:3;
+	u16 valid:1;
+	u16 override:1;
+	u16 use_fid:1;
+	u16 fid:4;
+	u16:6;
+} __packed;
+
+/* this struct is designed for easy coping to
+ * ksz8863 inderect data register. Do not alter
+ * the fields order!
+ */
+struct ksz8863_dyn_mac_tbl_entry {
+	u8 mac[6];
+	u8 fid : 4;
+	u8 port : 2;
+	u8 time : 2;
+	u16 valid_nb : 10;
+	u16 empty : 1;
+	u16:4;
+	u16 nrdy : 1;
+} __packed;
+
+#define KSZ8863_SMAC_ENTRY_FWD_PORTS_PORT1	0x1
+#define KSZ8863_SMAC_ENTRY_FWD_PORTS_PORT2	0x2
+#define KSZ8863_SMAC_ENTRY_FWD_PORTS_PORT3	0x4
+#define KSZ8863_SMAC_MAX_ENTRIES		8
+
 struct ksz8863_bus_ops {
 	int (*read)(struct ksz8863_chip *chip, int reg, u8 *val);
 	int (*write)(struct ksz8863_chip *chip, int reg, u8 val);
+	int (*read_table)(struct ksz8863_chip *chip, enum ksz8863_tables table,
+			  u16 address, u8 *buffer, size_t size);
+	int (*write_table)(struct ksz8863_chip *chip, enum ksz8863_tables table,
+			   u16 address, u8 *buffer, size_t size);
 };
 
 #endif /* __KSZ8863_H__ */
-- 
2.7.4

