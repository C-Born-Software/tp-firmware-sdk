From 3b4dfcf45bacbea804de0276b07f311453f852d1 Mon Sep 17 00:00:00 2001
From: Ralf Gliese <gliese@elrest.de>
Date: Thu, 17 Jan 2019 13:43:04 +0100
Subject: [PATCH] serial: imx: add rs485 specific oftree probing

Add generic rs485 oftree properties:

rs485-rts-active-high
rs485-rx-during-tx
linux,rs485-enabled-at-boot-time

Signed-off-by: Heinrich Toews <heinrich.toews@wago.com>
---
 drivers/tty/serial/imx.c | 43 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 43 insertions(+)

diff --git a/drivers/tty/serial/imx.c b/drivers/tty/serial/imx.c
index fa395a7..c79f06c 100644
--- a/drivers/tty/serial/imx.c
+++ b/drivers/tty/serial/imx.c
@@ -2046,12 +2046,37 @@ static int serial_imx_probe_dt(struct imx_port *sport,
 
 	return 0;
 }
+
+static int of_probe_rs485(struct imx_port *sport,
+		struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+
+	if (of_property_read_bool(np, "rs485-rts-active-high"))
+		sport->port.rs485.flags |= SER_RS485_RTS_ON_SEND;
+	else
+		sport->port.rs485.flags |= SER_RS485_RTS_AFTER_SEND;
+
+	if (of_property_read_bool(np, "rs485-rx-during-tx"))
+		sport->port.rs485.flags |= SER_RS485_RX_DURING_TX;
+
+	if (of_property_read_bool(np, "linux,rs485-enabled-at-boot-time"))
+		sport->port.rs485.flags |= SER_RS485_ENABLED;
+
+	return 0;
+}
 #else
 static inline int serial_imx_probe_dt(struct imx_port *sport,
 		struct platform_device *pdev)
 {
 	return 1;
 }
+
+static int of_probe_rs485(struct imx_port *sport,
+		struct platform_device *pdev)
+{
+	return 1;
+}
 #endif
 
 static void serial_imx_probe_pdata(struct imx_port *sport,
@@ -2118,6 +2143,24 @@ static int serial_imx_probe(struct platform_device *pdev)
 	sport->timer.function = imx_timeout;
 	sport->timer.data     = (unsigned long)sport;
 
+	ret = of_probe_rs485(sport, pdev);
+	if (ret > 0)
+		dev_err(&pdev->dev, "of_probe_rs485 failed\n");
+#ifdef DEBUG
+	else
+		dev_dbg(&pdev->dev, "of_probe_rs485 success\n");
+
+	dev_dbg(&pdev->dev, "-> serial_imx_probe\n");
+	if (sport->port.rs485.flags & SER_RS485_RTS_ON_SEND)
+		dev_dbg(&pdev->dev, "-> serial_imx_port SER_RS485_RTS_ON_SEND\n");
+	if (sport->port.rs485.flags & SER_RS485_RTS_AFTER_SEND)
+		dev_dbg(&pdev->dev, "-> serial_imx_port SER_RS485_RTS_AFTER_SEND\n");
+	if (sport->port.rs485.flags & SER_RS485_ENABLED)
+		dev_dbg(&pdev->dev, "-> serial_imx_port SER_RS485_ENABLED\n");
+	if (sport->port.rs485.flags & SER_RS485_RX_DURING_TX)
+		dev_dbg(&pdev->dev, "-> serial_imx_port SER_RS485_RX_DURING_TX\n");
+#endif
+
 	sport->gpios = mctrl_gpio_init(&sport->port, 0);
 	if (IS_ERR(sport->gpios))
 		return PTR_ERR(sport->gpios);
-- 
2.7.4

