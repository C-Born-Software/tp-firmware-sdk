From 539aa3e55b9876ae2e67aca383450817e4f5e3d5 Mon Sep 17 00:00:00 2001
From: Boerje Sewing <Boerje.Sewing@who-ing.de>
Date: Mon, 12 Jun 2017 16:56:31 +0200
Subject: [PATCH] src: external adc: correct indentation.

---
 drivers/iio/adc/mcp3422.c | 148 +++++++++++++++++++++++-----------------------
 1 file changed, 74 insertions(+), 74 deletions(-)

diff --git a/drivers/iio/adc/mcp3422.c b/drivers/iio/adc/mcp3422.c
index 8682610..1756a99 100644
--- a/drivers/iio/adc/mcp3422.c
+++ b/drivers/iio/adc/mcp3422.c
@@ -57,30 +57,30 @@
 #define MCP3422_SAMPLE_RATE_VALUE(value) ((value << 2) & MCP3422_SRATE_MASK)
 
 #define MCP3422_CHAN(_index, _realbits) \
-	{ \
-		.type = IIO_VOLTAGE, \
-		.indexed = 1, \
-		.channel = (_index), \
-		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) \
-				| BIT(IIO_CHAN_INFO_SCALE), \
-		.info_mask_shared_by_type = BIT(IIO_CHAN_INFO_SAMP_FREQ), \
-                .scan_index = (_index), \
-                .scan_type = { /* Description of storage in buffer */ \
-			.sign = 'u', /* unsigned */ \
-			.realbits = (_realbits), /* 12, 14, 16 or 18 bits */ \
-			.storagebits = 32, /* 32 bits used for storage */ \
-			.shift = 32 - (_realbits), /* zero, 2, 4 or 6 shift */ \
-                }, \
-	}
+{ \
+	.type = IIO_VOLTAGE, \
+	.indexed = 1, \
+	.channel = (_index), \
+	.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) \
+	| BIT(IIO_CHAN_INFO_SCALE), \
+	.info_mask_shared_by_type = BIT(IIO_CHAN_INFO_SAMP_FREQ), \
+	.scan_index = (_index), \
+	.scan_type = { /* Description of storage in buffer */ \
+		.sign = 'u', /* unsigned */ \
+		.realbits = (_realbits), /* 12, 14, 16 or 18 bits */ \
+		.storagebits = 32, /* 32 bits used for storage */ \
+		.shift = 32 - (_realbits), /* zero, 2, 4 or 6 shift */ \
+	}, \
+}
 
 static const struct iio_chan_spec mcp3421_channels[] = {
 	MCP3422_CHAN(0, 18),
-        IIO_CHAN_SOFT_TIMESTAMP(1),
+	IIO_CHAN_SOFT_TIMESTAMP(1),
 };
 static const struct iio_chan_spec mcp3422_channels[] = {
 	MCP3422_CHAN(0, 18),
 	MCP3422_CHAN(1, 18),
-        IIO_CHAN_SOFT_TIMESTAMP(2),
+	IIO_CHAN_SOFT_TIMESTAMP(2),
 };
 
 static const struct iio_chan_spec mcp3424_channels[] = {
@@ -88,17 +88,17 @@ static const struct iio_chan_spec mcp3424_channels[] = {
 	MCP3422_CHAN(1, 18),
 	MCP3422_CHAN(2, 18),
 	MCP3422_CHAN(3, 18),
-        IIO_CHAN_SOFT_TIMESTAMP(4),
+	IIO_CHAN_SOFT_TIMESTAMP(4),
 };
 
 static const struct iio_chan_spec mcp3425_channels[] = {
 	MCP3422_CHAN(0, 16),
-        IIO_CHAN_SOFT_TIMESTAMP(1),
+	IIO_CHAN_SOFT_TIMESTAMP(1),
 };
 static const struct iio_chan_spec mcp3426_channels[] = {
 	MCP3422_CHAN(0, 16),
 	MCP3422_CHAN(1, 16),
-        IIO_CHAN_SOFT_TIMESTAMP(2),
+	IIO_CHAN_SOFT_TIMESTAMP(2),
 };
 
 static const struct iio_chan_spec mcp3428_channels[] = {
@@ -106,7 +106,7 @@ static const struct iio_chan_spec mcp3428_channels[] = {
 	MCP3422_CHAN(1, 16),
 	MCP3422_CHAN(2, 16),
 	MCP3422_CHAN(3, 16),
-        IIO_CHAN_SOFT_TIMESTAMP(4),
+	IIO_CHAN_SOFT_TIMESTAMP(4),
 };
 
 static const int mcp3422_scales[4][4] = {
@@ -142,7 +142,7 @@ struct mcp3422 {
 	u8 id;
 	u8 config;
 	u8 pga[4];
-        u8 *rx_buf;
+	u8 *rx_buf;
 	struct mutex lock;
 };
 
@@ -208,8 +208,8 @@ static int mcp3422_read_channel(struct mcp3422 *adc,
 }
 
 static int mcp3422_read_raw(struct iio_dev *iio,
-			struct iio_chan_spec const *channel, int *val1,
-			int *val2, long mask)
+			    struct iio_chan_spec const *channel, int *val1,
+			    int *val2, long mask)
 {
 	struct mcp3422 *adc = iio_priv(iio);
 	int err;
@@ -242,8 +242,8 @@ static int mcp3422_read_raw(struct iio_dev *iio,
 }
 
 static int mcp3422_write_raw(struct iio_dev *iio,
-			struct iio_chan_spec const *channel, int val1,
-			int val2, long mask)
+			     struct iio_chan_spec const *channel, int val1,
+			     int val2, long mask)
 {
 	struct mcp3422 *adc = iio_priv(iio);
 	u8 temp;
@@ -306,7 +306,7 @@ static int mcp3422_write_raw(struct iio_dev *iio,
 }
 
 static int mcp3422_write_raw_get_fmt(struct iio_dev *indio_dev,
-		struct iio_chan_spec const *chan, long mask)
+				     struct iio_chan_spec const *chan, long mask)
 {
 	switch (mask) {
 	case IIO_CHAN_INFO_SCALE:
@@ -319,7 +319,7 @@ static int mcp3422_write_raw_get_fmt(struct iio_dev *indio_dev,
 }
 
 static ssize_t mcp3422_show_samp_freqs(struct device *dev,
-		struct device_attribute *attr, char *buf)
+				       struct device_attribute *attr, char *buf)
 {
 	struct mcp3422 *adc = iio_priv(dev_to_iio_dev(dev));
 
@@ -330,22 +330,22 @@ static ssize_t mcp3422_show_samp_freqs(struct device *dev,
 }
 
 static ssize_t mcp3422_show_scales(struct device *dev,
-		struct device_attribute *attr, char *buf)
+				   struct device_attribute *attr, char *buf)
 {
 	struct mcp3422 *adc = iio_priv(dev_to_iio_dev(dev));
 	u8 sample_rate = MCP3422_SAMPLE_RATE(adc->config);
 
 	return sprintf(buf, "0.%09u 0.%09u 0.%09u 0.%09u\n",
-		mcp3422_scales[sample_rate][0],
-		mcp3422_scales[sample_rate][1],
-		mcp3422_scales[sample_rate][2],
-		mcp3422_scales[sample_rate][3]);
+		       mcp3422_scales[sample_rate][0],
+		       mcp3422_scales[sample_rate][1],
+		       mcp3422_scales[sample_rate][2],
+		       mcp3422_scales[sample_rate][3]);
 }
 
 static IIO_DEVICE_ATTR(sampling_frequency_available, S_IRUGO,
-		mcp3422_show_samp_freqs, NULL, 0);
+		       mcp3422_show_samp_freqs, NULL, 0);
 static IIO_DEVICE_ATTR(in_voltage_scale_available, S_IRUGO,
-		mcp3422_show_scales, NULL, 0);
+		       mcp3422_show_scales, NULL, 0);
 
 static struct attribute *mcp3422_attributes[] = {
 	&iio_dev_attr_sampling_frequency_available.dev_attr.attr,
@@ -362,31 +362,31 @@ static irqreturn_t mcp3422_trigger_handler(int irq, void *p)
 	struct iio_poll_func *pf = p;
 	struct iio_dev *indio_dev = pf->indio_dev;
 	struct mcp3422 *adc = iio_priv(indio_dev);
-        int ret = 0;
-        int *data;
-        u8 current_channel;
-        u8 config;
+	int ret = 0;
+	int *data;
+	u8 current_channel;
+	u8 config;
 
-        data = kmalloc(indio_dev->scan_bytes, GFP_KERNEL);
+	data = kmalloc(indio_dev->scan_bytes, GFP_KERNEL);
 	if (!data)
 		goto out;
 
-        /* Read converted values channel by channel.  */
-        for (current_channel = 0; current_channel < indio_dev->masklength; ++current_channel) {
-                if (test_bit(current_channel, indio_dev->active_scan_mask)) {
-                        config = adc->config;
-                        config &= ~MCP3422_CHANNEL_MASK;
-                        config |= MCP3422_CHANNEL_VALUE(current_channel);
-                        config &= ~MCP3422_PGA_MASK;
-                        config |= MCP3422_PGA_VALUE(adc->pga[current_channel]);
-                        ret = mcp3422_update_config(adc, config);
-                        if (ret < 0)
-                                continue;
-                        msleep(mcp3422_read_times[MCP3422_SAMPLE_RATE(adc->config)]);
-                        ret = mcp3422_read(adc, &data[current_channel], &config);
-                        if (ret < 0)
-                                dev_err(&indio_dev->dev, "Couldn't read from mcp342x channel %d", current_channel);
-                }
+	/* Read converted values channel by channel.  */
+	for (current_channel = 0; current_channel < indio_dev->masklength; ++current_channel) {
+		if (test_bit(current_channel, indio_dev->active_scan_mask)) {
+			config = adc->config;
+			config &= ~MCP3422_CHANNEL_MASK;
+			config |= MCP3422_CHANNEL_VALUE(current_channel);
+			config &= ~MCP3422_PGA_MASK;
+			config |= MCP3422_PGA_VALUE(adc->pga[current_channel]);
+			ret = mcp3422_update_config(adc, config);
+			if (ret < 0)
+				continue;
+			msleep(mcp3422_read_times[MCP3422_SAMPLE_RATE(adc->config)]);
+			ret = mcp3422_read(adc, &data[current_channel], &config);
+			if (ret < 0)
+				dev_err(&indio_dev->dev, "Couldn't read from mcp342x channel %d", current_channel);
+		}
 	}
 
 	iio_push_to_buffers_with_timestamp(indio_dev, data, iio_get_time_ns(indio_dev));
@@ -413,11 +413,11 @@ static int mcp3422_probe(struct i2c_client *client,
 	int err;
 	u8 config;
 
-        /* check for basic i2c functionality */
+	/* check for basic i2c functionality */
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
 		return -EOPNOTSUPP;
-        
-        /* allocate device ressources via device manager */
+
+	/* allocate device ressources via device manager */
 	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*adc));
 	if (!indio_dev)
 		return -ENOMEM;
@@ -428,7 +428,7 @@ static int mcp3422_probe(struct i2c_client *client,
 
 	mutex_init(&adc->lock);
 
-        /* Establish that the iio_dev is a child of the i2c device  */
+	/* Establish that the iio_dev is a child of the i2c device  */
 	indio_dev->dev.parent = &client->dev;
 	indio_dev->dev.of_node = client->dev.of_node;
 	indio_dev->name = dev_name(&client->dev);
@@ -436,7 +436,7 @@ static int mcp3422_probe(struct i2c_client *client,
 	indio_dev->info = &mcp3422_info;
 
 	switch (adc->id) {
-        case 1:
+	case 1:
 		indio_dev->channels = mcp3421_channels;
 		indio_dev->num_channels = ARRAY_SIZE(mcp3421_channels);
 		break;
@@ -445,7 +445,7 @@ static int mcp3422_probe(struct i2c_client *client,
 		indio_dev->channels = mcp3422_channels;
 		indio_dev->num_channels = ARRAY_SIZE(mcp3422_channels);
 		break;
-        case 4:
+	case 4:
 		indio_dev->channels = mcp3424_channels;
 		indio_dev->num_channels = ARRAY_SIZE(mcp3424_channels);
 		break;
@@ -466,35 +466,35 @@ static int mcp3422_probe(struct i2c_client *client,
 
 	/* meaningful default configuration */
 	config = (MCP3422_CONT_SAMPLING
-		| MCP3422_CHANNEL_VALUE(1)
-		| MCP3422_PGA_VALUE(MCP3422_PGA_1)
-		| MCP3422_SAMPLE_RATE_VALUE(MCP3422_SRATE_15));
+		  | MCP3422_CHANNEL_VALUE(1)
+		  | MCP3422_PGA_VALUE(MCP3422_PGA_1)
+		  | MCP3422_SAMPLE_RATE_VALUE(MCP3422_SRATE_15));
 	mcp3422_update_config(adc, config);
 
-        /* create buffer */
-        err = iio_triggered_buffer_setup(indio_dev, NULL,
-		&mcp3422_trigger_handler, NULL);
+	/* create buffer */
+	err = iio_triggered_buffer_setup(indio_dev, NULL,
+					 &mcp3422_trigger_handler, NULL);
 	if (err < 0) {
-	        dev_err(&indio_dev->dev, "Failed to setup buffer\n");
+		dev_err(&indio_dev->dev, "Failed to setup buffer\n");
 		return err;	
-        }
+	}
 
-        /* Register device to i2c sub system and kernel */
+	/* Register device to i2c sub system and kernel */
 	err = devm_iio_device_register(&client->dev, indio_dev);
 	if (err < 0)
 		goto error_cleanup_ring;
 
 	i2c_set_clientdata(client, indio_dev);
 
-        return 0;
+	return 0;
 
 error_cleanup_ring:
-        iio_triggered_buffer_cleanup(indio_dev);
+	iio_triggered_buffer_cleanup(indio_dev);
 	return err;
 }
 static int mcp3422_remove(struct i2c_client *client)
 {
-        struct iio_dev *indio_dev = i2c_get_clientdata(client);
+	struct iio_dev *indio_dev = i2c_get_clientdata(client);
 	iio_device_unregister(indio_dev);
 	iio_triggered_buffer_cleanup(indio_dev);
 	return 0;
-- 
2.7.4

