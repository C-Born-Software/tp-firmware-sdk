From ce1856934dcb1233e90347e77f4ef45d59057f63 Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Wed, 11 Jul 2018 09:47:26 +0200
Subject: [PATCH] swconfig: mv88e6321: improve behavior while initiate of
 external phys

Sometimes, the initiate of external PHYs, connected to MV88E6321 switch,
failed. This patch extend the timeout and add a extra powercycle for phy
if the timeout occurred.

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/phy/mv88e6321-cfg.c | 70 +++++++++++++++++++++++++++++++----------
 1 file changed, 53 insertions(+), 17 deletions(-)

diff --git a/drivers/net/phy/mv88e6321-cfg.c b/drivers/net/phy/mv88e6321-cfg.c
index 35bc56a..175d43b 100644
--- a/drivers/net/phy/mv88e6321-cfg.c
+++ b/drivers/net/phy/mv88e6321-cfg.c
@@ -175,7 +175,7 @@ static int mv88e6321_sw_wait_autoneg_is_done(struct switch_dev *dev,
 {
 	u16 reg_val;
 	int ret;
-	int attempts = 3;
+	int attempts = 10;
 
 	ret = global_chip->info->ops->phy_read(global_chip, ext_phy_addr, 0,
 					&reg_val);
@@ -200,33 +200,51 @@ static int mv88e6321_sw_wait_autoneg_is_done(struct switch_dev *dev,
 		}
 	}
 
-	if (reg_val & BIT(9))
+	if (reg_val & BIT(9)) {
+		pr_err("Aatonegotiation for phy %d timed out\n", ext_phy_addr);
 		ret = -ETIME;
+	}
 
 out:
 	return ret;
 }
 
-static int mv88e6321_sw_force_speed_external_phys(struct switch_dev *dev,
-						  int ext_phy_addr)
+static int mv88e6321_ext_phy_power_down(int ext_phy_addr, int val)
 {
 	u16 reg_val;
 	int ret;
 
-	mutex_lock(&global_chip->reg_lock);
-
-	/* 1.     PHY Register 0x00 bit[11] = 1 Power Down */
+	/* PHY Register 0x00 bit[11] = 1 Power Down 0 = Power Up */
 	ret = global_chip->info->ops->phy_read(global_chip, ext_phy_addr, 0,
 					&reg_val);
 	if (ret < 0)
 		goto out;
 
-	reg_val |= BIT(11);
+	if (val)
+		reg_val |= BIT(11);
+	else
+		reg_val &= ~BIT(11);
+
 	ret = global_chip->info->ops->phy_write(global_chip, ext_phy_addr, 0,
 					reg_val);
 	if (ret < 0)
 		goto out;
 
+out:
+	return ret;
+}
+
+static int mv88e6321_sw_force_speed_external_phys(struct switch_dev *dev,
+						  int ext_phy_addr)
+{
+	u16 reg_val;
+	int ret;
+
+	mutex_lock(&global_chip->reg_lock);
+	ret = mv88e6321_ext_phy_power_down(ext_phy_addr, 1);
+	if (ret)
+		goto out;
+
 	/* 2.     PHY Register 0x09 bit[9:8] = 00 Disable 1000BASE-T */
 	ret = global_chip->info->ops->phy_read(global_chip, ext_phy_addr, 0x09,
 					&reg_val);
@@ -281,25 +299,43 @@ static int mv88e6321_sw_force_speed_external_phys(struct switch_dev *dev,
 	if (ret < 0)
 		goto out;
 
-	/* 7.     PHY Register 0x00 bit[11] = 0 Power Down */
-	ret = global_chip->info->ops->phy_read(global_chip, ext_phy_addr, 0,
-					&reg_val);
-	if (ret < 0)
+	/* 7. Power up PHY */
+	ret = mv88e6321_ext_phy_power_down(ext_phy_addr, 0);
+	if (ret)
 		goto out;
 
-	reg_val &= ~BIT(11);
-	ret = global_chip->info->ops->phy_write(global_chip, ext_phy_addr, 0,
-					reg_val);
-
 	/* 8. Check is Auto Negotiation is done */
 	ret = mv88e6321_sw_wait_autoneg_is_done(dev, ext_phy_addr);
+	if (ret) {
+		pr_err("Try to initiate autonegotiation after powercycle for phy %d\n",
+		       ext_phy_addr);
+
+		ret = mv88e6321_ext_phy_power_down(ext_phy_addr, 1);
+		if (ret)
+			goto out;
+
+		msleep(100);
+
+		/* Restart Auto Negotiation */
+		ret = global_chip->info->ops->phy_read(global_chip,
+						       ext_phy_addr, 0,
+						       &reg_val);
+		if (ret < 0)
+			goto out;
+
+		ret = mv88e6321_ext_phy_power_down(ext_phy_addr, 0);
+		if (ret)
+			goto out;
+
+		ret = mv88e6321_sw_wait_autoneg_is_done(dev, ext_phy_addr);
+	}
+
 out:
 	mutex_unlock(&global_chip->reg_lock);
 
 	return ret;
 }
 
-
 static int mv88e6321_sw_force_speed_internal_phys(struct switch_dev *dev,
 						int int_phy_addr)
 {
-- 
2.7.4

