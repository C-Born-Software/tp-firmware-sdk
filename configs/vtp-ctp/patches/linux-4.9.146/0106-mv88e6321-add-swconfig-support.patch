From 58f43d34837dbcb7283e41938d2fff5d9e3a83f2 Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Wed, 14 Jun 2017 12:18:28 +0200
Subject: [PATCH] mv88e6321: add swconfig support

---
 arch/arm/configs/wago_pfc_generic_defconfig |   7 +-
 drivers/net/phy/Makefile                    |   2 +-
 drivers/net/phy/mv88e6321-cfg.c             | 388 ++++++++++++++++++++++++++++
 include/linux/mv88e6321.h                   |  36 +++
 4 files changed, 429 insertions(+), 4 deletions(-)
 create mode 100644 drivers/net/phy/mv88e6321-cfg.c
 create mode 100644 include/linux/mv88e6321.h

diff --git a/arch/arm/configs/wago_pfc_generic_defconfig b/arch/arm/configs/wago_pfc_generic_defconfig
index f9c5fce..b9ee490 100644
--- a/arch/arm/configs/wago_pfc_generic_defconfig
+++ b/arch/arm/configs/wago_pfc_generic_defconfig
@@ -177,6 +177,7 @@ CONFIG_BRIDGE_EBT_LOG=y
 CONFIG_L2TP=m
 CONFIG_L2TP_DEBUGFS=m
 CONFIG_BRIDGE=y
+CONFIG_NET_DSA=y
 CONFIG_VLAN_8021Q=m
 CONFIG_VLAN_8021Q_GVRP=y
 CONFIG_NET_SCHED=y
@@ -253,7 +254,7 @@ CONFIG_SCSI_SCAN_ASYNC=y
 # CONFIG_SCSI_LOWLEVEL is not set
 CONFIG_NETDEVICES=y
 CONFIG_TUN=y
-CONFIG_NET_DSA_KSZ8863=y
+CONFIG_NET_DSA_MV88E6XXX=y
 # CONFIG_NET_CADENCE is not set
 # CONFIG_NET_VENDOR_BROADCOM is not set
 # CONFIG_NET_VENDOR_CIRRUS is not set
@@ -271,10 +272,10 @@ CONFIG_TI_CPTS=y
 # CONFIG_NET_VENDOR_WIZNET is not set
 CONFIG_SWCONFIG=y
 CONFIG_MDIO_BITBANG=y
+# CONFIG_MICREL_KSZ8863_EXTENDED_REGS is not set
 CONFIG_MDIO_GPIO=y
-CONFIG_MICREL_KSZ8863_PHY=y
 CONFIG_MICREL_PHY=y
-CONFIG_SWCFG_KSZ8863=y
+CONFIG_SWCFG_MV88E6321=y
 CONFIG_PPP=y
 CONFIG_PPP_DEFLATE=y
 CONFIG_PPP_FILTER=y
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index dd09562..467fef8 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -56,4 +56,4 @@ obj-$(CONFIG_STE10XP)		+= ste10Xp.o
 obj-$(CONFIG_TERANETICS_PHY)	+= teranetics.o
 obj-$(CONFIG_VITESSE_PHY)	+= vitesse.o
 obj-$(CONFIG_XILINX_GMII2RGMII) += xilinx_gmii2rgmii.o
-
+obj-$(CONFIG_SWCFG_MV88E6321)   += mv88e6321-cfg.o
diff --git a/drivers/net/phy/mv88e6321-cfg.c b/drivers/net/phy/mv88e6321-cfg.c
new file mode 100644
index 0000000..d555bbb
--- /dev/null
+++ b/drivers/net/phy/mv88e6321-cfg.c
@@ -0,0 +1,388 @@
+/*
+ * mv88e6321-cfg.c
+ *
+ * Copyright (c) 2010 SAGEM Communications
+ *
+ * Author: Karl Beldan <karl.beldan@sagemcom.com>
+ *
+ * Licensed under the GPL version 2
+ */
+#define DEBUG
+
+#include <linux/module.h>
+#include <linux/string.h>
+#include <linux/delay.h>
+#include <linux/mutex_rt.h>
+#include <linux/miscdevice.h>
+#include <linux/fs.h>
+#include <linux/ioctl.h>
+#include <asm/uaccess.h>
+#include <linux/phy.h>
+#include <linux/switch.h>
+#include <linux/mv88e6321.h>
+#include <linux/of_gpio.h>
+#include <linux/of_mdio.h>
+#include <linux/platform_device.h>
+
+#define DRIVER_NAME		"mv88e6321"
+
+#define MASK(msb, lsb)          \
+        ( (((u32)1<<((msb)-(lsb)+1))-1) << (lsb) )
+#define GET(v, msb, lsb)        \
+        ( ((u32)(v) & MASK(msb,lsb)) >> (lsb) )
+#define SET(v, f, msb, lsb)     \
+        ( (v) = ((v)&~MASK(msb,lsb)) | (( (u32)(f)<<(lsb) ) & MASK(msb,lsb)) )
+
+#define DFLT_CFG_FLAGS                  MV88E6321_CFG_PWRDOWN_FLAG
+
+
+struct mv88e6321_info {
+	struct device *dev;
+	int reset_gpio;
+	bool reset;
+} *mvinfo;
+
+static int mv88e6321_soft_reset(void)
+{
+        return 0;
+}
+
+static int mv88e6321_setup_dflt_cfg(int flags)
+{
+        int ret;
+
+        /* Reset */
+        if ((ret = mv88e6321_soft_reset()))
+                return ret;
+
+	pr_info("%s:%d\n", __func__, __LINE__);
+
+        return 0;
+}
+
+static u8 cur_reg = 0;
+static u8 cur_phy_reg = 0;
+
+static int mv88e6321_sw_set_mdio_phy(struct switch_dev *dev,
+				     const struct switch_attr *attr,
+				     struct switch_val *val)
+{
+        cur_phy_reg = val->value.i;
+        return 0;
+}
+
+static int mv88e6321_sw_set_mdio_reg(struct switch_dev *dev,
+				     const struct switch_attr *attr,
+				     struct switch_val *val)
+{
+        cur_reg = val->value.i;
+        return 0;
+}
+
+static int mv88e6321_sw_get_mdio_phy(struct switch_dev *dev,
+				     const struct switch_attr *attr,
+				     struct switch_val *val)
+{
+        val->value.i = cur_phy_reg;
+        return 0;
+}
+
+static int mv88e6321_sw_get_mdio_reg(struct switch_dev *dev,
+				     const struct switch_attr *attr,
+				     struct switch_val *val)
+{
+        val->value.i = cur_reg;
+        return 0;
+}
+
+static int mv88e6321_sw_set_mdio_write(struct switch_dev *dev,
+				       const struct switch_attr *attr,
+				       struct switch_val *val)
+{
+        u16 v = val->value.i;
+	pr_debug("mdiobus_write: phy 0x%02x, reg 0x%02x, val 0x%04x\n",
+		 cur_phy_reg, cur_reg, v);
+        return mdiobus_write(dev->mii_bus, cur_phy_reg, cur_reg, v);
+}
+
+static int mv88e6321_sw_get_mdio_read(struct switch_dev *dev,
+				      const struct switch_attr *attr,
+				      struct switch_val *val)
+{
+        val->value.i = mdiobus_read(dev->mii_bus, cur_phy_reg, cur_reg);
+	pr_debug("mdiobus_read: phy 0x%02x, reg 0x%02x, val 0x%04x\n",
+		 cur_phy_reg, cur_reg, val->value.i);
+        return 0;
+}
+
+static inline int mv88e6321_sw_reset(struct switch_dev *dev)
+{
+        return mv88e6321_soft_reset();
+}
+
+static int mv88e6321_sw_setup_dflt_cfg(struct switch_dev *dev,
+                                     const struct switch_attr *attr,
+                                     struct switch_val *val)
+{
+        return mv88e6321_setup_dflt_cfg(DFLT_CFG_FLAGS);
+}
+
+
+static struct switch_attr mv88e6321_global_attrs[] = {
+        {
+                .type = SWITCH_TYPE_NOVAL,
+                .name = "setup_dflt",
+                .description = "Setup default config",
+                .set = mv88e6321_sw_setup_dflt_cfg,
+        }, {
+                .type = SWITCH_TYPE_INT,
+                .name = "mdio_phy",
+                .description = "Select phy register for mdio rw operation",
+                .set = mv88e6321_sw_set_mdio_phy,
+                .get = mv88e6321_sw_get_mdio_phy,
+        }, {
+                .type = SWITCH_TYPE_INT,
+                .name = "mdio_reg",
+                .description = "Select register for mdio rw operation",
+                .set = mv88e6321_sw_set_mdio_reg,
+                .get = mv88e6321_sw_get_mdio_reg,
+        }, {
+                .type = SWITCH_TYPE_INT,
+                .name = "mdio_rw",
+                .description = "Read/Write with selected mdio registers",
+                .set = mv88e6321_sw_set_mdio_write,
+                .get = mv88e6321_sw_get_mdio_read,
+        },
+};
+
+struct switch_dev_ops mv88e6321_switch_dev_ops = {
+	.attr_global = {
+		.attr = mv88e6321_global_attrs,
+	        .n_attr = ARRAY_SIZE(mv88e6321_global_attrs),
+	},
+        .attr_port = {
+                .attr = NULL,
+                .n_attr = 0,
+        },
+        .attr_vlan = {
+                .attr = NULL,
+                .n_attr = 0,
+        },
+        .reset_switch = mv88e6321_sw_reset,
+};
+
+struct mv88e6321_info *of_get_mv_pdata(struct device *dev)
+{
+	struct device_node *np = dev->of_node;
+	struct pinctrl *pinctrl;
+	int ret;
+
+	mvinfo = devm_kzalloc(dev, sizeof(*mvinfo), GFP_KERNEL);
+	if (!mvinfo)
+		return ERR_PTR(-ENOMEM);
+
+	mvinfo->reset = false;
+
+	if (np) {
+
+		pinctrl = devm_pinctrl_get_select_default(dev);
+		if (IS_ERR(pinctrl))
+			dev_warn(dev, "pins are not configured from the driver\n");
+
+		ret = of_get_named_gpio(np, "swcfg,gpio-reset", 0);
+		if (ret == -EPROBE_DEFER)
+			goto out_err;
+
+		mvinfo->reset_gpio = ret;
+
+		if (mvinfo->reset_gpio < 0) {
+			dev_err(dev, "No gpio reset pin given\n");
+		} else {
+			ret = devm_gpio_request_one(dev, mvinfo->reset_gpio,
+						    GPIOF_OUT_INIT_HIGH | GPIOF_EXPORT_DIR_FIXED,
+						    "SWCFG: Switch Reset Pin");
+			if (ret < 0) {
+				dev_err(dev, "failed to claim gpio-reset pin\n");
+				goto out_err;
+			}
+
+			if (of_find_property(np, "swcfg,reset-switch", NULL))
+				mvinfo->reset = true;
+		}
+
+		dev_warn(dev, "Switch will %sbe resetted.\n",
+			 mvinfo->reset ? "" : "NOT ");
+	}
+
+	mvinfo->dev = dev;
+
+	return mvinfo;
+
+out_err:
+
+	devm_kfree(dev, mvinfo);
+	return ERR_PTR(ret);
+}
+
+static struct switch_dev *of_get_swdev(struct device *dev)
+{
+	struct switch_dev *swdev;
+	struct device_node *np = dev->of_node;
+	struct device_node *mdio_node;
+	int ret;
+
+	swdev = devm_kzalloc(dev, sizeof(*swdev), GFP_KERNEL);
+	if (!swdev)
+		return ERR_PTR(-ENOMEM);
+
+	if (np) {
+		swdev->name = np->name;
+
+		if (of_property_read_string(np, "swcfg,alias", &swdev->alias)) {
+			dev_err(dev, "No switch alias given\n");
+			ret = -EINVAL;
+			goto out_err_free;
+		}
+
+		if (of_property_read_u32(np, "swcfg,cpu_port", &swdev->cpu_port)) {
+			dev_err(dev, "No cpu port given\n");
+			ret = -EINVAL;
+			goto out_err_free;
+		}
+
+		if (of_property_read_u32(np, "swcfg,ports", &swdev->ports)) {
+			dev_err(dev, "No ports given\n");
+			ret = -EINVAL;
+			goto out_err_free;
+		}
+
+		if (of_property_read_u32(np, "swcfg,vlans", &swdev->vlans)) {
+			dev_err(dev, "No vlans given\n");
+			ret = -EINVAL;
+			goto out_err_free;
+		}
+
+		/* get mdio node */
+		mdio_node = of_parse_phandle(np, "swcfg,mii-bus", 0);
+		if (!mdio_node) {
+			dev_err(dev, "can't find node 'swcfg,mii-bus'\n");
+			ret = -ENODEV;
+			goto out_err_free;
+		}
+
+		swdev->mii_bus = of_mdio_find_bus(mdio_node);
+		if (!swdev->mii_bus) {
+			dev_err(dev, "can't find mii bus device\n");
+			ret = -EPROBE_DEFER;
+			goto out_err_free;
+		}
+
+		dev_info(dev, "mii_bus: found and using '%s'\n", swdev->mii_bus->name);
+
+		swdev->of_node = np;
+		swdev->ops = &mv88e6321_switch_dev_ops;
+	}
+
+	return swdev;
+
+out_err_free:
+
+	devm_kfree(dev, swdev);
+	return ERR_PTR(ret);
+}
+
+static void mv88e6321_hw_reset(struct mv88e6321_info *mvinfo)
+{
+	dev_info(mvinfo->dev, "Going to reset gpio%d\n", mvinfo->reset_gpio);
+	gpio_set_value(mvinfo->reset_gpio, 0);
+	mdelay(100);
+	gpio_set_value(mvinfo->reset_gpio, 1);
+	dev_info(mvinfo->dev, "mv88e6321 switch resetted!\n");
+}
+
+static int mv88e6321_probe(struct platform_device *pdev)
+{
+	struct switch_dev *swdev;
+	struct mv88e6321_info *pdata;
+	int ret;
+
+	pr_info("%s/%d\n", __func__, __LINE__);
+
+	if (pdev->dev.of_node) {
+		swdev = of_get_swdev(&pdev->dev);
+		if (IS_ERR(swdev))
+			return PTR_ERR(swdev);
+
+		dev_info(&pdev->dev, "SWCFG: switch device '%s'\n", swdev->name);
+
+		pdata = of_get_mv_pdata(&pdev->dev);
+		if (IS_ERR(pdata))
+			return PTR_ERR(pdata);
+	}
+
+	if (pdata && pdata->reset)
+		mv88e6321_hw_reset(pdata);
+
+#if 0
+        /* FIXME:
+	 *   You should check some switch identifier here
+	 *   mdiobus_read(pdata->mii_bus, some_phy, some_reg)
+	 */
+	if ((ret = mv88e6321_smi_nread(ChipID0, chipid, 2)))
+		return -1;
+
+	if (chipid[0] == MV88E6321_FAMILY_ID &&
+	    (chipid[1] >> 4) == MV88E6321_CHIP_ID)
+		dev_info(&pdev->dev, "Detected Family ID 0x%x, Chip ID 0x%x\n", chipid[0], chipid[1] >> 4);
+#endif
+
+	pdev->dev.platform_data = pdata;
+
+#if 0
+        /* FIXME:
+	 *   We would need this for mv DSA adaption
+	 */
+	mv88e6321_fns->nread  = mv88e6321_smi_nread;
+	mv88e6321_fns->nwrite = mv88e6321_smi_nwrite;
+        mv88e6321_fns->setup_dflt_cfg = mv88e6321_setup_dflt_cfg;
+#endif
+
+        if ((ret = register_switch(swdev, NULL))) {
+                pr_info("%s: switch registration failed\n", __func__);
+                return ret;
+        }
+
+	dev_info(&pdev->dev, "SWCONFIG: MV88E6321 Driver probed\n");
+
+	return 0;
+}
+
+static int mv88e6321_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id mv88e6321_dt_ids[] = {
+	{ .compatible = "swcfg,mv88e6321", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, mv88e6321_dt_ids);
+#endif
+
+static struct platform_driver mv88e6321_driver = {
+	.probe  = mv88e6321_probe,
+	.remove = mv88e6321_remove,
+	.driver = {
+		.name   = DRIVER_NAME,
+		.owner  = THIS_MODULE,
+#ifdef CONFIG_OF
+		.of_match_table = mv88e6321_dt_ids,
+#endif
+	},
+};
+
+module_platform_driver(mv88e6321_driver);
+
+MODULE_AUTHOR("heinrich.toews@wago.com>");
+MODULE_LICENSE("GPL v2");
diff --git a/include/linux/mv88e6321.h b/include/linux/mv88e6321.h
new file mode 100644
index 0000000..f50041d
--- /dev/null
+++ b/include/linux/mv88e6321.h
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2010 SAGEM Communications.
+ *
+ * Author: Karl Beldan <karl.beldan@sagemcom.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+#ifndef MV88E6321_H
+#define MV88E6321_H
+
+#include <linux/mii.h>
+#include <linux/phy.h>
+
+#define MV88E6321_CFG_TAIL_TAG_FLAG       (1 << 0)
+#define MV88E6321_CFG_PWRDOWN_FLAG        (1 << 1)
+#define MV88E6321_CFG_DSA_FLAGS           MV88E6321_CFG_TAIL_TAG_FLAG
+
+struct mv88e6321_fns_t {
+        int (*nread)(u8 reg, u8 *rxbuf, int len);
+        int (*nwrite)(u8 reg, u8 *txbuf, int len);
+        int (*setup_dflt_cfg)(int flags);
+};
+
+extern struct mv88e6321_fns_t *mv88e6321_fns;
+
+struct mv88e6321_pdata_t {
+        int tail_tag;
+        int intrn_pin;
+	int reset_pin;
+	struct device *mii_bus;
+};
+
+#endif /* MV88E6321_H */
-- 
2.7.4

