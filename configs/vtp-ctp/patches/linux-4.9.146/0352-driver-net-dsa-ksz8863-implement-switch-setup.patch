From 806b710b3cf000a04722a109105c824554097664 Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Thu, 27 Jun 2019 14:57:06 +0200
Subject: [PATCH] driver: net: dsa: ksz8863: implement switch setup

---
 drivers/net/dsa/ksz886x/ksz8863.c | 224 +++++++++++++++++++++++++++++++++++++-
 drivers/net/dsa/ksz886x/ksz8863.h | 134 +++++++++++++++++++++++
 net/dsa/tag_tail.c                |   2 +-
 3 files changed, 356 insertions(+), 4 deletions(-)

diff --git a/drivers/net/dsa/ksz886x/ksz8863.c b/drivers/net/dsa/ksz886x/ksz8863.c
index 9d89cb6..c344090 100644
--- a/drivers/net/dsa/ksz886x/ksz8863.c
+++ b/drivers/net/dsa/ksz886x/ksz8863.c
@@ -30,16 +30,159 @@
 
 #include "ksz8863.h"
 
+static inline int port_to_index(int port)
+{
+	return port - 1;
+}
+
+static inline int index_to_port(int port)
+{
+	return port + 1;
+}
+
 static enum dsa_tag_protocol ksz8863_get_tag_protocol(struct dsa_switch *ds)
 {
 	return DSA_TAG_PROTO_TAIL;
 }
 
-static int ksz8863_setup(struct dsa_switch *ds)
+static int ksz8863_setup_global(struct ksz8863_chip *chip)
 {
+	int ret;
+	u8 val;
+
+	/* Enable tail tagging */
+	ret = chip->mii_ops->read(chip, KSZ8863_REG_GL_CTRL1, &val);
+	if (ret)
+		return ret;
+
+	val |= KSZ8863_REG_GL_CTRL1_TAIL_TAG_ENABLE;
+	ret = chip->mii_ops->write(chip, KSZ8863_REG_GL_CTRL1, val);
+	if (ret)
+		return ret;
+
+	/* Turn on IGMP Snooping */
+	ret = chip->mii_ops->read(chip, KSZ8863_REG_GL_CTRL3, &val);
+	if (ret)
+		return ret;
+
+	val |= KSZ8863_REG_GL_CTRL3_IGMP_SNOOP;
+	ret = chip->mii_ops->write(chip, KSZ8863_REG_GL_CTRL3, val);
+	if (ret)
+		return ret;
+
+	/* Set broadcast and unknown MAC address forwarging*/
+	ret = chip->mii_ops->read(chip, KSZ8863_REG_GL_CTRL12, &val);
+	if (ret)
+		return ret;
+
+	val |= KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_ENABLE;
+	val &= ~KSZ8863_REG_GL_CTRL12_PORT_MASK;
+
+	val |= KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT1;
+	val |= KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT2;
+	val |= KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT3;
+
+	ret = chip->mii_ops->write(chip, KSZ8863_REG_GL_CTRL12, val);
+
+	return ret;
+}
+
+static int ksz8863_setup_port(struct ksz8863_chip *chip, int port)
+{
+	int ret;
+	u8 val;
+	int pb = KSZ8863_REG_PORTS_BASE * port_to_index(port);
+
+	if (!dsa_is_cpu_port(chip->ds, port)) {
+		struct phy_device *phydev;
+
+		/* Scan the mdiobus for the internal phy.
+		 * This is needed because libphy may scan the
+		 * bus when the switch is still in reset.
+		 */
+		phydev = mdiobus_scan(chip->sw_bus, port);
+
+		if (!phydev || (IS_ERR(phydev))) {
+			pr_err("failed to probe phydev via mdio at port %i\n",
+			       port);
+			return IS_ERR(phydev);
+		}
+
+		/* Enable broadcast storm protection for all ports
+		 * except cpu port.
+		 */
+		ret = chip->mii_ops->read(chip, pb + KSZ8863_REG_PORT1_CTRL0,
+					  &val);
+		if (ret)
+			return ret;
+
+		val |= KSZ8863_REG_PORT_CTRL0_BROADCAST_STORM;
+		ret = chip->mii_ops->write(chip, pb + KSZ8863_REG_PORT1_CTRL0,
+					   val);
+		if (ret)
+			return ret;
+	}
+
+	if (dsa_is_cpu_port(chip->ds, port)) {
+		/* set MAC mode for cpu port */
+		ret = chip->mii_ops->read(chip, pb + KSZ8863_REG_PORT1_CTRL5,
+					  &val);
+		if (ret)
+			return ret;
+
+		val |= KSZ8863_REG_PORT_CTRL5_3_MII_MAC_MODE;
+		ret = chip->mii_ops->write(chip, pb + KSZ8863_REG_PORT1_CTRL5,
+					   val);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
+static int ksz8863_setup_adv_ctrl(struct ksz8863_chip *chip)
+{
+	int ret;
+	u8 val;
+
+	/* LEDs - yellow led -> link, green led -> act */
+	ret = chip->mii_ops->read(chip, KSZ8863_REG_PWR_LED, &val);
+	if (ret)
+		return ret;
+
+	val &= ~KSZ8863_REG_PWR_LED_LED_MODE_SEL_MASK;
+	val |= (KSZ8863_REG_PWR_LED_LED_MODE_1 <<
+		KSZ8863_REG_PWR_LED_LED_MODE_SEL_SHIFT);
+	ret = chip->mii_ops->write(chip, KSZ8863_REG_PWR_LED, val);
+	if (ret)
+		return ret;
 	return 0;
 }
 
+static int ksz8863_setup(struct dsa_switch *ds)
+{
+	struct ksz8863_chip *chip = ds->priv;
+	int port;
+	int err;
+
+	ds->slave_mii_bus = chip->sw_bus;
+
+	err = ksz8863_setup_global(chip);
+	if (err)
+		return err;
+
+	for (port = KSZ8863_EXT_PORT1_ID;
+	     port < KSZ8863_NUM_PORTS + KSZ8863_EXT_PORT1_ID;
+	     port++) {
+		err = ksz8863_setup_port(chip, port);
+		if (err)
+			return err;
+	}
+
+	err = ksz8863_setup_adv_ctrl(chip);
+	return err;
+}
+
 static int ksz8863_phy_read(struct dsa_switch *ds, int port, int reg)
 {
 	struct ksz8863_chip *chip = ds->priv;
@@ -54,10 +197,85 @@ static int ksz8863_phy_write(struct dsa_switch *ds, int port, int reg, u16 val)
 	return mdiobus_write_nested(chip->sw_bus, port, reg, val);
 }
 
+static int ksz8863_flush_mac_tables(struct ksz8863_chip *chip)
+{
+	int err;
+	int port;
+	u8 val;
+	u8 states[KSZ8863_NUM_PORTS];
+
+	/* backup port states */
+	for (port = 0; port < KSZ8863_NUM_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+
+		err = chip->mii_ops->read(chip, pb + KSZ8863_REG_PORT1_CTRL2,
+					  &states[port]);
+		if (err)
+			return err;
+	}
+
+	/* disable learning and disable receiving while flushing dynamic mac
+	 * table
+	 */
+	for (port = 0; port < KSZ8863_NUM_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+
+		err = chip->mii_ops->write(chip, pb + KSZ8863_REG_PORT1_CTRL2,
+					   KSZ8863_REG_PORT_CTRL2_LEARN_DISABLE);
+		if (err)
+			return err;
+	}
+
+	/* flush dynamic mac table */
+	err = chip->mii_ops->read(chip, KSZ8863_REG_GL_CTRL0, &val);
+	if (err)
+		return err;
+
+	val |= KSZ8863_REG_GL_CTRL0_FLUSH_DYN_MAC_TABLE;
+	err = chip->mii_ops->write(chip, KSZ8863_REG_GL_CTRL0, val);
+	if (err)
+		return err;
+
+	/* restore port states */
+	for (port = 0; port < KSZ8863_NUM_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+
+		err = chip->mii_ops->write(chip, pb + KSZ8863_REG_PORT1_CTRL2,
+				       states[port]);
+		if (err)
+			return err;
+	}
+
+	return 0;
+}
+
 static void ksz8863_adjust_link(struct dsa_switch *ds, int port,
 				struct phy_device *phydev)
 {
+	struct ksz8863_chip *chip = ds->priv;
+	int pb = KSZ8863_REG_PORTS_BASE * port;
+	int err;
+	u8 old_val, val;
+
 	phy_print_status(phydev);
+
+	err = ksz8863_flush_mac_tables(chip);
+	if (err)
+		return;
+
+	err = chip->mii_ops->read(chip, pb + KSZ8863_REG_PORT1_CTRL13, &val);
+	if (err)
+		return;
+
+	old_val = val;
+
+	if (phydev->state == PHY_HALTED || phydev->state == PHY_DOWN)
+		val |= KSZ8863_REG_PORT_CTRL13_POWER_DOWN;
+	else
+		val &= ~KSZ8863_REG_PORT_CTRL13_POWER_DOWN;
+
+	if (val != old_val)
+		chip->mii_ops->write(chip, pb + KSZ8863_REG_PORT1_CTRL13, val);
 }
 
 static struct dsa_switch_ops ksz8863_switch_ops = {
@@ -114,8 +332,8 @@ static int of_get_ksz8863_data(struct ksz8863_chip *chip)
 	if (of_find_property(np, "ksz,disable-internal-ldo", NULL))
 		chip->disable_internal_ldo = true;
 
-	chip->reset_gpio = devm_gpiod_get_optional(dev, "ksz,reset",
-						   GPIOD_OUT_LOW);
+	chip->reset_gpio =
+		devm_gpiod_get_optional(dev, "ksz,reset", GPIOD_OUT_LOW);
 	if (IS_ERR(chip->reset_gpio)) {
 		if (PTR_ERR(chip->reset_gpio) == -EPROBE_DEFER)
 			return -EPROBE_DEFER;
diff --git a/drivers/net/dsa/ksz886x/ksz8863.h b/drivers/net/dsa/ksz886x/ksz8863.h
index 497fa553..ab77f6a 100644
--- a/drivers/net/dsa/ksz886x/ksz8863.h
+++ b/drivers/net/dsa/ksz886x/ksz8863.h
@@ -14,10 +14,13 @@
 
 #include <linux/device.h>
 
+#define KSZ8863_NUM_PORTS 3
+
 #define KSZ8863_REG_CHIP_ID0			0x00
 #define KSZ8863_REG_CHIP_ID0_FAMILY_ID			0x88
 
 #define KSZ8863_REG_CHIP_ID1			0x01
+
 #define KSZ8863_REG_CHIP_ID1_ID_MASK			0xF0
 #define KSZ8863_REG_CHIP_ID1_ID_SHIFT			4
 #define KSZ8863_REG_CHIP_ID1_ID				0x03
@@ -25,9 +28,140 @@
 #define KSZ8863_REG_CHIP_ID1_REV_ID_SHIFT		1
 #define KSZ8863_REG_CHIP_ID1_START			0x01
 
+#define KSZ8863_REG_GL_CTRL0			0x02
+
+#define KSZ8863_REG_GL_CTRL0_NEW_BACKOFF		BIT(7)
+#define KSZ8863_REG_GL_CTRL0_FLUSH_DYN_MAC_TABLE	BIT(5)
+#define KSZ8863_REG_GL_CTRL0_FLUSH_STA_MAC_TABLE	BIT(4)
+#define KSZ8863_REG_GL_CTRL0_PASS_PAUSE			BIT(3)
+
+#define KSZ8863_REG_GL_CTRL1			0x03
+
+#define KSZ8863_REG_GL_CTRL1_PASS_ALL			BIT(7)
+#define KSZ8863_REG_GL_CTRL1_TAIL_TAG_ENABLE		BIT(6)
+#define KSZ8863_REG_GL_CTRL1_TX_FLOW_CTRL		BIT(5)
+#define KSZ8863_REG_GL_CTRL1_RX_FLOW_CTRL		BIT(4)
+#define KSZ8863_REG_GL_CTRL1_CHECK_LENGTH		BIT(3)
+#define KSZ8863_REG_GL_CTRL1_AGING_ENABLE		BIT(2)
+#define KSZ8863_REG_GL_CTRL1_FAST_AGING			BIT(1)
+#define KSZ8863_REG_GL_CTRL1_AGGR_BACKOFF		BIT(0)
+
+#define KSZ8863_REG_GL_CTRL2			0x04
+
+#define KSZ8863_REG_GL_CTRL2_UNICAST_VLAN_BOUNDARY	BIT(7)
+#define KSZ8863_REG_GL_CTRL2_MULTICAST_STORM_DISABLE	BIT(6)
+#define KSZ8863_REG_GL_CTRL2_BACK_PRESSURE		BIT(5)
+#define KSZ8863_REG_GL_CTRL2_FAIR_FLOW_CTRL		BIT(4)
+#define KSZ8863_REG_GL_CTRL2_NO_EXC_COLLISION_DROP	BIT(3)
+#define KSZ8863_REG_GL_CTRL2_HUGE_PACKET		BIT(2)
+#define KSZ8863_REG_GL_CTRL2_LEGAL_PACKET		BIT(1)
+
+#define KSZ8863_REG_GL_CTRL3			0x05
+
+#define KSZ8863_REG_GL_CTRL3_VLAN_ENABLE		BIT(7)
+#define KSZ8863_REG_GL_CTRL3_IGMP_SNOOP			BIT(6)
+#define KSZ8863_REG_GL_CTRL3_WEIGHTED_FAIR_QUEUE_ENABLE	BIT(3)
+#define KSZ8863_REG_GL_CTRL3_MIRROR_RX_TX		BIT(0)
+
+#define KSZ8863_REG_GL_CTRL4			0x06
+
+#define KSZ8863_REG_GL_CTRL4_HALF_DUPLEX		BIT(6)
+#define KSZ8863_REG_GL_CTRL4_FLOW_CTRL			BIT(5)
+#define KSZ8863_REG_GL_CTRL4_10_MBIT			BIT(4)
+#define KSZ8863_REG_GL_CTRL4_REPLACE_VID		BIT(3)
+#define KSZ8863_REG_GL_CTRL4_BCAST_STORM_RATE_HI_MASK	0x07
+
+#define KSZ8863_REG_GL_CTRL5			0x07
+
+#define KSZ8863_REG_GL_CTRL5_BCAST_STORM_RATE_LO_MASK	0xFF
+
+#define KSZ8863_REG_GL_CTRL9			0x0B
+
+#define KSZ8863_REG_GL_CTRL9_SPI_CLK_125_MHZ		0x80
+#define KSZ8863_REG_GL_CTRL9_SPI_CLK_62_5_MHZ		0x40
+#define KSZ8863_REG_GL_CTRL9_SPI_CLK_31_25_MHZ		0x00
+
+#define KSZ8863_REG_GL_CTRL10			0x0C
+#define KSZ8863_REG_GL_CTRL11			0x0D
+
+#define KSZ8863_REG_GL_CTRL12			0x0E
+
+#define KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_ENABLE		BIT(7)
+#define KSZ8863_REG_GL_CTRL12_DRIVER_16MA		BIT(6)
+#define KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT3	BIT(2)
+#define KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT2	BIT(1)
+#define KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT1	BIT(0)
+#define KSZ8863_REG_GL_CTRL12_PORT_MASK			0x7
+
+#define KSZ8863_REG_GL_CTRL13			0x0F
+
+#define KSZ8863_REG_GL_CTRL13_PORT_PHY_ADDR_MASK	0xF8
+#define KSZ8863_REG_GL_CTRL13_PORT_PHY_ADDR_SHIFT	3
+
+#define KSZ8863_REG_PORTS_BASE			0x10
+
+#define KSZ8863_REG_PORT1_CTRL0			0x10
+#define KSZ8863_REG_PORT2_CTRL0			0x20
+#define KSZ8863_REG_PORT3_CTRL0			0x30
+
+#define KSZ8863_REG_PORT_CTRL0_BROADCAST_STORM		BIT(7)
+#define KSZ8863_REG_PORT_CTRL0_DIFFSERV_ENABLE		BIT(6)
+#define KSZ8863_REG_PORT_CTRL0_802_1P_ENABLE		BIT(5)
+#define KSZ8863_REG_PORT_CTRL0_PRIO_MASK		0x18
+#define KSZ8863_REG_PORT_CTRL0_PRIO_SHIFT		3
+#define KSZ8863_REG_PORT_CTRL0_PRIO_0			(0 << KSZ8863_REG_PORT_CTRL_PRIO_SHIFT)
+#define KSZ8863_REG_PORT_CTRL0_PRIO_1			(1 << KSZ8863_REG_PORT_CTRL_PRIO_SHIFT)
+#define KSZ8863_REG_PORT_CTRL0_PRIO_2			(2 << KSZ8863_REG_PORT_CTRL_PRIO_SHIFT)
+#define KSZ8863_REG_PORT_CTRL0_PRIO_3			(3 << KSZ8863_REG_PORT_CTRL_PRIO_SHIFT)
+#define KSZ8863_REG_PORT_CTRL0_INSERT_TAG		BIT(2)
+#define KSZ8863_REG_PORT_CTRL0_REMOVE_TAG		BIT(1)
+#define KSZ8863_REG_PORT_CTRL0_4_PRIOS_ENABLE		BIT(0)
+
+#define KSZ8863_REG_PORT1_CTRL5			0x15
+#define KSZ8863_REG_PORT2_CTRL5			0x25
+#define KSZ8863_REG_PORT3_CTRL5			0x35
+
+#define KSZ8863_REG_PORT_CTRL5_3_MII_MAC_MODE		BIT(7)
+#define KSZ8863_REG_PORT_CTRL5_SA_MAC2			BIT(6)
+#define KSZ8863_REG_PORT_CTRL5_SA_MAC1			BIT(5)
+#define KSZ8863_REG_PORT_CTRL5_DROP_TAG			BIT(4)
+#define KSZ8863_REG_PORT_CTRL5_INGRESS_LIMIT_MODE_MAS	0x0C
+#define KSZ8863_REG_PORT_CTRL5_INGRESS_ALL		0x00
+#define KSZ8863_REG_PORT_CTRL5_INGRESS_UNICAST		0x04
+#define KSZ8863_REG_PORT_CTRL5_INGRESS_MULTICAST	0x08
+#define KSZ8863_REG_PORT_CTRL5_INGRESS_BROADCAST	0x0C
+#define KSZ8863_REG_PORT_CTRL5_COUNT_IFG		BIT(1)
+#define KSZ8863_REG_PORT_CTRL5_COUNT_PREAMBLE		BIT(0)
+
+#define KSZ8863_REG_PORT1_CTRL13		0x1D
+#define KSZ8863_REG_PORT2_CTRL13		0x2D
+
+#define KSZ8863_REG_PORT_CTRL13_LED_OFF			BIT(7)
+#define KSZ8863_REG_PORT_CTRL13_TX_DISABLE		BIT(6)
+#define KSZ8863_REG_PORT_CTRL13_AUTO_NEG_RESTART	BIT(5)
+#define KSZ8863_REG_PORT_CTRL13_REMOTE_FAULT_DISABLE	BIT(4)
+#define KSZ8863_REG_PORT_CTRL13_POWER_DOWN		BIT(3)
+#define KSZ8863_REG_PORT_CTRL13_AUTO_MDIX_DISABLE	BIT(2)
+#define KSZ8863_REG_PORT_CTRL13_FORCE_MDIX		BIT(1)
+#define KSZ8863_REG_PORT_CTRL13_LOOPBACK		BIT(0)
+
 #define KSZ8863_REG_INTERNAL_1V8_LDO_CTRL	0xC1
 #define KSZ8863_REG_INTERNAL_1V8_LDO_CTRL_DISABLE	BIT(6)
 
+#define KSZ8863_REG_PWR_LED			0xC3
+#define KSZ8863_REG_PWR_LED_CPU_IF_PD			BIT(7)
+#define KSZ8863_REG_PWR_LED_SW_PD			BIT(6)
+#define KSZ8863_REG_PWR_LED_LED_MODE_SEL_MASK		0x30
+#define KSZ8863_REG_PWR_LED_LED_MODE_SEL_SHIFT		4
+#define KSZ8863_REG_PWR_LED_LED_MODE_0			0
+#define KSZ8863_REG_PWR_LED_LED_MODE_1			1
+#define KSZ8863_REG_PWR_LED_LED_MODE_2			2
+#define KSZ8863_REG_PWR_LED_LED_MODE_3			3
+#define KSZ8863_REG_PWR_LED_LED_OUT			BIT(3)
+#define KSZ8863_REG_PWR_LED_PLL_PD			BIT(2)
+#define KSZ8863_REG_PWR_LED_PWR_MODE_MASK		0x03
+#define KSZ8863_REG_PWR_LED_PWR_MODE_SEL_SHIFT		0
+
 struct ksz8863_chip {
 	/* The dsa_switch this structure is related to */
 	struct dsa_switch *ds;
diff --git a/net/dsa/tag_tail.c b/net/dsa/tag_tail.c
index e85b4b4..432700b 100644
--- a/net/dsa/tag_tail.c
+++ b/net/dsa/tag_tail.c
@@ -45,7 +45,7 @@
 #define PORT2_TX_PRIO                                   3
 #endif
 
-#define DSA_PHY_OFFSET                                  1
+#define DSA_PHY_OFFSET                                  0
 
 static struct sk_buff *tail_xmit(struct sk_buff *skb, struct net_device *dev)
 {
-- 
2.7.4

