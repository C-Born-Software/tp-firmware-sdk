From 5b04c6b05002caba2f1a9e3c9d494ca460cc5468 Mon Sep 17 00:00:00 2001
From: Charline Wueste <charline.wueste@wago.com>
Date: Tue, 21 Aug 2018 13:20:14 +0200
Subject: [PATCH] can: c_can: decrease cpu load when bus not terminated

Signed-off-by: Peter Galka <peter.galka@wago.com>
---
 drivers/net/can/c_can/c_can.c | 49 +++++++++++++++++++++++++------------------
 drivers/net/can/dev.c         |  6 +++---
 2 files changed, 32 insertions(+), 23 deletions(-)

diff --git a/drivers/net/can/c_can/c_can.c b/drivers/net/can/c_can/c_can.c
index f884813..359745e 100644
--- a/drivers/net/can/c_can/c_can.c
+++ b/drivers/net/can/c_can/c_can.c
@@ -913,7 +913,7 @@ static int c_can_handle_state_change(struct net_device *dev,
 	if (!skb) {
 		if (printk_ratelimit())
 			netdev_err(dev,
-				"ti_hecc_error: alloc_can_err_skb() failed\n");
+				"c_can_error: alloc_can_err_skb() failed\n");
 		return -ENOMEM;
 	}
 
@@ -958,7 +958,7 @@ static int c_can_handle_state_change(struct net_device *dev,
 	stats->rx_bytes += cf->can_dlc;
 	netif_receive_skb(skb);
 
-	return 0;
+	return 1;
 }
 
 static int c_can_handle_bus_err(struct net_device *dev,
@@ -1038,25 +1038,28 @@ static int c_can_poll(struct napi_struct *napi, int quota)
 	int work_done = 0;
 
 	priv->last_status = curr = priv->read_reg(priv, C_CAN_STS_REG);
+
 	/* Ack status on C_CAN. D_CAN is self clearing */
 	if (priv->type != BOSCH_D_CAN)
 		priv->write_reg(priv, C_CAN_STS_REG, LEC_UNUSED);
 
 	/* handle state changes */
+	if ((curr & STATUS_BOFF) && (!(last & STATUS_BOFF))) {
+		netdev_dbg(dev, "entered bus off state\n");
+		work_done += c_can_handle_state_change(dev, C_CAN_BUS_OFF);
+		goto end;
+	}
+
 	if ((curr & STATUS_EWARN) && (!(last & STATUS_EWARN))) {
 		netdev_dbg(dev, "entered error warning state\n");
-		work_done += c_can_handle_state_change(dev, C_CAN_ERROR_WARNING);
+		if (work_done < quota)
+            work_done += c_can_handle_state_change(dev, C_CAN_ERROR_WARNING);
 	}
 
 	if ((curr & STATUS_EPASS) && (!(last & STATUS_EPASS))) {
 		netdev_dbg(dev, "entered error passive state\n");
-		work_done += c_can_handle_state_change(dev, C_CAN_ERROR_PASSIVE);
-	}
-
-	if ((curr & STATUS_BOFF) && (!(last & STATUS_BOFF))) {
-		netdev_dbg(dev, "entered bus off state\n");
-		work_done += c_can_handle_state_change(dev, C_CAN_BUS_OFF);
-		goto end;
+		if (work_done < quota)
+            work_done += c_can_handle_state_change(dev, C_CAN_ERROR_PASSIVE);
 	}
 
 	/* handle bus recovery events */
@@ -1069,18 +1072,24 @@ static int c_can_poll(struct napi_struct *napi, int quota)
 		priv->can.state = CAN_STATE_ERROR_ACTIVE;
 	}
 
-	/* handle lec errors on the bus */
-	work_done += c_can_handle_bus_err(dev, curr & LEC_MASK);
+    /* handle lec errors on the bus */
+	if (work_done < quota)
+        work_done += c_can_handle_bus_err(dev, curr & LEC_MASK);
 
-	/* Handle Tx/Rx events. We do this unconditionally */
-	work_done += c_can_do_rx_poll(dev, (quota - work_done));
-	c_can_do_tx(dev);
+end: /* ++ WAT 25418 */
 
-end:
-	if (work_done < quota) {
+	/* Handle Tx/Rx events. We do this unconditionally */
+    if (work_done < quota)
+	    work_done += c_can_do_rx_poll(dev, (quota - work_done));
+	if (priv->can.state != CAN_STATE_BUS_OFF)
+        c_can_do_tx(dev);
+
+/* end: -- WAT 25418 */
+    if (work_done < quota)
+    {
 		napi_complete(napi);
 		/* enable all IRQs if we are not in bus off state */
-		if (priv->can.state != CAN_STATE_BUS_OFF)
+        /* if (priv->can.state != CAN_STATE_BUS_OFF) -- WAT 25418 */
 			c_can_irq_control(priv, true);
 	}
 
@@ -1092,10 +1101,10 @@ static irqreturn_t c_can_isr(int irq, void *dev_id)
 	struct net_device *dev = (struct net_device *)dev_id;
 	struct c_can_priv *priv = netdev_priv(dev);
 
-	/* this results blocking in kernel 4.9	
+	/* this results blocking in kernel 4.9	*/
 	if (!priv->read_reg(priv, C_CAN_INT_REG))
 		return IRQ_NONE;
-	*/
+
 
 	/* disable all interrupts and schedule the NAPI */
 	c_can_irq_control(priv, false);
diff --git a/drivers/net/can/dev.c b/drivers/net/can/dev.c
index ca94312..275e845 100644
--- a/drivers/net/can/dev.c
+++ b/drivers/net/can/dev.c
@@ -192,15 +192,15 @@ static int can_calc_bittiming(struct net_device *dev, struct can_bittiming *bt,
 		bitrate_error = (u32)v64;
 		if (bitrate_error > CAN_CALC_MAX_ERROR) {
 			netdev_err(dev,
-				   "CAN baudrate %li bitrate error %d.%d%% too high\n",
+				   "CAN baudrate %i bitrate error %d.%d%% too high\n",
 				    bt->bitrate, bitrate_error / 10, bitrate_error % 10);
 			return -EDOM;
 		}
-		netdev_warn(dev, "CAN baudrate %li bitrate error %d.%d%%\n",
+		netdev_warn(dev, "CAN baudrate %i bitrate error %d.%d%%\n",
 			    bt->bitrate, bitrate_error / 10, bitrate_error % 10);
 	}
     else
-        netdev_warn(dev, "CAN baudrate %li no bitrate error\n",bt->bitrate);
+        netdev_warn(dev, "CAN baudrate %i no bitrate error\n",bt->bitrate);
 
 	/* real sample point */
 	bt->sample_point = can_update_sample_point(btc, sample_point_nominal, best_tseg,
-- 
2.7.4

