From 1b0fd6aaa1697a4ed0de3fff0f3b9124a410eb57 Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Wed, 17 Oct 2018 11:14:16 +0200
Subject: [PATCH] swconfig: remove tcam part

TCAM is moved to DSA

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/phy/mv88e6321-cfg.c | 476 ----------------------------------------
 1 file changed, 476 deletions(-)

diff --git a/drivers/net/phy/mv88e6321-cfg.c b/drivers/net/phy/mv88e6321-cfg.c
index 875f5b3..92b0637 100644
--- a/drivers/net/phy/mv88e6321-cfg.c
+++ b/drivers/net/phy/mv88e6321-cfg.c
@@ -29,7 +29,6 @@
 #include <linux/list.h>
 
 #include "../dsa/mv88e6xxx/mv88e6xxx.h"
-#include "../dsa/mv88e6xxx/mv88e6321_tcam.h"
 
 #define DRIVER_NAME		"mv88e6321"
 
@@ -63,20 +62,11 @@
 
 extern struct mv88e6xxx_chip *global_chip;
 
-static int mv88e6321_setup_tcam(struct mii_bus *bus, struct device_node *np);
-
 struct mv88e6321_info {
 	struct device *dev;
 	struct switch_dev *swdev;
 	int reset_gpio;
 	bool reset;
-#ifdef CONFIG_OF
-	struct mutex tcam_lock;
-	void *tcam_fdt;
-	struct device_node *tcam_np;
-	struct tcam_info tcam_info_head;
-	char tcam_buf[2000];
-#endif
 } *mvinfo;
 
 static int mv88e6321_soft_reset(void)
@@ -86,7 +76,6 @@ static int mv88e6321_soft_reset(void)
 
 static u8 cur_reg = 0;
 static u8 cur_phy_reg = 0;
-static int cur_tcam_id = 0;
 
 static int mv88e6321_sw_set_mdio_phy(struct switch_dev *dev,
 				     const struct switch_attr *attr,
@@ -104,14 +93,6 @@ static int mv88e6321_sw_set_mdio_reg(struct switch_dev *dev,
         return 0;
 }
 
-static int mv88e6321_sw_set_tcam_id(struct switch_dev *dev,
-				     const struct switch_attr *attr,
-				     struct switch_val *val)
-{
-        cur_tcam_id = val->value.i;
-        return 0;
-}
-
 static int mv88e6321_sw_get_mdio_phy(struct switch_dev *dev,
 				     const struct switch_attr *attr,
 				     struct switch_val *val)
@@ -128,14 +109,6 @@ static int mv88e6321_sw_get_mdio_reg(struct switch_dev *dev,
         return 0;
 }
 
-static int mv88e6321_sw_get_tcam_id(struct switch_dev *dev,
-				     const struct switch_attr *attr,
-				     struct switch_val *val)
-{
-        val->value.i = cur_tcam_id;
-        return 0;
-}
-
 static int mv88e6321_sw_set_mdio_write(struct switch_dev *dev,
 				       const struct switch_attr *attr,
 				       struct switch_val *val)
@@ -464,19 +437,6 @@ static int mv88e6321_sw_setup_dflt_cfg(struct switch_dev *dev,
 	if (ret < 0)
 		goto out;
 
-	ret = mv88e6321_sw_enable_cut_through(dev, MV88E6321_SW_PORT3_REG);
-	if (ret < 0)
-		goto out;
-
-	ret = mv88e6321_sw_enable_cut_through(dev, MV88E6321_SW_PORT4_REG);
-	if (ret < 0)
-		goto out;
-
-	ret = mv88e6321_setup_tcam(dev->mii_bus, of_root);
-
-	if (ret < 0)
-		goto out;
-
 	ret = 0;
 out:
         return ret;
@@ -502,315 +462,6 @@ static inline int mv88e6321_sw_get_dsa_enable(struct switch_dev *dev,
 }
 #endif
 
-#ifdef CONFIG_OF
-
-static struct tcam_info* mv88e6321_get_tcam_info_by_title(const char *title)
-{
-	struct tcam_info *ret = NULL, *tcam_info = NULL;
-
-	list_for_each_entry(tcam_info, &mvinfo->tcam_info_head.list, list) {
-		if (strcmp(tcam_info->title, title) == 0) {
-			ret = tcam_info;
-			goto out;
-		}
-	}
-
-out:
-	return ret;
-}
-
-static ssize_t store_tcam_entry_enable(struct device* dev,
-				       struct device_attribute *attr,
-			               const char *buf, size_t count)
-{
-	ssize_t ret = count;
-	struct tcam_info *tcam_info = NULL;
-	struct mii_bus *bus = mvinfo->swdev->mii_bus;
-
-	if (count == 0) {
-		ret = -EINVAL;
-		goto out;
-	}
-
-	tcam_info = mv88e6321_get_tcam_info_by_title(attr->attr.name);
-
-	if (tcam_info) {
-		if (buf[0] == '0' || buf[0] == 0)
-			ret = mv88e6321_disable_tcam(bus, tcam_info->id);
-		else
-			ret = mv88e6321_enable_tcam(bus, tcam_info->id,
-						    tcam_info->reg_frame_type);
-		if (ret >= 0)
-			ret = count;
-	} else {
-		ret = -EEXIST;
-		goto out;
-	}
-
-out:
-	return ret;
-}
-
-static ssize_t show_tcam_entry_enable(struct device* dev,
-				      struct device_attribute *attr,
-				      char *buf)
-{
-	ssize_t ret = 0;
-	struct tcam_info *tcam_info = NULL;
-	struct mii_bus *bus = mvinfo->swdev->mii_bus;
-
-	tcam_info = mv88e6321_get_tcam_info_by_title(attr->attr.name);
-
-	if (tcam_info) {
-		if (mv88e6321_is_tcam_enabled(bus, tcam_info->id))
-			snprintf(buf, PAGE_SIZE, "%d", 1);
-		else
-			snprintf(buf, PAGE_SIZE, "%d", 0);
-		ret = 1;
-	} else {
-		ret = -EEXIST;
-		goto out;
-	}
-
-out:
-	return ret;
-}
-
-static int mv88e6321_add_device_file(struct device *dev, struct tcam_info
-				     *tcam_info)
-{
-	int ret = 0;
-	pr_debug("create device file: %s\n", tcam_info->title);
-
-	tcam_info->dev_attr.attr.name = tcam_info->title,
-	tcam_info->dev_attr.attr.mode = S_IWUSR | S_IRUGO;
-
-	tcam_info->dev_attr.show = show_tcam_entry_enable;
-	tcam_info->dev_attr.store = store_tcam_entry_enable;
-
-	ret = device_create_file(dev, &tcam_info->dev_attr);
-
-	pr_debug("%s ret: %d\n", __func__, ret);
-
-	return ret;
-}
-
-static void mv88e6321_cleanup_tcam(struct mv88e6321_info *pdata)
-{
-	struct tcam_info *tcam_info = NULL, *tcam_info_tmp = NULL;
-
-	/* cleanup all tcam entries on switch */
-	mv88e6321_flush_tcam(pdata->swdev->mii_bus, -1);
-
-	/* remove all sysfs device files */
-	list_for_each_entry_safe(tcam_info, tcam_info_tmp,
-				 &pdata->tcam_info_head.list, list) {
-		pr_debug("%s del tcam_info: %p title: %s\n", __func__,
-			 tcam_info, tcam_info->title);
-		device_remove_file(pdata->dev, &tcam_info->dev_attr);
-		list_del(&tcam_info->list);
-		devm_kfree(pdata->dev, tcam_info);
-	}
-
-	if (pdata->tcam_fdt) {
-		devm_kfree(pdata->dev, pdata->tcam_fdt);
-		pdata->tcam_fdt = NULL;
-	}
-
-	if (pdata->tcam_np) {
-		kfree(pdata->tcam_np);
-		pdata->tcam_np = NULL;
-	}
-}
-
-static int mv88e6321_set_tcam_entry(struct mii_bus *bus,
-				    struct tcam_entry *tcam_entry)
-{
-	int ret = 0;
-	u16 reg_frame_type = 0;
-	struct tcam_info *tcam_info = NULL;
-
-	/* disable TCAM entry by default */
-	reg_frame_type = tcam_entry->reg_frame_type;
-	tcam_entry->reg_frame_type = 0x00FF;
-
-	ret = mv88e6321_load_tcam(bus, tcam_entry);
-	if (ret < 0)
-		goto out;
-
-	tcam_info = devm_kzalloc(mvinfo->dev, sizeof(struct tcam_info),
-				 GFP_KERNEL);
-	if (!tcam_info) {
-		ret = -ENOMEM;
-		goto out;
-	}
-
-	tcam_info->title = tcam_entry->title;
-	tcam_info->id = tcam_entry->orig_id;
-	if (tcam_entry->is96frame)
-		tcam_info->next_id = tcam_entry->next_id;
-	else
-		tcam_info->next_id = -1;
-	tcam_info->reg_frame_type = reg_frame_type;
-
-	list_add(&tcam_info->list, &mvinfo->tcam_info_head.list);
-
-	ret = mv88e6321_add_device_file(mvinfo->dev, tcam_info);
-	if (ret < 0)
-		goto out_free_tcam_info;
-
-	pr_debug("tcam entry: %s added\n", tcam_info->title);
-
-	return 0;
-
-out_free_tcam_info:
-	list_del(&tcam_info->list);
-	devm_kfree(mvinfo->dev, tcam_info);
-out:
-	return ret;
-}
-
-static int mv88e6321_setup_tcam(struct mii_bus *bus, struct device_node *np)
-{
-	int ret = 0;
-	struct tcam_entries tcam_entries;
-	struct tcam_entry *tcam_entry = NULL;
-	struct tcam_entry *tcam_entry_tmp = NULL;
-
-	memset(&tcam_entries, 0, sizeof(struct tcam_entries));
-	INIT_LIST_HEAD(&tcam_entries.head.list);
-
-	mutex_lock_interruptible(&mvinfo->tcam_lock);
-
-	if (np) {
-		ret = of_get_tcam_entry(&tcam_entries, np);
-		if (ret < 0)
-			goto out;
-
-		mv88e6321_cleanup_tcam(mvinfo);
-
-		ret = mv88e6321_set_tcam_mode(bus, &tcam_entries);
-		if (ret < 0)
-			goto out_free_tcam_infos;
-
-		list_for_each_entry(tcam_entry, &tcam_entries.head.list, list) {
-			ret = mv88e6321_set_tcam_entry(bus, tcam_entry);
-			if (ret < 0)
-				goto out_free_tcam_infos;
-		}
-	} else
-		ret = -ENODATA;
-
-	goto out_free_tcam_entries;
-
-out_free_tcam_infos:
-	mv88e6321_cleanup_tcam(mvinfo);
-out_free_tcam_entries:
-	list_for_each_entry_safe(tcam_entry, tcam_entry_tmp,
-				 &tcam_entries.head.list, list) {
-		list_del(&tcam_entry->list);
-		kfree(tcam_entry);
-	}
-out:
-	mutex_unlock(&mvinfo->tcam_lock);
-	pr_debug("%s ret: %d\n", __func__, ret);
-	return ret;
-}
-
-static int mv88e6321_sw_set_tcam(struct switch_dev *dev,
-				 const struct switch_attr *attr,
-				 struct switch_val *val)
-{
-	return mv88e6321_setup_tcam(dev->mii_bus, mvinfo->tcam_np);
-}
-
-static int mv88e6321_sw_get_tcam(struct switch_dev *dev,
-				 const struct switch_attr *attr,
-				 struct switch_val *val)
-{
-	int ret = 0;
-	struct mii_bus *bus = dev->mii_bus;
-	struct tcam_entry tcam_entry;
-
-	if (cur_tcam_id < 0 || cur_tcam_id > 255)
-		return -EINVAL;
-
-	memset(mvinfo->tcam_buf, 0, sizeof(mvinfo->tcam_buf));
-	memset(&tcam_entry, 0, sizeof(tcam_entry));
-
-	mutex_lock_interruptible(&mvinfo->tcam_lock);
-	ret = mv88e6321_get_tcam(bus, cur_tcam_id, &tcam_entry);
-	if (ret < 0)
-		goto out;
-
-	ret = mv88e6321_tcam_to_string(&tcam_entry, mvinfo->tcam_buf,
-				       sizeof(mvinfo->tcam_buf));
-	if (ret < 0)
-		goto out;
-
-	val->value.s = mvinfo->tcam_buf;
-out:
-	mutex_unlock(&mvinfo->tcam_lock);
-	return ret;
-}
-
-static int mv88e6321_sw_flush_tcam(struct switch_dev *dev,
-				   const struct switch_attr *attr,
-				   struct switch_val *val)
-{
-	int ret = 0;
-	struct mii_bus *bus = dev->mii_bus;
-	struct tcam_info *tcam_info = NULL, *tcam_info_tmp = NULL;
-
-	mutex_lock_interruptible(&mvinfo->tcam_lock);
-
-	if (cur_tcam_id < 0)
-		mv88e6321_cleanup_tcam(mvinfo);
-	else if (cur_tcam_id <= 255) {
-		list_for_each_entry_safe(tcam_info, tcam_info_tmp,
-					 &mvinfo->tcam_info_head.list, list) {
-			if (tcam_info->id == cur_tcam_id) {
-				mv88e6321_flush_tcam(bus, cur_tcam_id);
-				if (tcam_info->next_id >= 0)
-					mv88e6321_flush_tcam(bus,
-							     tcam_info->next_id);
-				device_remove_file(mvinfo->dev,
-						   &tcam_info->dev_attr);
-				list_del(&tcam_info->list);
-				kfree(tcam_info);
-				goto out;
-			}
-		}
-		ret = -EEXIST;
-	} else
-		ret = -EINVAL;
-
-out:
-	mutex_unlock(&mvinfo->tcam_lock);
-	return ret;
-}
-
-static int mv88e6321_sw_get_tcam_debug(struct switch_dev *dev,
-				       const struct switch_attr *attr,
-				       struct switch_val *val)
-{
-	int ret = 0;
-	struct mii_bus *bus = dev->mii_bus;
-
-	if (cur_tcam_id >= 0 && cur_tcam_id <= 255)
-		ret = mv88e6321_get_tcam_debug(bus, cur_tcam_id);
-	else
-		ret = -EINVAL;
-
-	if (ret >= 0) {
-		val->value.i = ret;
-		ret = 0;
-	}
-
-	return ret;
-}
-#endif
-
 static struct switch_attr mv88e6321_global_attrs[] = {
         {
                 .type = SWITCH_TYPE_NOVAL,
@@ -836,31 +487,6 @@ static struct switch_attr mv88e6321_global_attrs[] = {
                 .set = mv88e6321_sw_set_mdio_write,
                 .get = mv88e6321_sw_get_mdio_read,
         },
-#ifdef CONFIG_OF
-	{
-		.type = SWITCH_TYPE_INT,
-		.name = "tcam_id",
-		.description = "Read/Write TCAM id",
-		.set = mv88e6321_sw_set_tcam_id,
-		.get = mv88e6321_sw_get_tcam_id,
-	}, {
-		.type = SWITCH_TYPE_STRING,
-		.name = "tcam",
-		.description = "Read/Write TCAM entry to MV88e6321",
-		.set = mv88e6321_sw_set_tcam,
-		.get = mv88e6321_sw_get_tcam,
-	}, {
-		.type = SWITCH_TYPE_NOVAL,
-		.name = "tcam_flush",
-		.description = "Flush TCAM entry from MV88E6321",
-		.set = mv88e6321_sw_flush_tcam,
-	}, {
-		.type = SWITCH_TYPE_INT,
-		.name = "tcam_debug",
-		.description = "Read TCAM debug register",
-		.get = mv88e6321_sw_get_tcam_debug,
-	},
-#endif
 #ifdef CONFIG_NET_DSA_MV88E6XXX
         {
                 .type = SWITCH_TYPE_INT,
@@ -888,90 +514,6 @@ struct switch_dev_ops mv88e6321_switch_dev_ops = {
         .reset_switch = mv88e6321_sw_reset,
 };
 
-#ifdef CONFIG_OF
-
-static ssize_t show_tcam_dtb(struct device* dev, struct device_attribute *attr,
-			     char *buf)
-{
-	ssize_t ret = 0;
-	struct mv88e6321_info *pdata = dev->platform_data;
-
-	mutex_lock_interruptible(&pdata->tcam_lock);
-
-	if (pdata && pdata->tcam_fdt) {
-		size_t fdt_size = 0;
-		u32 *pos = pdata->tcam_fdt + 4;
-		fdt_size = le32_to_cpu(*pos);
-		pr_debug("fdt size %d\n", fdt_size);
-
-		if (fdt_size < 40 || fdt_size > PAGE_SIZE) {
-			dev_err(dev, "Invalid FDT size %d\n", fdt_size);
-			ret = -EINVAL;
-			goto out;
-		}
-
-		memcpy(buf, pdata->tcam_fdt, fdt_size);
-		ret = fdt_size;
-	}
-
-out:
-	mutex_unlock(&pdata->tcam_lock);
-	return ret;
-}
-
-static ssize_t store_tcam_dtb(struct device* dev, struct device_attribute *attr,
-			      const char *buf, size_t count)
-{
-	ssize_t ret = 0;
-	struct mv88e6321_info *pdata = dev->platform_data;
-
-	/* dtb should be smaller than PAGE_SIZE
-	 * because it will be showen. Maximum buffer
-	 * size in show function is PAGE_SIZE.
-	 * 40 byte it fdt header, so it is min size*/
-	if (count < 40 || count > PAGE_SIZE) {
-		dev_err(dev, "Invalid size of FDT (%d)\n", count);
-		ret = -EINVAL;
-		goto out;
-	}
-
-	mutex_lock_interruptible(&pdata->tcam_lock);
-
-	mv88e6321_cleanup_tcam(pdata);
-
-	pdata->tcam_fdt = devm_kzalloc(dev, count, GFP_KERNEL);
-
-	if (!pdata->tcam_fdt) {
-		dev_err(dev, "Couldn't allocate memory for fdt\n");
-		ret = -ENOMEM;
-		goto out_unlock;
-	}
-
-	memcpy(pdata->tcam_fdt, buf, count);
-
-	if (IS_ERR(of_fdt_unflatten_tree(pdata->tcam_fdt, NULL,
-					 &pdata->tcam_np))) {
-		dev_err(dev, "Unflatten device tree failed\n");
-		ret = -ENOMEM;
-		goto fdt_free_out;
-	}
-
-	ret = count;
-	goto out_unlock;
-
-fdt_free_out:
-	devm_kfree(dev, pdata->tcam_fdt);
-	pdata->tcam_fdt = NULL;
-out_unlock:
-	mutex_unlock(&pdata->tcam_lock);
-out:
-	return ret;
-}
-
-static DEVICE_ATTR(tcam_dtb, S_IWUSR | S_IRUGO, show_tcam_dtb, store_tcam_dtb);
-
-#endif
-
 static inline int mv88e6321_wait_atu_ready(struct mii_bus *bus)
 {
 	int ret = 0;
@@ -1239,16 +781,6 @@ static int mv88e6321_probe(struct platform_device *pdev)
 	mv88e6321_fns->nwrite = mv88e6321_smi_nwrite;
         mv88e6321_fns->setup_dflt_cfg = mv88e6321_setup_dflt_cfg;
 #endif
-#ifdef CONFIG_OF
-	INIT_LIST_HEAD(&pdata->tcam_info_head.list);
-	ret = device_create_file(&pdev->dev, &dev_attr_tcam_dtb);
-	if (ret) {
-		dev_err(&pdev->dev, "Couln't create device file %d\n", ret);
-		return ret;
-	}
-
-	mutex_init(&pdata->tcam_lock);
-#endif
 
 	ret = device_create_file(&pdev->dev, &dev_attr_atu_flush);
 	if (ret) {
@@ -1268,16 +800,8 @@ static int mv88e6321_probe(struct platform_device *pdev)
 
 static int mv88e6321_remove(struct platform_device *pdev)
 {
-#ifdef CONFIG_OF
 	struct mv88e6321_info *pdata = pdev->dev.platform_data;
-	mutex_lock_interruptible(&pdata->tcam_lock);
 
-	device_remove_file(&pdev->dev, &dev_attr_tcam_dtb);
-	mv88e6321_cleanup_tcam(pdata);
-
-	mutex_unlock(&pdata->tcam_lock);
-
-#endif
 	device_remove_file(&pdev->dev, &dev_attr_atu_flush);
 	unregister_switch(pdata->swdev);
 	return 0;
-- 
2.7.4

