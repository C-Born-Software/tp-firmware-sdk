From a62ce82bf3c8f6cb9607a39dcf245f97a5fb59c9 Mon Sep 17 00:00:00 2001
From: Christian Hohnstaedt <Christian.Hohnstaedt@wago.com>
Date: Wed, 25 Sep 2019 15:57:55 +0200
Subject: [PATCH] rmd: Always load RMD firmware

On every open() load the firmware and check it against
the currently running one in the RMD.
This only costs a couple of milliseconds and is only
executed once in a while, but testing of firmware loading
is much easier now.

Document firmware header chunks in an enum and use it
while parsing the firmware.
Reduce message output during firmware load.

If the firmware is not found, a message will be printed,
but the application may continue.

Signed-off-by: Christian Hohnstaedt <Christian.Hohnstaedt@wago.com>
---
 drivers/char/rmd.c | 115 ++++++++++++++++++++++++++++++-----------------------
 1 file changed, 65 insertions(+), 50 deletions(-)

diff --git a/drivers/char/rmd.c b/drivers/char/rmd.c
index 985721e..e195aea 100644
--- a/drivers/char/rmd.c
+++ b/drivers/char/rmd.c
@@ -31,7 +31,14 @@
 #define SARDTF_OFFS 0x10
 #define FIRMWARE_TYPE "rmd-01-01-f"
 #define DEFAULT_IMAGE FIRMWARE_TYPE "_reversed_rbf.img"
-#define NUM_HEADERS 4
+#define STAMP_FORMAT "YYYY-MM-ddThh:mm:ss"
+enum {
+	fw_hdr_version,
+	fw_hdr_type,
+	fw_hdr_stamp,
+	fw_hdr_data,
+	fw_hdr_max
+};
 
 static struct rmd_base_t {
 	int		major;
@@ -93,7 +100,6 @@ struct rmd {
 	unsigned int		irq;
 	unsigned long		is_open;
 	const char		*fw_name;
-	bool			fw_loaded;
 
 	struct rmd_info		*info;
 	struct gpio_desc	*nce;
@@ -130,6 +136,8 @@ struct rmd_info {
 
 struct rmd_firmware {
 	u32 datetime;
+	char version[16];
+	char stamp[sizeof(STAMP_FORMAT)];
 	size_t size;
 	/* Firmware must be 64 byte aligned to match SPI FIFO size */
 	u8 data[0] __aligned(64);
@@ -182,53 +190,61 @@ static struct rmd_firmware *parse_fw(struct device *dev,
 					const u8 *buf, size_t len)
 {
 	int i, l;
-	u32 datetime = 0;
-	struct rmd_firmware *rmd_fw = NULL;
-	static const char *const names[NUM_HEADERS] = {
-		"Version", "Type", "Stamp", NULL
-	};
+	struct rmd_firmware *rmd_fw;
 
-	if (!buf || len < 5 || buf[0] != NUM_HEADERS)
-		return rmd_fw;
+	if (!buf || len < 5 || buf[0] != fw_hdr_max)
+		return NULL;
 
-	for (i = 0, buf++, len--; len > 0 && i < NUM_HEADERS; i++) {
+	rmd_fw = kmalloc(sizeof(*rmd_fw) + len, GFP_KERNEL);
+	if (!rmd_fw)
+		return NULL;
+
+	for (i = 0, buf++, len--; len > 0 && i < fw_hdr_max; i++) {
 		l = buf[0] + (buf[1] << 8) + (buf[2] << 16) + (buf[3] << 24);
 
 		if (len < l+4)
-			return rmd_fw;
+			goto err_out;
 
 		buf += 4;
-		if (names[i])
-			dev_info(dev, "FW %s' = '%.*s'\n", names[i], l, buf);
-		else
-			dev_info(dev, "FW len = %d\n", l);
-
-		if (i == 1 && (l != sizeof(FIRMWARE_TYPE) - 1 ||
-				memcmp(buf, FIRMWARE_TYPE, l)))
-			return rmd_fw;
-
-		if (i == 2 && l == sizeof("YYYY-MM-ddThh:mm:ss") - 1) {
-			datetime = stamp_to_version(buf);
-			if (datetime == 0)
-				return NULL;
-		}
-		if (i == 3 && l == len - 4) {
-			rmd_fw = kmalloc(sizeof(*rmd_fw) + l, GFP_KERNEL);
-			if (!rmd_fw)
-				return NULL;
-			rmd_fw->datetime = datetime;
+		len -= 4;
+		switch (i) {
+		case fw_hdr_version:
+			if (l >= sizeof(rmd_fw->version))
+				goto err_out;
+			memcpy(rmd_fw->version, buf, l);
+			rmd_fw->version[l] = 0;
+			break;
+		case fw_hdr_type:
+			if (l != sizeof(FIRMWARE_TYPE) - 1 ||
+			    memcmp(buf, FIRMWARE_TYPE, l))
+				goto err_out;
+			break;
+		case fw_hdr_stamp:
+			if (l != sizeof(STAMP_FORMAT) -1)
+				goto err_out;
+			rmd_fw->datetime = stamp_to_version(buf);
+			if (rmd_fw->datetime == 0)
+				goto err_out;
+			memcpy(rmd_fw->stamp, buf, l);
+			rmd_fw->stamp[l] = 0;
+			break;
+		case fw_hdr_data:
+			if (l != len)
+				goto err_out;
 			rmd_fw->size = l;
 			memcpy(rmd_fw->data, buf, l);
+			break;
 		}
 		buf += l;
-		len -= l + 4;
-	}
-	if (len != 0) {
-		dev_err(dev, "Invalid firmware\n");
-		kfree(rmd_fw);
-		rmd_fw = NULL;
+		len -= l;
 	}
-	return rmd_fw;
+
+	if (len == 0 && i == fw_hdr_max)
+		return rmd_fw;
+err_out:
+	dev_err(dev, "Invalid firmware in header %d\n", i);
+	kfree(rmd_fw);
+	return NULL;
 }
 
 static int store_fw(struct rmd *rmd, const void *data, size_t len)
@@ -278,10 +294,6 @@ static int rmd_load_firmware(struct rmd *rmd)
 	gpiod_set_value_cansleep(rmd->nrst, 1);
 	mdelay(1);
 
-	if (rmd->fw_loaded)
-		return 0;
-
-	dev_info(rmd->dev, "Requesting firmware '%s'", rmd->fw_name);
 	ret = request_firmware(&fw, rmd->fw_name, rmd->dev);
 
 	if (ret < 0)
@@ -295,10 +307,13 @@ static int rmd_load_firmware(struct rmd *rmd)
 	datetime = ioread32(rmd->base + SARDTF_OFFS);
 
 	if (datetime == rmd_fw->datetime) {
-		dev_info(rmd->dev, "Firmware 0x%x up to date", datetime);
+		dev_info(rmd->dev, "Firmware up to date: %s (%08x)",
+				rmd_fw->stamp, rmd_fw->datetime);
 	} else {
-		dev_info(rmd->dev, "Updating RMD from 0x%x to 0x%x",
-					datetime, rmd_fw->datetime);
+		dev_info(rmd->dev, "Updating firmware (%zd bytes) to %s "
+				"%s (%08x) from %08x",
+				rmd_fw->size, rmd_fw->version,
+				rmd_fw->stamp, rmd_fw->datetime, datetime);
 		ret = store_fw(rmd, rmd_fw->data, rmd_fw->size);
 		for (i = 0; i < 100 && datetime != rmd_fw->datetime; i++) {
 			/* Wait for RMD to boot. It usually takes 100ms */
@@ -311,8 +326,6 @@ static int rmd_load_firmware(struct rmd *rmd)
 	}
 
 	kfree(rmd_fw);
-	rmd->fw_loaded = !ret;
-
 	return ret;
 }
 
@@ -684,10 +697,12 @@ static int rmd_open(struct inode *inode, struct file *filep)
 	}
 
 	if (rmd->nrst && rmd->nce && rmd->nconfig) {
-		if (rmd_load_firmware(rmd) < 0) {
-			clear_bit(0, &rmd->is_open);
-			return -ENODEV;
-		}
+		int ret = rmd_load_firmware(rmd);
+
+		if (ret < 0)
+			dev_warn(rmd->dev,
+				"Firmware loading failed with error %d. "
+				"Continuing anyway...\n", ret);
 	}
 
 	rmd->info = info;
-- 
2.7.4

