From 0721cd474008dc23538b389014823f69b0b6cf89 Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Fri, 5 Jul 2019 17:01:49 +0200
Subject: [PATCH] driver: net: swcfg: ksz8863: implement rate limiting

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/phy/ksz8863-cfg.c | 203 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 203 insertions(+)

diff --git a/drivers/net/phy/ksz8863-cfg.c b/drivers/net/phy/ksz8863-cfg.c
index 771f808..4705b88 100644
--- a/drivers/net/phy/ksz8863-cfg.c
+++ b/drivers/net/phy/ksz8863-cfg.c
@@ -17,12 +17,15 @@
 
 #define DRIVER_NAME "ksz8863-cfg"
 
+#define KSZ8863_CFG_VAL_BUF_SIZE 200
+
 struct ksz8863_cfg {
 	struct switch_dev swdev;
 	struct device *dev;
 	u32 sw_addr;
 	struct ksz8863_chip *chip;
 	struct mii_bus *mii_bus;
+	char buf_ratelimit[KSZ8863_CFG_VAL_BUF_SIZE];
 };
 
 #define get_ksz8863_cfg(_dev) container_of((_dev), struct ksz8863_cfg, swdev)
@@ -47,6 +50,18 @@ static inline void ksz8863_reg_unlock(struct ksz8863_cfg *cfg)
 	mutex_unlock(&cfg->chip->reg_lock);
 }
 
+static void ksz8863_cfg_set_str_val(struct switch_val *val, char buf[],
+				    size_t size, const char *fmt, ...)
+{
+	va_list args;
+
+	va_start(args, fmt);
+	val->len = vsnprintf(buf, size, fmt, args);
+	va_end(args);
+
+	val->value.s = buf;
+}
+
 static inline int ksz8863_cfg_set_bit(struct ksz8863_cfg *cfg, int reg, u8 mask,
 				      bool val, bool lock)
 {
@@ -283,6 +298,186 @@ static int ksz8863_cfg_get_bcast_protect(struct switch_dev *dev,
 	return err;
 }
 
+static int ksz8863_cfg_parse_ratelimit(const char *value, int *rate_limit,
+				       bool *mode_mbps)
+{
+	char modestr[5] = {0};
+
+	if (!strncmp(value, "off", 3)) {
+		*rate_limit = -1;
+		return 0;
+	}
+
+	if (sscanf(value, "%d.%4s", rate_limit, modestr) != 2)
+		return -EINVAL;
+
+	if (!strcmp(modestr, "mbps"))
+		*mode_mbps = true;
+	else if (!strcmp(modestr, "kbps"))
+		*mode_mbps = false;
+	else
+		return -EINVAL;
+
+	return 0;
+}
+
+static int ksz8863_cfg_get_egress_rate(struct ksz8863_cfg *cfg, bool mode_mbps,
+				       int rate_limit, u8 *reg)
+{
+	bool mode_10bt;
+	int rate_start, rate_stop;
+
+	mode_10bt = is_ksz8863_cfg_10bt(cfg);
+
+	if (rate_limit < 0) {
+		*reg = 0;
+	} else if (mode_mbps) {
+		rate_start = 0;
+		rate_stop = mode_10bt ? 10 : 100;
+
+		if (rate_limit < rate_start || rate_limit > rate_stop)
+			return -EINVAL;
+
+		*reg = rate_limit;
+	} else {
+		const int rate_step = 64;
+
+		rate_start = rate_step;
+		rate_stop = 960;
+
+		if (rate_limit < rate_start || rate_limit > rate_stop ||
+		    (rate_limit % rate_step))
+			return -EINVAL;
+
+		*reg = 0x64 + (rate_limit / rate_step);
+	}
+
+	return 0;
+}
+
+static int ksz8863_cfg_set_ratelimit(struct switch_dev *dev,
+				     const struct switch_attr *attr,
+				     struct switch_val *val)
+{
+	int err;
+	u8 reg;
+	bool mode_mbps;
+	int rate_limit;
+	u8 p3_erl_q;
+	struct ksz8863_cfg *cfg;
+
+	cfg = get_ksz8863_cfg(dev);
+	if (!cfg)
+		return -ENODEV;
+
+	err = ksz8863_cfg_parse_ratelimit(val->value.s, &rate_limit,
+					  &mode_mbps);
+	if (err)
+		return err;
+
+	if (rate_limit < 0) {
+		/* disable ratelimit */
+		err = ksz8863_cfg_set_bit(cfg, KSZ8863_REG_PORT3_EGRESS_RL_Q0,
+					  KSZ8863_REG_PORT_EGRESS_RL_Q0_ENABLE,
+					  false, true);
+
+		if (!err)
+			dev_info(cfg->dev, "disable rate limiting");
+
+		return err;
+	}
+
+	ksz8863_reg_lock(cfg);
+
+	err = ksz8863_cfg_get_egress_rate(cfg, mode_mbps, rate_limit, &reg);
+	if (err)
+		goto out_unlock;
+
+	for (p3_erl_q = KSZ8863_REG_PORT3_EGRESS_RL_Q3;
+	     p3_erl_q != KSZ8863_REG_PORT3_EGRESS_RL_Q1;
+	     p3_erl_q--) {
+		err = ksz8863_cfg_smi_write(cfg, p3_erl_q, reg);
+		if (err)
+			goto out_unlock;
+	}
+
+	err = ksz8863_cfg_smi_write(cfg, KSZ8863_REG_PORT3_EGRESS_RL_Q0,
+				    reg | KSZ8863_REG_PORT_EGRESS_RL_Q0_ENABLE);
+
+	if (!err)
+		dev_info(cfg->dev, "enable rate limiting");
+
+out_unlock:
+	ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
+static int ksz8863_cfg_get_ratelimit(struct switch_dev *dev,
+				     const struct switch_attr *attr,
+				     struct switch_val *val)
+{
+	int err;
+	u8 reg, rate_reg;
+	struct ksz8863_cfg *cfg;
+	int rate = -1;
+	bool mode_10bt;
+	int rate_stop;
+	char *modestr = "none";
+
+	cfg = get_ksz8863_cfg(dev);
+	if (!cfg)
+		return -ENODEV;
+
+	ksz8863_reg_lock(cfg);
+
+	/* we take just the first queue of port 3 */
+	err = ksz8863_cfg_smi_read(cfg, KSZ8863_REG_PORT3_EGRESS_RL_Q0, &reg);
+	if (err)
+		goto out_unlock;
+
+	if (!(reg & KSZ8863_REG_PORT_EGRESS_RL_Q0_ENABLE)) {
+		ksz8863_cfg_set_str_val(val, cfg->buf_ratelimit,
+					sizeof(cfg->buf_ratelimit), "disabled");
+		ksz8863_reg_unlock(cfg);
+		return 0;
+	}
+
+	rate_reg = reg & KSZ8863_REG_PORT_EGRESS_RL_MASK;
+
+	mode_10bt = is_ksz8863_cfg_10bt(cfg);
+
+	rate_stop = mode_10bt ? 10 : 100;
+
+	if (rate_reg <= rate_stop) {
+		modestr = "mbps";
+		/* 0 is equal to 10/100 mbps */
+		if (!rate_reg || rate_reg == rate_stop)
+			rate = rate_stop;
+		else
+			rate = rate_reg;
+	} else if (rate_reg <= 0x73) {
+		modestr = "kbps";
+		rate = 64 * (rate_reg - 0x64);
+	}
+
+	if (!strcmp(modestr, "none") || rate < 0) {
+		ksz8863_cfg_set_str_val(val, cfg->buf_ratelimit,
+					sizeof(cfg->buf_ratelimit), "invalid");
+		err = -EINVAL;
+		goto out_unlock;
+	}
+
+	ksz8863_cfg_set_str_val(val, cfg->buf_ratelimit,
+				sizeof(cfg->buf_ratelimit), "%d.%s", rate,
+				modestr);
+
+out_unlock:
+	ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
 static struct switch_attr ksz8863_cfg_global_attrs[] = {
 	{
 		.type = SWITCH_TYPE_INT,
@@ -291,6 +486,14 @@ static struct switch_attr ksz8863_cfg_global_attrs[] = {
 			" (0..20) for Port 1 & 2. '0' will disable protection",
 		.set = ksz8863_cfg_set_bcast_protect,
 		.get = ksz8863_cfg_get_bcast_protect,
+	}, {
+		.type = SWITCH_TYPE_STRING,
+		.name = "rate_limit",
+		.description = "Enables rate limiting on egress"
+			" Port3(CPU-Ingress), format='50.mbps'/'64.kbps'. 'off'"
+			" will disable rate limiting.",
+		.set = ksz8863_cfg_set_ratelimit,
+		.get = ksz8863_cfg_get_ratelimit,
 	},
 };
 
-- 
2.7.4

