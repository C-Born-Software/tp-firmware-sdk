From 4bd642ce8d916ade5b612326f090bdd8cbb2948e Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Mon, 18 May 2015 14:11:02 +0200
Subject: [PATCH] gpio-keys: replace shared workqueue with rt kthread worker

* 3.18 version contributed by Oleg Karfich
* ported to v4.9 kernel

Signed-off-by: Boerje Sewing <Boerje.Sewing@who-ing.de>
---
 drivers/input/keyboard/gpio_keys.c | 69 ++++++++++++++++++++++++++++----------
 1 file changed, 52 insertions(+), 17 deletions(-)

diff --git a/drivers/input/keyboard/gpio_keys.c b/drivers/input/keyboard/gpio_keys.c
index 9b8079c..df320ef 100644
--- a/drivers/input/keyboard/gpio_keys.c
+++ b/drivers/input/keyboard/gpio_keys.c
@@ -24,7 +24,7 @@
 #include <linux/platform_device.h>
 #include <linux/input.h>
 #include <linux/gpio_keys.h>
-#include <linux/workqueue.h>
+#include <linux/kthread.h>
 #include <linux/gpio.h>
 #include <linux/gpio/consumer.h>
 #include <linux/of.h>
@@ -33,17 +33,16 @@
 #include <linux/of_irq.h>
 #include <linux/spinlock.h>
 
+#define GPIO_KEYS_KWORKER_PRIO        90
+
 struct gpio_button_data {
 	const struct gpio_keys_button *button;
 	struct input_dev *input;
 	struct gpio_desc *gpiod;
-
 	struct timer_list release_timer;
 	unsigned int release_delay;	/* in msecs, for IRQ-only buttons */
-
-	struct delayed_work work;
+	struct kthread_work kwork;
 	unsigned int software_debounce;	/* in msecs, for GPIO-driven buttons */
-
 	unsigned int irq;
 	spinlock_t lock;
 	bool disabled;
@@ -54,6 +53,8 @@ struct gpio_keys_drvdata {
 	const struct gpio_keys_platform_data *pdata;
 	struct input_dev *input;
 	struct mutex disable_lock;
+	struct kthread_worker irq_kworker;      /* kthread worker high prio post-actions */
+	struct task_struct *irq_kworker_task;   /* task for irq_kworker */
 	struct gpio_button_data data[0];
 };
 
@@ -142,9 +143,7 @@ static void gpio_keys_disable_button(struct gpio_button_data *bdata)
 		 */
 		disable_irq(bdata->irq);
 
-		if (bdata->gpiod)
-			cancel_delayed_work_sync(&bdata->work);
-		else
+		if (bdata->software_debounce)
 			del_timer_sync(&bdata->release_timer);
 
 		bdata->disabled = true;
@@ -378,10 +377,10 @@ static void gpio_keys_gpio_report_event(struct gpio_button_data *bdata)
 	input_sync(input);
 }
 
-static void gpio_keys_gpio_work_func(struct work_struct *work)
+static void gpio_keys_gpio_work_func(struct kthread_work *work)
 {
 	struct gpio_button_data *bdata =
-		container_of(work, struct gpio_button_data, work.work);
+		container_of(work, struct gpio_button_data, kwork);
 
 	gpio_keys_gpio_report_event(bdata);
 
@@ -389,18 +388,30 @@ static void gpio_keys_gpio_work_func(struct work_struct *work)
 		pm_relax(bdata->input->dev.parent);
 }
 
+static void gpio_keys_gpio_timer(unsigned long _data)
+{
+	struct gpio_button_data *bdata = (struct gpio_button_data *)_data;
+	struct input_dev *input = bdata->input;
+	struct gpio_keys_drvdata *ddata = input_get_drvdata(input);
+
+        kthread_queue_work(&ddata->irq_kworker, &bdata->kwork);
+}
+
 static irqreturn_t gpio_keys_gpio_isr(int irq, void *dev_id)
 {
 	struct gpio_button_data *bdata = dev_id;
+	struct input_dev *input = bdata->input;
+	struct gpio_keys_drvdata *ddata = input_get_drvdata(input);
 
 	BUG_ON(irq != bdata->irq);
 
 	if (bdata->button->wakeup)
 		pm_stay_awake(bdata->input->dev.parent);
-
-	mod_delayed_work(system_wq,
-			 &bdata->work,
-			 msecs_to_jiffies(bdata->software_debounce));
+	if (bdata->software_debounce)
+		mod_timer(&bdata->release_timer,
+				msecs_to_jiffies(bdata->software_debounce));
+	else
+		kthread_queue_work(&ddata->irq_kworker, &bdata->kwork);
 
 	return IRQ_HANDLED;
 }
@@ -460,7 +471,7 @@ static void gpio_keys_quiesce_key(void *data)
 	struct gpio_button_data *bdata = data;
 
 	if (bdata->gpiod)
-		cancel_delayed_work_sync(&bdata->work);
+		kthread_flush_work(&bdata->kwork);
 	else
 		del_timer_sync(&bdata->release_timer);
 }
@@ -526,7 +537,9 @@ static int gpio_keys_setup_key(struct platform_device *pdev,
 			bdata->irq = irq;
 		}
 
-		INIT_DELAYED_WORK(&bdata->work, gpio_keys_gpio_work_func);
+		kthread_init_work(&bdata->kwork, gpio_keys_gpio_work_func);
+		setup_timer(&bdata->release_timer,
+			    gpio_keys_gpio_timer, (unsigned long)bdata);
 
 		isr = gpio_keys_gpio_isr;
 		irqflags = IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING;
@@ -573,7 +586,7 @@ static int gpio_keys_setup_key(struct platform_device *pdev,
 		irqflags |= IRQF_SHARED;
 
 	error = devm_request_any_context_irq(&pdev->dev, bdata->irq,
-					     isr, irqflags, desc, bdata);
+					     isr, irqflags | IRQF_THREAD_TBL_LOOKUP, desc, bdata);
 	if (error < 0) {
 		dev_err(dev, "Unable to claim irq %d; error %d\n",
 			bdata->irq, error);
@@ -743,6 +756,8 @@ static int gpio_keys_probe(struct platform_device *pdev)
 	int i, error;
 	int wakeup = 0;
 
+	struct sched_param kwork_param = { .sched_priority = GPIO_KEYS_KWORKER_PRIO };
+
 	if (!pdata) {
 		pdata = gpio_keys_get_devtree_pdata(dev);
 		if (IS_ERR(pdata))
@@ -785,6 +800,16 @@ static int gpio_keys_probe(struct platform_device *pdev)
 	if (pdata->rep)
 		__set_bit(EV_REP, input->evbit);
 
+	/* intialize kworker thread */
+	kthread_init_worker(&ddata->irq_kworker);
+	ddata->irq_kworker_task = kthread_run(kthread_worker_fn, &ddata->irq_kworker, "kworker/gpiokey");
+	if (IS_ERR(ddata->irq_kworker_task)) {
+		dev_err(dev, "Could not create gpio-keys kthread, error: %ld\n", PTR_ERR(ddata->irq_kworker_task));
+		platform_set_drvdata(pdev, NULL);
+		goto err_kill_worker;
+	}
+	sched_setscheduler(ddata->irq_kworker_task, SCHED_FIFO, &kwork_param);
+
 	for (i = 0; i < pdata->nbuttons; i++) {
 		const struct gpio_keys_button *button = &pdata->buttons[i];
 		struct gpio_button_data *bdata = &ddata->data[i];
@@ -815,6 +840,10 @@ static int gpio_keys_probe(struct platform_device *pdev)
 
 	return 0;
 
+err_kill_worker:
+	kthread_flush_worker(&ddata->irq_kworker);
+	kthread_stop(ddata->irq_kworker_task);
+
 err_remove_group:
 	sysfs_remove_group(&pdev->dev.kobj, &gpio_keys_attr_group);
 	return error;
@@ -822,10 +851,16 @@ static int gpio_keys_probe(struct platform_device *pdev)
 
 static int gpio_keys_remove(struct platform_device *pdev)
 {
+	struct gpio_keys_drvdata *ddata = platform_get_drvdata(pdev);
+
 	sysfs_remove_group(&pdev->dev.kobj, &gpio_keys_attr_group);
 
 	device_init_wakeup(&pdev->dev, 0);
 
+	 /* kill worker */
+	kthread_flush_worker(&ddata->irq_kworker);
+	kthread_stop(ddata->irq_kworker_task);
+
 	return 0;
 }
 
-- 
2.7.4

