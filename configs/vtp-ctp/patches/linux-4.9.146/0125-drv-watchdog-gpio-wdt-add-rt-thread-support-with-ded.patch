From 9805a0ef4cc3572353a0566858a3c1a9791b2484 Mon Sep 17 00:00:00 2001
From: Andre Nahrwold <andre.nahrwold@wago.com>
Date: Mon, 12 Jun 2017 10:20:55 +0200
Subject: [PATCH] drv: watchdog: gpio-wdt: add rt thread support with dedicated
 rt-property from oftree

-> use usleep_range in thread, to be called from hrtimer context
-> fix calculating the right sleep range in usecs
-> moves thread creating to the starting of the watchdog
---
 arch/arm/boot/dts/wago-pfc100.dtsi   |  2 ++
 arch/arm/boot/dts/wago-pfc200.dtsi   |  2 ++
 arch/arm/boot/dts/wago-pfc200v2.dtsi |  2 ++
 arch/arm/boot/dts/wago-pfc200v3.dtsi |  2 ++
 drivers/watchdog/gpio_wdt.c          | 60 +++++++++++++++++++++++++++++++++---
 5 files changed, 64 insertions(+), 4 deletions(-)

diff --git a/arch/arm/boot/dts/wago-pfc100.dtsi b/arch/arm/boot/dts/wago-pfc100.dtsi
index 56cd9e5..114a5604 100644
--- a/arch/arm/boot/dts/wago-pfc100.dtsi
+++ b/arch/arm/boot/dts/wago-pfc100.dtsi
@@ -145,6 +145,8 @@
 		hw_algo = "toggle";
 		hw_margin_ms = <1600>;
 		status = "okay";
+
+		rt-prio = <99>;
 	};
 };
 
diff --git a/arch/arm/boot/dts/wago-pfc200.dtsi b/arch/arm/boot/dts/wago-pfc200.dtsi
index 1a88a98..4acc7eb 100644
--- a/arch/arm/boot/dts/wago-pfc200.dtsi
+++ b/arch/arm/boot/dts/wago-pfc200.dtsi
@@ -274,6 +274,8 @@
 		hw_algo = "toggle";
 		hw_margin_ms = <1600>;
 		status = "okay";
+
+		rt-prio = <99>;
 	};
 };
 
diff --git a/arch/arm/boot/dts/wago-pfc200v2.dtsi b/arch/arm/boot/dts/wago-pfc200v2.dtsi
index df36c89..06afca0 100644
--- a/arch/arm/boot/dts/wago-pfc200v2.dtsi
+++ b/arch/arm/boot/dts/wago-pfc200v2.dtsi
@@ -131,6 +131,8 @@
 		hw_algo = "toggle";
 		hw_margin_ms = <1600>;
 		status = "okay";
+
+		rt-prio = <99>;
 	};
 };
 
diff --git a/arch/arm/boot/dts/wago-pfc200v3.dtsi b/arch/arm/boot/dts/wago-pfc200v3.dtsi
index 7fd4aaf..5d4cee5 100644
--- a/arch/arm/boot/dts/wago-pfc200v3.dtsi
+++ b/arch/arm/boot/dts/wago-pfc200v3.dtsi
@@ -127,6 +127,8 @@
 		hw_algo = "toggle";
 		hw_margin_ms = <1600>;
 		status = "okay";
+
+		rt-prio = <99>;
 	};
 };
 
diff --git a/drivers/watchdog/gpio_wdt.c b/drivers/watchdog/gpio_wdt.c
index e8cc908..46cd245 100644
--- a/drivers/watchdog/gpio_wdt.c
+++ b/drivers/watchdog/gpio_wdt.c
@@ -14,6 +14,7 @@
 #include <linux/module.h>
 #include <linux/of_gpio.h>
 #include <linux/platform_device.h>
+#include <linux/kthread.h>
 #include <linux/watchdog.h>
 
 #define SOFT_TIMEOUT_MIN	1
@@ -28,6 +29,7 @@ enum {
 struct gpio_wdt_priv {
 	int			gpio;
 	int			gpio_en;
+	int			rt_prio;
 	bool			active_low;
 	bool			active_low_en;
 	bool			state;
@@ -37,6 +39,7 @@ struct gpio_wdt_priv {
 	unsigned int		hw_margin;
 	unsigned long		last_jiffies;
 	struct timer_list	timer;
+	struct task_struct	*thread;
 	struct watchdog_device	wdd;
 };
 
@@ -71,7 +74,8 @@ static void gpio_wdt_hwping(unsigned long data)
 	}
 
 	/* Restart timer */
-	mod_timer(&priv->timer, jiffies + priv->hw_margin);
+	if (priv->rt_prio == -1)
+		mod_timer(&priv->timer, jiffies + priv->hw_margin);
 
 	switch (priv->hw_algo) {
 	case HW_ALGO_TOGGLE:
@@ -90,8 +94,31 @@ static void gpio_wdt_hwping(unsigned long data)
 	}
 }
 
+static int gpio_wdt_thread(void *data)
+{
+	struct watchdog_device *wdd = data;
+	struct gpio_wdt_priv *priv = watchdog_get_drvdata(wdd);
+	unsigned long min_range = jiffies_to_usecs(priv->hw_margin);
+	unsigned long max_range = min_range;
+	unsigned long range_diff = 0;
+
+	/* +/- 5% */
+	range_diff = min_range / 100 * 5;
+	min_range -= range_diff;
+	max_range += range_diff;
+
+	while (!kthread_should_stop()) {
+		gpio_wdt_hwping((unsigned long)wdd);
+		usleep_range(min_range, max_range);
+	}
+
+	return 0;
+}
+
 static void gpio_wdt_start_impl(struct gpio_wdt_priv *priv)
 {
+	struct sched_param sched_params = { .sched_priority = priv->rt_prio };
+
 	/* Turn the WDT on if supported by HW */
 	if (gpio_is_valid(priv->gpio_en)) {
 		pr_debug("%s-%d\n", __func__, __LINE__);
@@ -103,6 +130,13 @@ static void gpio_wdt_start_impl(struct gpio_wdt_priv *priv)
 	priv->last_jiffies = jiffies;
 	gpio_wdt_hwping((unsigned long)&priv->wdd);
 
+	if (priv->rt_prio > -1) {
+		priv->thread = kthread_run(gpio_wdt_thread, &priv->wdd,
+					"gpio-wdt-rt");
+
+		sched_setscheduler(priv->thread, SCHED_FIFO, &sched_params);
+	}
+
 	pr_debug("%s-%d\n", __func__, __LINE__);
 }
 
@@ -122,7 +156,11 @@ static int gpio_wdt_stop(struct watchdog_device *wdd)
 
 	priv->armed = false;
 	if (!priv->always_running) {
-                mod_timer_pending(&priv->timer, 0);
+		if (priv->rt_prio == -1)
+			mod_timer_pending(&priv->timer, 0);
+		else
+			kthread_stop(priv->thread);
+
 		gpio_wdt_disable(priv);
 	}
 
@@ -231,6 +269,14 @@ static int gpio_wdt_probe(struct platform_device *pdev)
 	priv->always_running = of_property_read_bool(pdev->dev.of_node,
 						     "always-running");
 
+	/* read the property for rt mode */
+	ret = of_property_read_s32(pdev->dev.of_node, "rt-prio",
+					&priv->rt_prio);
+	if (ret < 0)
+		priv->rt_prio = -1;
+	else if (priv->rt_prio < 0 || priv->rt_prio >= MAX_RT_PRIO)
+		return -EINVAL;
+
 	watchdog_set_drvdata(&priv->wdd, priv);
 
 	priv->wdd.info		= &gpio_wdt_ident;
@@ -242,7 +288,9 @@ static int gpio_wdt_probe(struct platform_device *pdev)
 	if (watchdog_init_timeout(&priv->wdd, 0, &pdev->dev) < 0)
 		priv->wdd.timeout = SOFT_TIMEOUT_DEF;
 
-	setup_timer(&priv->timer, gpio_wdt_hwping, (unsigned long)&priv->wdd);
+	if (priv->rt_prio == -1)
+		setup_timer(&priv->timer, gpio_wdt_hwping,
+				(unsigned long)&priv->wdd);
 
 	watchdog_stop_on_reboot(&priv->wdd);
 
@@ -260,7 +308,11 @@ static int gpio_wdt_remove(struct platform_device *pdev)
 {
 	struct gpio_wdt_priv *priv = platform_get_drvdata(pdev);
 
-	del_timer_sync(&priv->timer);
+	if (priv->rt_prio == -1)
+		del_timer_sync(&priv->timer);
+	else
+		kthread_stop(priv->thread);
+
 	watchdog_unregister_device(&priv->wdd);
 
 	return 0;
-- 
2.7.4

