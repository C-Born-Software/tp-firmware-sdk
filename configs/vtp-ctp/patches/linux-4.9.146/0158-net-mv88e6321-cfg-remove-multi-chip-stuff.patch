From 594389fabb305425864dd5675d0f9d84b09f7ab5 Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Tue, 27 Feb 2018 14:43:47 +0100
Subject: [PATCH] net: mv88e6321-cfg: remove multi chip stuff

MV88E6321 is set to single chip mode now. This patch remove
multi chip communication functions. Also this patch set
"PHY-detect" bit for external PHYs in setup_dflt function.

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/phy/mv88e6321-cfg.c | 219 +++-------------------------------------
 1 file changed, 15 insertions(+), 204 deletions(-)

diff --git a/drivers/net/phy/mv88e6321-cfg.c b/drivers/net/phy/mv88e6321-cfg.c
index 6631c8a..a486607 100644
--- a/drivers/net/phy/mv88e6321-cfg.c
+++ b/drivers/net/phy/mv88e6321-cfg.c
@@ -37,20 +37,16 @@
 
 #define DFLT_CFG_FLAGS                  MV88E6321_CFG_PWRDOWN_FLAG
 
-#define MV88E6321_SW_ADDR		0x6
 #define MV88E6321_SW_PORT0_REG		0x10
 #define MV88E6321_SW_PORT1_REG		0x11
 #define MV88E6321_SW_PORT3_REG		0x13
 #define MV88E6321_SW_PORT4_REG		0x14
 
+#define MV88E6321_EXTERNAL_PHY0		0x0
+#define MV88E6321_EXTERNAL_PHY1		0x1
 #define MV88E6321_INTERNAL_PHY3		0x3
 #define MV88E6321_INTERNAL_PHY4		0x4
 
-#define EXT_PHY_PORT0_SMI_ADDR		0x2
-#define EXT_PHY_PORT1_SMI_ADDR		0x5
-#define EXT_PHY_PORT0_SWITCH_REG	0x10
-#define EXT_PHY_PORT1_SWITCH_REG	0x11
-
 #define EXT_PHY_STD_CTRL			0x0
 #define EXT_PHY_STD_CTRL_RESTART_AUTONEG	BIT(9)
 #define EXT_PHY_STD_CTRL_POWER_DOWN		BIT(11)
@@ -126,109 +122,6 @@ static int mv88e6321_sw_get_mdio_read(struct switch_dev *dev,
         return 0;
 }
 
-static int mv88e6321_sw_multi_chip_wait(struct switch_dev *dev)
-{
-	int ret;
-	int i;
-
-	for (i = 0; i < 16; i++) {
-		ret = mdiobus_read_nested(dev->mii_bus, 6, SMI_CMD);
-		if (ret < 0)
-			return ret;
-
-		if ((ret & SMI_CMD_BUSY) == 0)
-			return 0;
-	}
-
-	return -ETIMEDOUT;
-}
-
-static int mv88e6321_sw_multi_chip_write(struct switch_dev *dev,
-					int sw_addr, int addr,
-					int reg, u16 val)
-{
-	int ret;
-
-	/* Wait for the bus to become free. */
-	ret = mv88e6321_sw_multi_chip_wait(dev);
-	if (ret < 0)
-		return ret;
-
-	/* Transmit the data to write. */
-	ret = mdiobus_write_nested(dev->mii_bus, sw_addr, SMI_DATA, val);
-	if (ret < 0)
-		return ret;
-
-	/* Transmit the write command. */
-	ret = mdiobus_write_nested(dev->mii_bus, sw_addr, SMI_CMD,
-				   SMI_CMD_OP_22_WRITE | (addr << 5) | reg);
-	if (ret < 0)
-		return ret;
-
-	/* Wait for the write command to complete. */
-	ret = mv88e6321_sw_multi_chip_wait(dev);
-	if (ret < 0)
-		return ret;
-
-	return 0;
-}
-static int mv88e6321_sw_get_mdio_multi_write(struct switch_dev *dev,
-				      const struct switch_attr *attr,
-				      struct switch_val *val)
-{
-	return mv88e6321_sw_multi_chip_write(dev, MV88E6321_SW_ADDR, cur_phy_reg,
-					cur_reg, val->value.i);
-}
-
-static int mv88e6321_sw_multi_chip_read(struct switch_dev *dev,
-					int sw_addr, int addr,
-					int reg, u16 *val)
-{
-	int ret;
-
-	/* Wait for the bus to become free. */
-	ret = mv88e6321_sw_multi_chip_wait(dev);
-	if (ret < 0)
-		return ret;
-
-
-	/* Transmit the read command. */
-	ret = mdiobus_write_nested(dev->mii_bus, sw_addr, SMI_CMD,
-				   SMI_CMD_OP_22_READ | (addr << 5) | reg);
-	if (ret < 0)
-		return ret;
-
-	/* Wait for the read command to complete. */
-	ret = mv88e6321_sw_multi_chip_wait(dev);
-	if (ret < 0)
-		return ret;
-
-	/* Read the data. */
-	ret = mdiobus_read_nested(dev->mii_bus, sw_addr, SMI_DATA);
-	if (ret < 0)
-		return ret;
-
-	*val = ret & 0xffff;
-
-	return 0;
-}
-
-static int mv88e6321_sw_get_mdio_multi_read(struct switch_dev *dev,
-				      const struct switch_attr *attr,
-				      struct switch_val *val)
-{
-	int ret;
-	u16 reg_val;
-	ret = mv88e6321_sw_multi_chip_read(dev, MV88E6321_SW_ADDR, cur_phy_reg,
-					cur_reg, &reg_val);
-	val->value.i = reg_val & 0xffffffff;
-
-	pr_debug("mdiobus_read: phy 0x%02x, reg 0x%02x, val 0x%04x\n",
-		 cur_phy_reg, cur_reg, val->value.i);
-
-	return ret;
-}
-
 static inline int mv88e6321_sw_reset(struct switch_dev *dev)
 {
         return mv88e6321_soft_reset();
@@ -293,101 +186,25 @@ static int mv88e6321_sw_force_speed_internal_phys(struct switch_dev *dev,
 	return ret;
 }
 
-static int mv88e6321_sw_force_speed_external_phys(struct switch_dev *dev,
-					int ext_phy_addr, int sw_port_addr)
-{
-	u16 reg_val;
-	int ret;
-
-	/* 1.Extern PHY Register 0x00 bit[11] = 1 Power Down */
-        reg_val = mdiobus_read(global_chip->bus, ext_phy_addr,
-			EXT_PHY_STD_CTRL);
-
-	ret = mdiobus_write(global_chip->bus, ext_phy_addr, EXT_PHY_STD_CTRL,
-			(reg_val | EXT_PHY_STD_CTRL_POWER_DOWN));
-	if (ret < 0)
-		goto out;
-
-	/* 2.Extern PHY Register 0x09 bit[9:0] = 00  Disable 1000BASE-T */
-        reg_val = mdiobus_read(global_chip->bus, ext_phy_addr, EXT_STD_GCTRL);
-	ret = mdiobus_write(global_chip->bus, ext_phy_addr, EXT_STD_GCTRL,
-			(reg_val & ~(EXT_STD_GCTRL_DUPLEX_MASK)));
-	if (ret < 0)
-		goto out;
-
-	/* 3.Switch Register – Port Staus 0x00  bit 12=0 PHY Detect  */
-	ret = global_chip->smi_ops->read(global_chip, sw_port_addr, PORT_STATUS,
-				&reg_val);
-	if (ret < 0) {
-		goto out;
-	}
-
-	reg_val = (reg_val & ~(PORT_STATUS_PHY_DETECT));
-	ret = global_chip->smi_ops->write(global_chip, sw_port_addr, PORT_STATUS,
-				reg_val);
-	if (ret < 0)
-		goto out;
-
-	/* 4.Switch Register- Physical Control 0x01- ForceSpeed bit[1:0] = 0b01 */
-	ret = global_chip->smi_ops->read(global_chip, sw_port_addr, PORT_PCS_CTRL,
-				&reg_val);
-	if (ret < 0)
-		goto out;
-
-	reg_val &= ~(PORT_PCS_CTRL_100<<1);
-	ret = global_chip->smi_ops->write(global_chip, sw_port_addr, PORT_PCS_CTRL,
-				reg_val);
-	if (ret < 0)
-		goto out;
-
-	/* 5.Switch Register – Port Status 0x00  bit 12=1 PHY Detect */
-	ret = global_chip->smi_ops->read(global_chip, sw_port_addr, PORT_STATUS,
-				&reg_val);
-	if (ret < 0)
-		goto out;
-
-	reg_val |= PORT_STATUS_PHY_DETECT;
-	ret = global_chip->smi_ops->write(global_chip, sw_port_addr, PORT_STATUS,
-				reg_val);
-	if (ret < 0)
-		goto out;
-
-	/* 6.Extern PHY Register 0x00 bit[9] = 1 Restart Auto Negotiation */
-        reg_val = mdiobus_read(global_chip->bus, ext_phy_addr, EXT_PHY_STD_CTRL);
-
-	ret = mdiobus_write(global_chip->bus, ext_phy_addr, EXT_PHY_STD_CTRL,
-			(reg_val | EXT_PHY_STD_CTRL_RESTART_AUTONEG));
-	if (ret < 0)
-		goto out;
-
-	/* 7.Extern PHY Register 0x00 bit[11] = 0 Power Down */
-        reg_val = mdiobus_read(global_chip->bus, ext_phy_addr,
-			EXT_PHY_STD_CTRL);
-
-	ret = mdiobus_write(global_chip->bus, ext_phy_addr, EXT_PHY_STD_CTRL,
-			(reg_val & ~EXT_PHY_STD_CTRL_POWER_DOWN));
-	if (ret < 0)
-		goto out;
-out:
-
-	return ret;
-}
-
 static int mv88e6321_sw_setup_dflt_cfg(struct switch_dev *dev,
                                      const struct switch_attr *attr,
                                      struct switch_val *val)
 {
-	int ret;
+	int ret, i;
 
-	ret = mv88e6321_sw_force_speed_external_phys(dev, EXT_PHY_PORT0_SMI_ADDR,
-						EXT_PHY_PORT0_SWITCH_REG);
-	if (ret < 0)
-		return ret;
+	/* set PHY-detect bit for external PHYs */
+	for (i = 0; i < 2; ++i) {
+		u16 reg_val = 0;
 
-	ret = mv88e6321_sw_force_speed_external_phys(dev, EXT_PHY_PORT1_SMI_ADDR,
-					EXT_PHY_PORT1_SWITCH_REG);
-	if (ret < 0)
-		return ret;
+		ret = mdiobus_read(dev->mii_bus, MV88E6321_SW_PORT0_REG + i, 0x0);
+		if (ret < 0)
+			return ret;
+
+		reg_val = (u16)(ret | 0x1000);
+		ret = mdiobus_write(dev->mii_bus, MV88E6321_SW_PORT0_REG + i, 0x0, reg_val);
+		if (ret)
+			return ret;
+	}
 
 	ret = mv88e6321_sw_force_speed_internal_phys(dev,
 						MV88E6321_INTERNAL_PHY3);
@@ -444,12 +261,6 @@ static struct switch_attr mv88e6321_global_attrs[] = {
                 .get = mv88e6321_sw_get_mdio_reg,
         }, {
                 .type = SWITCH_TYPE_INT,
-                .name = "mdio_rw",
-                .description = "Read/Write with selected mdio registers",
-                .set = mv88e6321_sw_get_mdio_multi_write,
-                .get = mv88e6321_sw_get_mdio_multi_read,
-        }, {
-                .type = SWITCH_TYPE_INT,
                 .name = "mdio_rw_mdio_generic",
                 .description = "Read/Write with selected mdio registers (not nested)",
                 .set = mv88e6321_sw_set_mdio_write,
-- 
2.7.4

