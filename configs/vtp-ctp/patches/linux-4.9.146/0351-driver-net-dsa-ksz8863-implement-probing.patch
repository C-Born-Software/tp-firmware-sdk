From 14adfdba77de00bf18a426d0da5417cb9d9c6285 Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Tue, 25 Jun 2019 14:06:09 +0200
Subject: [PATCH] driver: net: dsa: ksz8863: implement probing

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/dsa/Makefile          |   2 +-
 drivers/net/dsa/ksz886x/Makefile  |   1 +
 drivers/net/dsa/ksz886x/ksz8863.c | 373 ++++++++++++++++++++++++++++++++++++++
 drivers/net/dsa/ksz886x/ksz8863.h |  62 +++++++
 4 files changed, 437 insertions(+), 1 deletion(-)
 create mode 100644 drivers/net/dsa/ksz886x/Makefile
 create mode 100644 drivers/net/dsa/ksz886x/ksz8863.c
 create mode 100644 drivers/net/dsa/ksz886x/ksz8863.h

diff --git a/drivers/net/dsa/Makefile b/drivers/net/dsa/Makefile
index 42ab87d..2068fd5 100644
--- a/drivers/net/dsa/Makefile
+++ b/drivers/net/dsa/Makefile
@@ -1,7 +1,7 @@
 obj-$(CONFIG_NET_DSA_MV88E6060) += mv88e6060.o
 obj-$(CONFIG_NET_DSA_BCM_SF2)	+= bcm_sf2.o
-obj-$(CONFIG_NET_DSA_KSZ8863) += ksz8863.o
 obj-$(CONFIG_NET_DSA_QCA8K)	+= qca8k.o
 
 obj-y				+= b53/
 obj-y				+= mv88e6xxx/
+obj-y				+= ksz886x/
diff --git a/drivers/net/dsa/ksz886x/Makefile b/drivers/net/dsa/ksz886x/Makefile
new file mode 100644
index 0000000..cf795b3
--- /dev/null
+++ b/drivers/net/dsa/ksz886x/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_NET_DSA_KSZ8863)	+= ksz8863.o
diff --git a/drivers/net/dsa/ksz886x/ksz8863.c b/drivers/net/dsa/ksz886x/ksz8863.c
new file mode 100644
index 0000000..9d89cb6
--- /dev/null
+++ b/drivers/net/dsa/ksz886x/ksz8863.c
@@ -0,0 +1,373 @@
+/*
+ * net/dsa/ksz886x/ksz8863.c - Micrel KSZ8863 switch chip support
+ *
+ * Copyright (c) 2010 SAGEMCOM
+ * Copyright (C) 2017 Wago Kontakttechnik GmbH
+ *
+ * Author: Karl Beldan <karl.beldan@sagemcom.com>
+ * Author: Heinrich Toews <heinrich.toews@wago.com>
+ * Author: Andreas Schmidt <andreas.schmidt@wago.com>
+ *
+ * This driver is oriented on Marvell dsa driver for mv88e6xxx switches.
+ * Some parts and approaches are copied from ksz8863 driver implementation
+ * of Karl Beldan.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#define pr_fmt(fmt) "dsa: ksz8863: " fmt
+
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/mdio.h>
+#include <linux/phy.h>
+#include <linux/gpio/consumer.h>
+#include <net/dsa.h>
+#include <linux/delay.h>
+
+#include "ksz8863.h"
+
+static enum dsa_tag_protocol ksz8863_get_tag_protocol(struct dsa_switch *ds)
+{
+	return DSA_TAG_PROTO_TAIL;
+}
+
+static int ksz8863_setup(struct dsa_switch *ds)
+{
+	return 0;
+}
+
+static int ksz8863_phy_read(struct dsa_switch *ds, int port, int reg)
+{
+	struct ksz8863_chip *chip = ds->priv;
+
+	return mdiobus_read_nested(chip->sw_bus, port, reg);
+}
+
+static int ksz8863_phy_write(struct dsa_switch *ds, int port, int reg, u16 val)
+{
+	struct ksz8863_chip *chip = ds->priv;
+
+	return mdiobus_write_nested(chip->sw_bus, port, reg, val);
+}
+
+static void ksz8863_adjust_link(struct dsa_switch *ds, int port,
+				struct phy_device *phydev)
+{
+	phy_print_status(phydev);
+}
+
+static struct dsa_switch_ops ksz8863_switch_ops = {
+	.get_tag_protocol	= ksz8863_get_tag_protocol,
+	.setup			= ksz8863_setup,
+	.phy_read		= ksz8863_phy_read,
+	.phy_write		= ksz8863_phy_write,
+	.adjust_link		= ksz8863_adjust_link,
+};
+
+static int ksz8863_smi_read(struct ksz8863_chip *chip, int reg, u8 *val)
+{
+	int ret;
+	int nreg = reg;
+
+	if (!chip->sw_bus)
+		return -ENODEV;
+
+	nreg |= MII_ADDR_KSZ;
+
+	ret = mdiobus_read_nested(chip->sw_bus, chip->sw_addr, nreg);
+	if (ret < 0 || ret > 0xFF) {
+		/* ksz8863 never return values over 0xFF in smi mode */
+		if (ret > 0xFF)
+			ret = -ENODATA;
+
+		return ret;
+	}
+
+	*val = ret & 0xff;
+
+	return 0;
+}
+
+static int ksz8863_smi_write(struct ksz8863_chip *chip, int reg, u8 val)
+{
+	int ret;
+	int nreg = reg;
+
+	nreg |= MII_ADDR_KSZ;
+
+	ret = mdiobus_write_nested(chip->sw_bus, chip->sw_addr, nreg, val);
+	return ret;
+}
+
+static int of_get_ksz8863_data(struct ksz8863_chip *chip)
+{
+	struct device *dev = chip->dev;
+	struct device_node *np = dev->of_node;
+
+	if (!np)
+		return 0;
+
+	if (of_find_property(np, "ksz,disable-internal-ldo", NULL))
+		chip->disable_internal_ldo = true;
+
+	chip->reset_gpio = devm_gpiod_get_optional(dev, "ksz,reset",
+						   GPIOD_OUT_LOW);
+	if (IS_ERR(chip->reset_gpio)) {
+		if (PTR_ERR(chip->reset_gpio) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+
+		dev_warn(dev, "No gpio reset pin given\n");
+	} else if (of_find_property(np, "ksz,reset-switch", NULL)) {
+		chip->reset = true;
+	}
+
+	return 0;
+}
+
+static struct ksz8863_chip *ksz8863_alloc_chip(struct device *dev)
+{
+	struct ksz8863_chip *chip;
+
+	chip = devm_kzalloc(dev, sizeof(*chip), GFP_KERNEL);
+	if (!chip)
+		return NULL;
+
+	chip->dev = dev;
+
+	return chip;
+}
+
+static void ksz8863_free_chip(struct ksz8863_chip *chip)
+{
+	struct device *dev = chip->dev;
+
+	devm_kfree(dev, chip);
+}
+
+static const struct ksz8863_bus_ops ksz8863_smi_ops = {
+	.read = ksz8863_smi_read,
+	.write = ksz8863_smi_write,
+};
+
+static void ksz8863_smi_init(struct ksz8863_chip *chip, struct mii_bus *bus,
+			     int sw_addr)
+{
+	chip->sw_bus = bus;
+	chip->sw_addr = sw_addr;
+
+	chip->mii_ops = &ksz8863_smi_ops;
+}
+
+static int ksz8863_hw_reset(struct ksz8863_chip *chip)
+{
+	if (!chip->reset)
+		return 0;
+
+	gpiod_set_value_cansleep(chip->reset_gpio, 1);
+	usleep_range(10000, 20000);
+	gpiod_set_value_cansleep(chip->reset_gpio, 0);
+
+	/* it recommended to wait after reset minimum 100Âµs,
+	 * but we wait ten times more to be sure.
+	 */
+	usleep_range(1000, 2000);
+
+	dev_info(chip->dev, "ksz8863 switch reset\n");
+
+	chip->reset = false;
+
+	return 0;
+}
+
+static int ksz8863_detect(struct ksz8863_chip *chip)
+{
+	u8 val;
+	u8 chip_family;
+	u8 chip_id;
+	u8 chip_rev;
+	int err;
+
+	err = ksz8863_smi_read(chip, KSZ8863_REG_CHIP_ID0, &val);
+	if (err)
+		return err;
+
+	chip_family = val;
+	if (chip_family != KSZ8863_REG_CHIP_ID0_FAMILY_ID) {
+		dev_err(chip->dev, "could not detect ksz8863 switch\n");
+		return -ENODEV;
+	}
+
+	err = ksz8863_smi_read(chip, KSZ8863_REG_CHIP_ID1, &val);
+	if (err)
+		return err;
+
+	chip_id = val & KSZ8863_REG_CHIP_ID1_ID_MASK;
+	chip_id	>>= KSZ8863_REG_CHIP_ID1_ID_SHIFT;
+
+	chip_rev = val & KSZ8863_REG_CHIP_ID1_REV_ID_MASK;
+	chip_rev >>= KSZ8863_REG_CHIP_ID1_REV_ID_SHIFT;
+
+	if (chip_id != KSZ8863_REG_CHIP_ID1_ID) {
+		dev_err(chip->dev, "could not detect ksz8863 switch\n");
+		return -ENODEV;
+	}
+
+	dev_info(chip->dev, "detected family id 0x%x, chip id 0x%x, revision id 0x%x\n",
+		 chip_family, chip_id, chip_rev);
+
+	return 0;
+}
+
+static int ksz8863_set_internal_ldo(struct ksz8863_chip *chip)
+{
+	int err;
+	u8 val;
+
+	if (!chip->disable_internal_ldo)
+		return 0;
+
+	err = ksz8863_smi_read(chip, KSZ8863_REG_INTERNAL_1V8_LDO_CTRL, &val);
+	if (err)
+		return err;
+
+	val |= KSZ8863_REG_INTERNAL_1V8_LDO_CTRL_DISABLE;
+
+	err = ksz8863_smi_write(chip, KSZ8863_REG_INTERNAL_1V8_LDO_CTRL, val);
+	if (err)
+		return err;
+
+	dev_info(chip->dev, "1.8V LDO disabled\n");
+
+	return 0;
+}
+
+static int ksz8863_register_switch(struct ksz8863_chip *chip)
+{
+	int err;
+	struct device *dev = chip->dev;
+	struct dsa_switch *ds;
+
+	ds = devm_kzalloc(dev, sizeof(*ds), GFP_KERNEL);
+	if (!ds)
+		return -ENOMEM;
+
+	ds->dev = dev;
+	ds->priv = chip;
+	ds->ops = &ksz8863_switch_ops;
+
+	dev_set_drvdata(dev, ds);
+
+	chip->ds = ds;
+
+	err = dsa_register_switch(ds, chip->dev->of_node);
+	if (err) {
+		dev_err(chip->dev, "register ksz8863 on dsa failed\n");
+		devm_kfree(chip->dev, ds);
+		chip->ds = NULL;
+		dev_set_drvdata(dev, NULL);
+		return err;
+	}
+
+	return 0;
+}
+
+static void ksz8863_unregister_switch(struct ksz8863_chip *chip)
+{
+	dsa_unregister_switch(chip->ds);
+
+	devm_kfree(chip->dev, chip->ds);
+	chip->ds = NULL;
+}
+
+static int ksz8863_probe(struct mdio_device *mdiodev)
+{
+	struct device *dev = &mdiodev->dev;
+	struct ksz8863_chip *chip;
+	int err;
+
+	chip = ksz8863_alloc_chip(dev);
+	if (!chip)
+		return -ENOMEM;
+
+	err = of_get_ksz8863_data(chip);
+	if (err)
+		goto err_free;
+
+	ksz8863_smi_init(chip, mdiodev->bus, mdiodev->addr);
+
+	err = ksz8863_hw_reset(chip);
+	if (err)
+		goto err_free;
+
+	/* cleanup dsa enable stuff its not needed anymore */
+	dsa_enable(1);
+
+	err = ksz8863_detect(chip);
+	if (err)
+		goto err_free;
+
+	err = ksz8863_set_internal_ldo(chip);
+	if (err)
+		goto err_free;
+
+	err = ksz8863_register_switch(chip);
+	if (err)
+		goto err_free;
+
+	dev_info(chip->dev, "ksz8863 switch probed successful\n");
+
+	return 0;
+
+err_free:
+	dev_err(chip->dev, "ksz8863 probe failed (%d)\n", err);
+	ksz8863_free_chip(chip);
+
+	return err;
+}
+
+static void ksz8863_remove(struct mdio_device *mdiodev)
+{
+	struct dsa_switch *ds = dev_get_drvdata(&mdiodev->dev);
+	struct ksz8863_chip *chip = ds->priv;
+
+	ksz8863_unregister_switch(chip);
+	ksz8863_free_chip(chip);
+}
+
+static const struct of_device_id ksz8863_of_match[] = {
+	{
+		.compatible = "micrel,ksz8863",
+	},
+	{ /* sentinel */ },
+};
+
+MODULE_DEVICE_TABLE(of, ksz8863_of_match);
+
+static struct mdio_driver ksz8863_driver = {
+	.probe	= ksz8863_probe,
+	.remove = ksz8863_remove,
+	.mdiodrv.driver = {
+		.name = "ksz8863",
+		.of_match_table = ksz8863_of_match,
+	},
+};
+
+static int __init ksz8863_init(void)
+{
+	return mdio_driver_register(&ksz8863_driver);
+}
+module_init(ksz8863_init);
+
+static void __exit ksz8863_cleanup(void)
+{
+	mdio_driver_unregister(&ksz8863_driver);
+}
+module_exit(ksz8863_cleanup);
+
+MODULE_AUTHOR("Andreas Schmidt <andreas.schmidt@wago.com>");
+MODULE_DESCRIPTION("Driver for Micrel KSZ886X ethernet switch chips");
+MODULE_LICENSE("GPL");
diff --git a/drivers/net/dsa/ksz886x/ksz8863.h b/drivers/net/dsa/ksz886x/ksz8863.h
new file mode 100644
index 0000000..497fa553
--- /dev/null
+++ b/drivers/net/dsa/ksz886x/ksz8863.h
@@ -0,0 +1,62 @@
+/*
+ * Micrel ksz8863 common definitions
+ *
+ * Copyright (c) 2019 WAGO Kontakttechnik GmbH & Co. KG
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef __KSZ8863_H__
+#define __KSZ8863_H__
+
+#include <linux/device.h>
+
+#define KSZ8863_REG_CHIP_ID0			0x00
+#define KSZ8863_REG_CHIP_ID0_FAMILY_ID			0x88
+
+#define KSZ8863_REG_CHIP_ID1			0x01
+#define KSZ8863_REG_CHIP_ID1_ID_MASK			0xF0
+#define KSZ8863_REG_CHIP_ID1_ID_SHIFT			4
+#define KSZ8863_REG_CHIP_ID1_ID				0x03
+#define KSZ8863_REG_CHIP_ID1_REV_ID_MASK		0x0E
+#define KSZ8863_REG_CHIP_ID1_REV_ID_SHIFT		1
+#define KSZ8863_REG_CHIP_ID1_START			0x01
+
+#define KSZ8863_REG_INTERNAL_1V8_LDO_CTRL	0xC1
+#define KSZ8863_REG_INTERNAL_1V8_LDO_CTRL_DISABLE	BIT(6)
+
+struct ksz8863_chip {
+	/* The dsa_switch this structure is related to */
+	struct dsa_switch *ds;
+
+	/* The device this structure is associated to */
+	struct device *dev;
+
+	/* The MII bus and the address on the bus that is used to
+	 * communication with the switch
+	 */
+	struct mii_bus *sw_bus;
+	u8 sw_addr;
+	const struct ksz8863_bus_ops *mii_ops;
+
+	/* A switch may have a GPIO line tied to its reset pin. Parse
+	 * this from the device tree, and use it before performing
+	 * switch soft reset.
+	 */
+	struct gpio_desc *reset_gpio;
+	bool reset;
+
+	/* If true driver will disable internal 1.8V LDO */
+	bool disable_internal_ldo;
+};
+
+struct ksz8863_bus_ops {
+	int (*read)(struct ksz8863_chip *chip, int reg, u8 *val);
+	int (*write)(struct ksz8863_chip *chip, int reg, u8 val);
+};
+
+#endif /* __KSZ8863_H__ */
+
-- 
2.7.4

