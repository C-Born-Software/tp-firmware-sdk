From 7856e6961c990740b9000ea06584c0034efc6642 Mon Sep 17 00:00:00 2001
From: Christian Hohnstaedt <Christian.Hohnstaedt@wago.com>
Date: Fri, 11 Oct 2019 11:05:06 +0200
Subject: [PATCH] dma: edma.c: rmd: fix RX mode by earlier locking the buffer

Moved "rmd_rx_lock_bufctrl" directly after "rmd_rx_ack_write"
Use the "rmd_rx_reload_dummy" transfer to also unlock the buffer.

This extends the time between locking and reading.
This avoids the race-condition with user-space.

Signed-off-by: Christian Hohnstaedt <Christian.Hohnstaedt@wago.com>
---
 drivers/dma/edma.c | 68 +++++++++++++++++++++++++++++-------------------------
 1 file changed, 36 insertions(+), 32 deletions(-)

diff --git a/drivers/dma/edma.c b/drivers/dma/edma.c
index 36e5c0e..cf95eca 100644
--- a/drivers/dma/edma.c
+++ b/drivers/dma/edma.c
@@ -145,10 +145,10 @@
 enum {
 	rmd_rx_fifo_trans = 0,
 	rmd_rx_ack_write = 1,
-	rmd_rx_data_valid = 2,
-	rmd_rx_data_switch = 3,
-	rmd_rx_reload_dummy = 4,
-	rmd_rx_lock_bufctrl = 5,
+	rmd_rx_lock_bufctrl = 2,
+	rmd_rx_data_valid = 3,
+	rmd_rx_data_switch = 4,
+	rmd_rx_unlock_bufctrl = 5,
 	rmd_rx_copy_bufctrl = 6,
 	rmd_rx_update_link = 7,
 	rmd_rx_update_bufctrl = 8,
@@ -1092,10 +1092,10 @@ static void setup_task_names(struct edma_desc *edesc)
 
 		[rmd_rx_fifo_trans]	= "FIFO-Trans",
 		[rmd_rx_ack_write]	= "ACK-Write",
+		[rmd_rx_lock_bufctrl]	= "Buffer-Lock",
 		[rmd_rx_data_valid]	= "Data-Valid",
 		[rmd_rx_data_switch]	= "Data-Switch",
-		[rmd_rx_reload_dummy]	= "Reload-Dummy",
-		[rmd_rx_lock_bufctrl]	= "Buffer-Lock",
+		[rmd_rx_unlock_bufctrl]	= "Buffer-Unlock",
 		[rmd_rx_copy_bufctrl]	= "Copy-BufCtrl",
 		[rmd_rx_update_link]	= "Update-Link",
 		[rmd_rx_update_bufctrl]	= "Update-BufCtrl",
@@ -1850,6 +1850,19 @@ static struct edma_desc *device_prep_dma_rmd_from_device(
 			/* "ACK-write" links and triggers "Data-Valid" */
 			edesc->pset[i].param.opt |= TCCHEN;
 			break;
+		case rmd_rx_lock_bufctrl:
+			/* "Buffer-Lock": Sets "buf_ctrl:flag" word to 0x101 to
+			 * temporarily lock out the consumer.
+			 */
+			ret = edma_config_pset(chan, edesc->pset + i,
+				param_addr(echan, i) + PARM_SRC_DST_CIDX,
+				buf_ctrl + RMD_FLAG_NEW_DATA_BYTE, 1,
+				sizeof(u16), sizeof(u16), DMA_MEM_TO_MEM);
+			edesc->pset[i].param.src_dst_cidx = RMD_FLAG_LOCK >> 16;
+
+			/* "Buffer-Lock" links and triggers "Data-Valid" */
+			edesc->pset[i].param.opt |= TCCHEN;
+			break;
 		case rmd_rx_data_valid:
 			/* "Data-Valid": Re-programs the linked "Data-Switch".
 			 * Transfers 8bit DataValidBit(3) from FPGA:IDET_CS
@@ -1869,49 +1882,36 @@ static struct edma_desc *device_prep_dma_rmd_from_device(
 			edesc->pset[i].param.opt |= TCCHEN;
 			break;
 		case rmd_rx_data_switch:
-			/* "Data-Switch": Transfers (or not) "Buffer-Lock"
+			/* "Data-Switch": Transfers (or not) "Copy-BufCtrl"
 			 * to slot[0]. Depending on the ACNT,
 			 * set by "Data-Valid"
 			 */
 			ret = edma_config_pset(chan, edesc->pset + i,
-				0, // SRC will be set by "Buffer-Lock" setup
+				0, // SRC will be set by "Copy-BufCtrl" setup
 				param_addr(echan, 0), PARM_SIZE / sizeof(u32),
 				sizeof(u32), PARM_SIZE, DMA_MEM_TO_MEM);
-			/* "Data-Switch" links "Reload-Dummy" to prepare
+			/* "Data-Switch" links "Buffer-Unlock" to prepare
 			 * "FIFO-Trans" with the same buffer
 			 * if "Data-Valid" was not set
 			 */
 			edesc->pset[i].param.opt |= TCCHEN;
 			break;
-		case rmd_rx_reload_dummy:
-			/* "Reload-Dummy": Dummy transfer, linking but not
-			 * starting FIFO-Trans
-			 */
-			ret = edma_config_pset(chan, edesc->pset + i,
-						0, 0, 0, 1, 0, DMA_MEM_TO_MEM);
-			/* "Reload-Dummy" links "FIFO-Trans" and repeats
-			 * with the same buffer on the next TR event
-			 */
-			n = i - (rmd_rx_reload_dummy - rmd_rx_fifo_trans);
-			edesc->pset[i].link = n;
-			break;
-		case rmd_rx_lock_bufctrl:
-			/* "Buffer-Lock": Sets "buf_ctrl:flag" word to 0x101 to
-			 * temporarily lock out the consumer.
+		case rmd_rx_unlock_bufctrl:
+			/* "Buffer-Unlock": Sets "buf_ctrl:flag" word to 0 to
+			 * release the buffer management word and indicate:
+			 * "No new data"
 			 */
 			ret = edma_config_pset(chan, edesc->pset + i,
 				param_addr(echan, i) + PARM_SRC_DST_CIDX,
 				buf_ctrl + RMD_FLAG_NEW_DATA_BYTE, 1,
 				sizeof(u16), sizeof(u16), DMA_MEM_TO_MEM);
-			edesc->pset[i].param.src_dst_cidx =
-				(RMD_FLAG_NEW_DATA | RMD_FLAG_LOCK) >> 16;
-
-			/* Set SRC of "Data-Switch" transfer to us */
-			n = i - (rmd_rx_lock_bufctrl - rmd_rx_data_switch);
-			edesc->pset[n].param.src = param_addr(echan, i);
+			edesc->pset[i].param.src_dst_cidx = 0;
 
-			/* "Buffer-Lock" links and triggers "Copy-BufCtrl" */
-			edesc->pset[i].param.opt |= TCCHEN;
+			/* "Buffer-Unlock" links "FIFO-Trans" and repeats
+			 * with the same buffer on the next TR event
+			 */
+			n = i - (rmd_rx_unlock_bufctrl - rmd_rx_fifo_trans);
+			edesc->pset[i].link = n;
 			break;
 		case rmd_rx_copy_bufctrl:
 			/* "Copy-BufCtrl": Copy number of third, unused buffer
@@ -1922,6 +1922,10 @@ static struct edma_desc *device_prep_dma_rmd_from_device(
 				param_addr(echan, 0) + PARM_B_CNT,
 				1, 1, 1, DMA_MEM_TO_DEV);
 
+			/* Set SRC of "Data-Switch" transfer to us */
+			n = i - (rmd_rx_copy_bufctrl - rmd_rx_data_switch);
+			edesc->pset[n].param.src = param_addr(echan, i);
+
 			/* "Copy-BufCtrl" links and triggers "Update-Link" */
 			edesc->pset[i].param.opt |= TCCHEN;
 			break;
-- 
2.7.4

