From ceea256aa965f23fe45ad1411d61a140c733a3bf Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Mon, 21 Jan 2019 11:07:50 +0100
Subject: [PATCH] net: dsa: mv88e6321: fix probe without tcam entry

If no tcam entry is defined in device-tree, the probe should
just ignore tcam probing and doesn't return with a error.

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/dsa/mv88e6xxx/chip.c           | 13 +++++---
 drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c | 49 ++++++++++++++++--------------
 2 files changed, 34 insertions(+), 28 deletions(-)

diff --git a/drivers/net/dsa/mv88e6xxx/chip.c b/drivers/net/dsa/mv88e6xxx/chip.c
index d5b2eaf..7601255 100644
--- a/drivers/net/dsa/mv88e6xxx/chip.c
+++ b/drivers/net/dsa/mv88e6xxx/chip.c
@@ -2788,10 +2788,11 @@ static int mv88e6xxx_set_tcam_entry(struct mv88e6xxx_chip *chip,
 
 static int mv88e6xxx_tcam_setup(struct mv88e6xxx_chip *chip)
 {
-	int err = 0;
+	int err;
+	int ret;
 	struct tcam_entries tcam_entries = {0};
-	struct tcam_entry *tcam_entry = NULL;
-	struct tcam_entry *tcam_entry_tmp = NULL;
+	struct tcam_entry *tcam_entry;
+	struct tcam_entry *tcam_entry_tmp;
 	struct device_node *np = of_root;
 
 	if (!np)
@@ -2799,9 +2800,11 @@ static int mv88e6xxx_tcam_setup(struct mv88e6xxx_chip *chip)
 
 	INIT_LIST_HEAD(&tcam_entries.head.list);
 
-	err = of_get_tcam_entry(&tcam_entries, np);
-	if (err)
+	ret = of_get_tcam_entry(&tcam_entries, np);
+	if (!ret || ret < 0) {
+		err = ret;
 		goto out;
+	}
 
 	mv88e6xxx_tcam_cleanup(chip);
 
diff --git a/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c b/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c
index 9e21c77..a790b3b 100644
--- a/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c
+++ b/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c
@@ -128,7 +128,8 @@ static int of_set_frame_data(struct tcam_entry *tcam_entry,
 
 int of_get_tcam_entry(struct tcam_entries *tcam_entries, struct device_node *np)
 {
-	int ret;
+	int ctr = 0;
+	int err;
 	struct device_node *tcam_np;
 	struct device_node *child = NULL;
 	struct tcam_entry *tcam_entry = NULL;
@@ -137,69 +138,69 @@ int of_get_tcam_entry(struct tcam_entries *tcam_entries, struct device_node *np)
 	tcam_np = of_find_compatible_node(np, NULL, "mv88e6321,tcam");
 
 	if (!tcam_np)
-		return -ENODEV;
+		return ctr;
 
 	OF_TCAM_ENTRIES_PROP_READ_U8(tcam_np, "tcam-mode-port-mask", port_mask,
-				     ret, out);
+				     err, out);
 
 	OF_TCAM_ENTRIES_PROP_READ_OPT_U8(tcam_np, "debug-port", debug_port,
-					 ret, out);
+					 err, out);
 
 	for_each_child_of_node(tcam_np, child) {
 		pr_info("process tcam entry node %s\n",	child->name);
 
 		tcam_entry = kzalloc(sizeof(*tcam_entry), GFP_KERNEL);
 		if (!tcam_entry) {
-			ret = -ENOMEM;
+			err = -ENOMEM;
 			goto out_free;
 		}
 
 		tcam_entry->title = child->name;
 
-		OF_TCAM_PROP_READ_U8(child, "id", orig_id, ret, out_free);
+		OF_TCAM_PROP_READ_U8(child, "id", orig_id, err, out_free);
 		OF_TCAM_PROP_READ_OPT_U8(child, "frame-type-mask",
 					 mask_frame_type);
 		OF_TCAM_PROP_READ_COND_U8(child, "frame-type", mask_frame_type,
-					  frame_type, ret, out_free);
-		OF_TCAM_PROP_READ_U8(child, "ppri-mask", mask_ppri, ret,
+					  frame_type, err, out_free);
+		OF_TCAM_PROP_READ_U8(child, "ppri-mask", mask_ppri, err,
 				     out_free);
 		OF_TCAM_PROP_READ_COND_U8(child, "ppri", mask_ppri, orig_ppri,
-					  ret, out_free);
-		OF_TCAM_PROP_READ_U8(child, "pvid-mask", mask_pvid, ret,
+					  err, out_free);
+		OF_TCAM_PROP_READ_U8(child, "pvid-mask", mask_pvid, err,
 				     out_free);
 		OF_TCAM_PROP_READ_COND_U16(child, "pvid", mask_pvid, orig_pvid,
-					   ret, out_free);
+					   err, out_free);
 		OF_TCAM_PROP_READ_OPT_U8(child, "spv-mask", mask_spv);
-		OF_TCAM_PROP_READ_COND_U8(child, "spv", mask_spv, spv, ret,
+		OF_TCAM_PROP_READ_COND_U8(child, "spv", mask_spv, spv, err,
 					  out_free);
 		OF_TCAM_PROP_READ_BOOL(child, "vid-override", vid_override);
 		OF_TCAM_PROP_READ_COND_U16(child, "vid-data", vid_override, vid,
-					   ret, out_free);
+					   err, out_free);
 		OF_TCAM_PROP_READ_BOOL(child, "interrupt", interrupt);
 		OF_TCAM_PROP_READ_BOOL(child, "inc-tcam-ctr", inc_tcam_ctr);
 		OF_TCAM_PROP_READ_BOOL(child, "fpri-override", fpri_override);
 		OF_TCAM_PROP_READ_COND_U8(child, "fpri-data", fpri_override,
-					  fpri, ret, out_free);
+					  fpri, err, out_free);
 		OF_TCAM_PROP_READ_BOOL(child, "qpri-override", qpri_override);
 		OF_TCAM_PROP_READ_COND_U8(child, "qpri-data", qpri_override,
-					  qpri, ret, out_free);
-		OF_TCAM_PROP_READ_U8(child, "next-id", next_id, ret, out_free);
+					  qpri, err, out_free);
+		OF_TCAM_PROP_READ_U8(child, "next-id", next_id, err, out_free);
 		OF_TCAM_PROP_READ_BOOL(child, "dpv-override", dpv_override);
 		OF_TCAM_PROP_READ_COND_U8(child, "dpv-data", dpv_override, dpv,
-					  ret, out_free);
+					  err, out_free);
 		OF_TCAM_PROP_READ_BOOL(child, "ld-balance-override",
 				       ld_balance_override);
 		OF_TCAM_PROP_READ_COND_U8(child, "ld-balance-data",
-					  ld_balance_override, ld_balance, ret,
+					  ld_balance_override, ld_balance, err,
 					  out_free);
 		OF_TCAM_PROP_READ_BOOL(child, "action-override",
 				       action_override);
 		OF_TCAM_PROP_READ_COND_U16(child, "action-data",
-					   action_override, action, ret,
+					   action_override, action, err,
 					   out_free);
 
-		ret = of_set_frame_data(tcam_entry, child);
-		if (ret) {
+		err = of_set_frame_data(tcam_entry, child);
+		if (err) {
 			kfree(tcam_entry);
 			goto out_free;
 		}
@@ -208,9 +209,11 @@ int of_get_tcam_entry(struct tcam_entries *tcam_entries, struct device_node *np)
 		tcam_entry->debug_port = tcam_entries->debug_port;
 
 		list_add(&tcam_entry->list, &tcam_entries->head.list);
+
+		ctr++;
 	}
 
-	return 0;
+	return ctr;
 
 out_free:
 	list_for_each_entry_safe(tcam_entry, tcam_entry_tmp,
@@ -219,7 +222,7 @@ int of_get_tcam_entry(struct tcam_entries *tcam_entries, struct device_node *np)
 		kfree(tcam_entry);
 	}
 out:
-	return ret;
+	return err;
 }
 
 static inline int mv88e6321_write_tcam_pg_hdr(struct mii_bus *bus,
-- 
2.7.4

