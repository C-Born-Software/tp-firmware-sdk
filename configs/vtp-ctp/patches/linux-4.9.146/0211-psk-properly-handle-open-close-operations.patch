From fded041bb5f8d2d4ba692a4b913344b81d7d4c40 Mon Sep 17 00:00:00 2001
From: Jan Sondhauss <jan.sondhauss@wago.com>
Date: Fri, 6 Jul 2018 13:09:27 +0200
Subject: [PATCH] psk: properly handle open/close operations

We allow only one instance of the psk at any given time. This commits
prevents multiple instances of the psk.
During close/shutdown, we prevent the rx handler from accessing a
partially destructed psk.

Signed-off-by: Jan Sondhauss <jan.sondhauss@wago.com>
---
 net/pn/pnsk.c | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/net/pn/pnsk.c b/net/pn/pnsk.c
index 4ae72e1..3b7ebd6 100644
--- a/net/pn/pnsk.c
+++ b/net/pn/pnsk.c
@@ -36,6 +36,8 @@
 
 #define TX_BATCH_SIZE 16
 
+static struct pn_sock *pn_sock;
+
 static struct pn_sock *pn_sk(struct sock *sk)
 {
 	return (struct pn_sock *)sk;
@@ -295,6 +297,7 @@ static int pnsk_release(struct socket *sock)
 	local_bh_enable();
 
 	if (ps->dev) {
+		WRITE_ONCE(pn_sock, NULL);
 		__pnsk_release(ps);
 		ps->dev = NULL;
 	}
@@ -586,6 +589,9 @@ static int pnsk_create(struct net *net, struct socket *sock, int protocol,
 	struct sock *sk;
 	struct pn_sock *ps;
 
+	if (pn_sock)
+		return -EBUSY;
+
 	if (!ns_capable(net->user_ns, CAP_NET_RAW))
 		return -EPERM;
 	if (sock->type != SOCK_RAW)
@@ -612,11 +618,24 @@ static int pnsk_create(struct net *net, struct socket *sock, int protocol,
 	ps = pn_sk(sk);
 	mutex_init(&ps->mutex);
 
+	if (cmpxchg(&pn_sock, NULL, ps)) {
+		/* socket already open */
+		goto out_put;
+	}
+
 	local_bh_disable();
 	sock_prot_inuse_add(net, &pnsk_proto, 1);
 	local_bh_enable();
 
 	return 0;
+
+out_put:
+	sock_orphan(sk);
+	sock->sk = NULL;
+	sk_refcnt_debug_release(sk);
+	sock_put(sk);
+
+	return -ENOBUFS;
 }
 
 static const struct net_proto_family pnsk_family_ops = {
-- 
2.7.4

