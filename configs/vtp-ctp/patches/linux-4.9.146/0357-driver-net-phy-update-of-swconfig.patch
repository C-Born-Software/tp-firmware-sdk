From a1ef06e742ceb454d451c98cde9ad38aa7c9c787 Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Mon, 1 Jul 2019 12:07:30 +0200
Subject: [PATCH] driver: net: phy: update of swconfig

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/phy/Kconfig         |   4 -
 drivers/net/phy/swconfig.c      | 450 ++++++++++++++++++++++++----------------
 drivers/net/phy/swconfig_leds.c | 354 -------------------------------
 include/linux/switch.h          | 122 +++--------
 include/uapi/linux/switch.h     |  18 +-
 5 files changed, 316 insertions(+), 632 deletions(-)
 delete mode 100644 drivers/net/phy/swconfig_leds.c

diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index 306b393..a857c79 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -21,10 +21,6 @@ config SWCONFIG
 	  Switch configuration API using netlink. This allows
 	  you to configure the VLAN features of certain switches.
 
-config SWCONFIG_LEDS
-	bool "Switch LED trigger support"
-	depends on (SWCONFIG && LEDS_TRIGGERS)
-
 comment "MDIO bus device drivers"
 
 config MDIO_BCM_IPROC
diff --git a/drivers/net/phy/swconfig.c b/drivers/net/phy/swconfig.c
index 624b2c4..d5b9fcd 100644
--- a/drivers/net/phy/swconfig.c
+++ b/drivers/net/phy/swconfig.c
@@ -1,7 +1,7 @@
 /*
  * swconfig.c: Switch configuration API
  *
- * Copyright (C) 2008 Felix Fietkau <nbd@openwrt.org>
+ * Copyright (C) 2008 Felix Fietkau <nbd@nbd.name>
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
@@ -24,28 +24,20 @@
 #include <linux/skbuff.h>
 #include <linux/switch.h>
 #include <linux/of.h>
-
-//#define DEBUG 1
-#ifdef DEBUG
-#define DPRINTF(format, ...) printk("%s: " format, __func__, ##__VA_ARGS__)
-#else
-#define DPRINTF(...) do {} while(0)
-#endif
+#include <linux/version.h>
+#include <uapi/linux/mii.h>
 
 #define SWCONFIG_DEVNAME	"switch%d"
 
-#include "swconfig_leds.c"
-
-MODULE_AUTHOR("Felix Fietkau <nbd@openwrt.org>");
+MODULE_AUTHOR("Felix Fietkau <nbd@nbd.name>");
 MODULE_LICENSE("GPL");
 
-static int swdev_id = 0;
+static int swdev_id;
 static struct list_head swdevs;
-static DEFINE_SPINLOCK(swdevs_lock);
+static DEFINE_MUTEX(swdevs_lock);
 struct swconfig_callback;
 
-struct swconfig_callback
-{
+struct swconfig_callback {
 	struct sk_buff *msg;
 	struct genlmsghdr *hdr;
 	struct genl_info *info;
@@ -63,8 +55,9 @@ struct swconfig_callback
 
 /* defaults */
 
-static int
-swconfig_get_vlan_ports(struct switch_dev *dev, const struct switch_attr *attr, struct switch_val *val)
+static int swconfig_get_vlan_ports(struct switch_dev *dev,
+				   const struct switch_attr *attr,
+				   struct switch_val *val)
 {
 	int ret;
 	if (val->port_vlan >= dev->vlans)
@@ -77,8 +70,9 @@ swconfig_get_vlan_ports(struct switch_dev *dev, const struct switch_attr *attr,
 	return ret;
 }
 
-static int
-swconfig_set_vlan_ports(struct switch_dev *dev, const struct switch_attr *attr, struct switch_val *val)
+static int swconfig_set_vlan_ports(struct switch_dev *dev,
+				   const struct switch_attr *attr,
+				   struct switch_val *val)
 {
 	struct switch_port *ports = val->value.ports;
 	const struct switch_dev_ops *ops = dev->ops;
@@ -106,8 +100,9 @@ swconfig_set_vlan_ports(struct switch_dev *dev, const struct switch_attr *attr,
 	return ops->set_vlan_ports(dev, val);
 }
 
-static int
-swconfig_set_pvid(struct switch_dev *dev, const struct switch_attr *attr, struct switch_val *val)
+static int swconfig_set_pvid(struct switch_dev *dev,
+			     const struct switch_attr *attr,
+			     struct switch_val *val)
 {
 	if (val->port_vlan >= dev->ports)
 		return -EINVAL;
@@ -118,8 +113,9 @@ swconfig_set_pvid(struct switch_dev *dev, const struct switch_attr *attr, struct
 	return dev->ops->set_port_pvid(dev, val->port_vlan, val->value.i);
 }
 
-static int
-swconfig_get_pvid(struct switch_dev *dev, const struct switch_attr *attr, struct switch_val *val)
+static int swconfig_get_pvid(struct switch_dev *dev,
+			     const struct switch_attr *attr,
+			     struct switch_val *val)
 {
 	if (val->port_vlan >= dev->ports)
 		return -EINVAL;
@@ -130,29 +126,21 @@ swconfig_get_pvid(struct switch_dev *dev, const struct switch_attr *attr, struct
 	return dev->ops->get_port_pvid(dev, val->port_vlan, &val->value.i);
 }
 
-static const char *
-swconfig_speed_str(enum switch_port_speed speed)
+static int swconfig_set_link(struct switch_dev *dev,
+			     const struct switch_attr *attr,
+			     struct switch_val *val)
 {
-	switch (speed) {
-	case SWITCH_PORT_SPEED_10:
-		return "10baseT";
-	case SWITCH_PORT_SPEED_100:
-		return "100baseT";
-	case SWITCH_PORT_SPEED_1000:
-		return "1000baseT";
-	default:
-		break;
-	}
+	if (!dev->ops->set_port_link)
+		return -EOPNOTSUPP;
 
-	return "unknown";
+	return dev->ops->set_port_link(dev, val->port_vlan, val->value.link);
 }
 
-static int
-swconfig_get_link(struct switch_dev *dev, const struct switch_attr *attr, struct switch_val *val)
+static int swconfig_get_link(struct switch_dev *dev,
+			     const struct switch_attr *attr,
+			     struct switch_val *val)
 {
-	struct switch_port_link link;
-	int len;
-	int ret;
+	struct switch_port_link *link = val->value.link;
 
 	if (val->port_vlan >= dev->ports)
 		return -EINVAL;
@@ -160,34 +148,13 @@ swconfig_get_link(struct switch_dev *dev, const struct switch_attr *attr, struct
 	if (!dev->ops->get_port_link)
 		return -EOPNOTSUPP;
 
-	memset(&link, 0, sizeof(link));
-	ret = dev->ops->get_port_link(dev, val->port_vlan, &link);
-	if (ret)
-		return ret;
-
-	memset(dev->buf, 0, sizeof(dev->buf));
-
-	if (link.link)
-		len = snprintf(dev->buf, sizeof(dev->buf),
-			       "port:%d link:up speed:%s %s-duplex %s%s%s",
-			       val->port_vlan,
-			       swconfig_speed_str(link.speed),
-			       link.duplex ? "full" : "half",
-			       link.tx_flow ? "txflow ": "",
-			       link.rx_flow ?	"rxflow " : "",
-			       link.aneg ? "auto" : "");
-	else
-		len = snprintf(dev->buf, sizeof(dev->buf), "port:%d link:down",
-			       val->port_vlan);
-
-	val->value.s = dev->buf;
-	val->len = len;
-
-	return 0;
+	memset(link, 0, sizeof(*link));
+	return dev->ops->get_port_link(dev, val->port_vlan, link);
 }
 
-static int
-swconfig_apply_config(struct switch_dev *dev, const struct switch_attr *attr, struct switch_val *val)
+static int swconfig_apply_config(struct switch_dev *dev,
+				 const struct switch_attr *attr,
+				 struct switch_val *val)
 {
 	/* don't complain if not supported by the switch driver */
 	if (!dev->ops->apply_config)
@@ -196,8 +163,9 @@ swconfig_apply_config(struct switch_dev *dev, const struct switch_attr *attr, st
 	return dev->ops->apply_config(dev);
 }
 
-static int
-swconfig_reset_switch(struct switch_dev *dev, const struct switch_attr *attr, struct switch_val *val)
+static int swconfig_reset_switch(struct switch_dev *dev,
+				 const struct switch_attr *attr,
+				 struct switch_val *val)
 {
 	/* don't complain if not supported by the switch driver */
 	if (!dev->ops->reset_switch)
@@ -244,10 +212,10 @@ static struct switch_attr default_port[] = {
 		.get = swconfig_get_pvid,
 	},
 	[PORT_LINK] = {
-		.type = SWITCH_TYPE_STRING,
+		.type = SWITCH_TYPE_LINK,
 		.name = "link",
 		.description = "Get port link information",
-		.set = NULL,
+		.set = swconfig_set_link,
 		.get = swconfig_get_link,
 	}
 };
@@ -263,7 +231,8 @@ static struct switch_attr default_vlan[] = {
 };
 
 static const struct switch_attr *
-swconfig_find_attr_by_name(const struct switch_attrlist *alist, const char *name)
+swconfig_find_attr_by_name(const struct switch_attrlist *alist,
+			   const char *name)
 {
 	int i;
 
@@ -298,13 +267,7 @@ static void swconfig_defaults_init(struct switch_dev *dev)
 }
 
 
-static struct genl_family switch_fam = {
-	.id = GENL_ID_GENERATE,
-	.name = "switch",
-	.hdrsize = 0,
-	.version = 1,
-	.maxattr = SWITCH_ATTR_MAX,
-};
+static struct genl_family switch_fam;
 
 static const struct nla_policy switch_policy[SWITCH_ATTR_MAX+1] = {
 	[SWITCH_ATTR_ID] = { .type = NLA_U32 },
@@ -322,20 +285,23 @@ static const struct nla_policy port_policy[SWITCH_PORT_ATTR_MAX+1] = {
 	[SWITCH_PORT_FLAG_TAGGED] = { .type = NLA_FLAG },
 };
 
-static inline void
-swconfig_lock(void)
+static struct nla_policy link_policy[SWITCH_LINK_ATTR_MAX] = {
+	[SWITCH_LINK_FLAG_DUPLEX] = { .type = NLA_FLAG },
+	[SWITCH_LINK_FLAG_ANEG] = { .type = NLA_FLAG },
+	[SWITCH_LINK_SPEED] = { .type = NLA_U32 },
+};
+
+static inline void swconfig_lock(void)
 {
-	spin_lock(&swdevs_lock);
+	mutex_lock(&swdevs_lock);
 }
 
-static inline void
-swconfig_unlock(void)
+static inline void swconfig_unlock(void)
 {
-	spin_unlock(&swdevs_lock);
+	mutex_unlock(&swdevs_lock);
 }
 
-static struct switch_dev *
-swconfig_get_dev(struct genl_info *info)
+static struct switch_dev *swconfig_get_dev(struct genl_info *info)
 {
 	struct switch_dev *dev = NULL;
 	struct switch_dev *p;
@@ -356,20 +322,18 @@ swconfig_get_dev(struct genl_info *info)
 	if (dev)
 		mutex_lock(&dev->sw_mutex);
 	else
-		DPRINTF("device %d not found\n", id);
+		pr_debug("device %d not found\n", id);
 	swconfig_unlock();
 done:
 	return dev;
 }
 
-static inline void
-swconfig_put_dev(struct switch_dev *dev)
+static inline void swconfig_put_dev(struct switch_dev *dev)
 {
 	mutex_unlock(&dev->sw_mutex);
 }
 
-static int
-swconfig_dump_attr(struct swconfig_callback *cb, void *arg)
+static int swconfig_dump_attr(struct swconfig_callback *cb, void *arg)
 {
 	struct switch_attr *op = arg;
 	struct genl_info *info = cb->info;
@@ -393,18 +357,15 @@ swconfig_dump_attr(struct swconfig_callback *cb, void *arg)
 			op->description))
 			goto nla_put_failure;
 
-        genlmsg_end(msg, hdr);
-
-	return 0;
-
+	genlmsg_end(msg, hdr);
+	return msg->len;
 nla_put_failure:
 	genlmsg_cancel(msg, hdr);
 	return -EMSGSIZE;
 }
 
 /* spread multipart messages across multiple message buffers */
-static int
-swconfig_send_multipart(struct swconfig_callback *cb, void *arg)
+static int swconfig_send_multipart(struct swconfig_callback *cb, void *arg)
 {
 	struct genl_info *info = cb->info;
 	int restart = 0;
@@ -445,8 +406,7 @@ swconfig_send_multipart(struct swconfig_callback *cb, void *arg)
 	return -1;
 }
 
-static int
-swconfig_list_attrs(struct sk_buff *skb, struct genl_info *info)
+static int swconfig_list_attrs(struct sk_buff *skb, struct genl_info *info)
 {
 	struct genlmsghdr *hdr = nlmsg_data(info->nlhdr);
 	const struct switch_attrlist *alist;
@@ -464,7 +424,7 @@ swconfig_list_attrs(struct sk_buff *skb, struct genl_info *info)
 	if (!dev)
 		return -EINVAL;
 
-	switch(hdr->cmd) {
+	switch (hdr->cmd) {
 	case SWITCH_CMD_LIST_GLOBAL:
 		alist = &dev->ops->attr_global;
 		def_list = default_global;
@@ -524,14 +484,14 @@ swconfig_list_attrs(struct sk_buff *skb, struct genl_info *info)
 	return err;
 }
 
-static const struct switch_attr *
-swconfig_lookup_attr(struct switch_dev *dev, struct genl_info *info,
-		struct switch_val *val)
+static const struct switch_attr *swconfig_lookup_attr(struct switch_dev *dev,
+						      struct genl_info *info,
+						      struct switch_val *val)
 {
 	struct genlmsghdr *hdr = nlmsg_data(info->nlhdr);
 	const struct switch_attrlist *alist;
 	const struct switch_attr *attr = NULL;
-	int attr_id;
+	unsigned int attr_id;
 
 	/* defaults */
 	struct switch_attr *def_list;
@@ -541,7 +501,7 @@ swconfig_lookup_attr(struct switch_dev *dev, struct genl_info *info,
 	if (!info->attrs[SWITCH_ATTR_OP_ID])
 		goto done;
 
-	switch(hdr->cmd) {
+	switch (hdr->cmd) {
 	case SWITCH_CMD_SET_GLOBAL:
 	case SWITCH_CMD_GET_GLOBAL:
 		alist = &dev->ops->attr_global;
@@ -600,14 +560,13 @@ swconfig_lookup_attr(struct switch_dev *dev, struct genl_info *info,
 
 done:
 	if (!attr)
-		DPRINTF("attribute lookup failed\n");
+		pr_debug("attribute lookup failed\n");
 	val->attr = attr;
 	return attr;
 }
 
-static int
-swconfig_parse_ports(struct sk_buff *msg, struct nlattr *head,
-		struct switch_val *val, int max)
+static int swconfig_parse_ports(struct sk_buff *msg, struct nlattr *head,
+				struct switch_val *val, int max)
 {
 	struct nlattr *nla;
 	int rem;
@@ -615,13 +574,20 @@ swconfig_parse_ports(struct sk_buff *msg, struct nlattr *head,
 	val->len = 0;
 	nla_for_each_nested(nla, head, rem) {
 		struct nlattr *tb[SWITCH_PORT_ATTR_MAX+1];
-		struct switch_port *port = &val->value.ports[val->len];
+		struct switch_port *port;
 
 		if (val->len >= max)
 			return -EINVAL;
 
+		port = &val->value.ports[val->len];
+
+#if KERNEL_VERSION(4, 12, 0) > LINUX_VERSION_CODE
+		if (nla_parse_nested(tb, SWITCH_PORT_ATTR_MAX, nla,
+				     port_policy))
+#else
 		if (nla_parse_nested(tb, SWITCH_PORT_ATTR_MAX, nla,
-				port_policy))
+				     port_policy, NULL))
+#endif
 			return -EINVAL;
 
 		if (!tb[SWITCH_PORT_ID])
@@ -636,14 +602,35 @@ swconfig_parse_ports(struct sk_buff *msg, struct nlattr *head,
 	return 0;
 }
 
-static int
-swconfig_set_attr(struct sk_buff *skb, struct genl_info *info)
+static int swconfig_parse_link(struct sk_buff *msg, struct nlattr *nla,
+			       struct switch_port_link *link)
+{
+	struct nlattr *tb[SWITCH_LINK_ATTR_MAX + 1];
+
+#if KERNEL_VERSION(4, 12, 0) > LINUX_VERSION_CODE
+	if (nla_parse_nested(tb, SWITCH_LINK_ATTR_MAX, nla, link_policy))
+#else
+	if (nla_parse_nested(tb, SWITCH_LINK_ATTR_MAX, nla, link_policy, NULL))
+#endif
+		return -EINVAL;
+
+	link->duplex = !!tb[SWITCH_LINK_FLAG_DUPLEX];
+	link->aneg = !!tb[SWITCH_LINK_FLAG_ANEG];
+	link->speed = nla_get_u32(tb[SWITCH_LINK_SPEED]);
+
+	return 0;
+}
+
+static int swconfig_set_attr(struct sk_buff *skb, struct genl_info *info)
 {
 	const struct switch_attr *attr;
 	struct switch_dev *dev;
 	struct switch_val val;
 	int err = -EINVAL;
 
+	if (!capable(CAP_NET_ADMIN))
+		return -EPERM;
+
 	dev = swconfig_get_dev(info);
 	if (!dev)
 		return -EINVAL;
@@ -654,7 +641,7 @@ swconfig_set_attr(struct sk_buff *skb, struct genl_info *info)
 		goto error;
 
 	val.attr = attr;
-	switch(attr->type) {
+	switch (attr->type) {
 	case SWITCH_TYPE_NOVAL:
 		break;
 	case SWITCH_TYPE_INT:
@@ -677,7 +664,23 @@ swconfig_set_attr(struct sk_buff *skb, struct genl_info *info)
 		/* TODO: implement multipart? */
 		if (info->attrs[SWITCH_ATTR_OP_VALUE_PORTS]) {
 			err = swconfig_parse_ports(skb,
-				info->attrs[SWITCH_ATTR_OP_VALUE_PORTS], &val, dev->ports);
+				info->attrs[SWITCH_ATTR_OP_VALUE_PORTS],
+				&val, dev->ports);
+			if (err < 0)
+				goto error;
+		} else {
+			val.len = 0;
+			err = 0;
+		}
+		break;
+	case SWITCH_TYPE_LINK:
+		val.value.link = &dev->linkbuf;
+		memset(&dev->linkbuf, 0, sizeof(struct switch_port_link));
+
+		if (info->attrs[SWITCH_ATTR_OP_VALUE_LINK]) {
+			err = swconfig_parse_link(skb,
+						  info->attrs[SWITCH_ATTR_OP_VALUE_LINK],
+						  val.value.link);
 			if (err < 0)
 				goto error;
 		} else {
@@ -695,16 +698,14 @@ swconfig_set_attr(struct sk_buff *skb, struct genl_info *info)
 	return err;
 }
 
-static int
-swconfig_close_portlist(struct swconfig_callback *cb, void *arg)
+static int swconfig_close_portlist(struct swconfig_callback *cb, void *arg)
 {
 	if (cb->nest[0])
 		nla_nest_end(cb->msg, cb->nest[0]);
 	return 0;
 }
 
-static int
-swconfig_send_port(struct swconfig_callback *cb, void *arg)
+static int swconfig_send_port(struct swconfig_callback *cb, void *arg)
 {
 	const struct switch_port *port = arg;
 	struct nlattr *p = NULL;
@@ -736,9 +737,8 @@ swconfig_send_port(struct swconfig_callback *cb, void *arg)
 	return -1;
 }
 
-static int
-swconfig_send_ports(struct sk_buff **msg, struct genl_info *info, int attr,
-		const struct switch_val *val)
+static int swconfig_send_ports(struct sk_buff **msg, struct genl_info *info,
+			       int attr, const struct switch_val *val)
 {
 	struct swconfig_callback cb;
 	int err = 0;
@@ -768,8 +768,53 @@ swconfig_send_ports(struct sk_buff **msg, struct genl_info *info, int attr,
 	return err;
 }
 
-static int
-swconfig_get_attr(struct sk_buff *skb, struct genl_info *info)
+static int swconfig_send_link(struct sk_buff *msg, struct genl_info *info,
+			      int attr, const struct switch_port_link *link)
+{
+	struct nlattr *p = NULL;
+	int err = 0;
+
+	p = nla_nest_start(msg, attr);
+	if (link->link) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_LINK))
+			goto nla_put_failure;
+	}
+	if (link->duplex) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_DUPLEX))
+			goto nla_put_failure;
+	}
+	if (link->aneg) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_ANEG))
+			goto nla_put_failure;
+	}
+	if (link->tx_flow) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_TX_FLOW))
+			goto nla_put_failure;
+	}
+	if (link->rx_flow) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_RX_FLOW))
+			goto nla_put_failure;
+	}
+	if (nla_put_u32(msg, SWITCH_LINK_SPEED, link->speed))
+		goto nla_put_failure;
+	if (link->eee & ADVERTISED_100baseT_Full) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_EEE_100BASET))
+			goto nla_put_failure;
+	}
+	if (link->eee & ADVERTISED_1000baseT_Full) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_EEE_1000BASET))
+			goto nla_put_failure;
+	}
+	nla_nest_end(msg, p);
+
+	return err;
+
+nla_put_failure:
+	nla_nest_cancel(msg, p);
+	return -1;
+}
+
+static int swconfig_get_attr(struct sk_buff *skb, struct genl_info *info)
 {
 	struct genlmsghdr *hdr = nlmsg_data(info->nlhdr);
 	const struct switch_attr *attr;
@@ -792,6 +837,9 @@ swconfig_get_attr(struct sk_buff *skb, struct genl_info *info)
 		val.value.ports = dev->portbuf;
 		memset(dev->portbuf, 0,
 			sizeof(struct switch_port) * dev->ports);
+	} else if (attr->type == SWITCH_TYPE_LINK) {
+		val.value.link = &dev->linkbuf;
+		memset(&dev->linkbuf, 0, sizeof(struct switch_port_link));
 	}
 
 	err = attr->get(dev, attr, &val);
@@ -807,7 +855,7 @@ swconfig_get_attr(struct sk_buff *skb, struct genl_info *info)
 	if (IS_ERR(hdr))
 		goto nla_put_failure;
 
-	switch(attr->type) {
+	switch (attr->type) {
 	case SWITCH_TYPE_INT:
 		if (nla_put_u32(msg, SWITCH_ATTR_OP_VALUE_INT, val.value.i))
 			goto nla_put_failure;
@@ -822,13 +870,22 @@ swconfig_get_attr(struct sk_buff *skb, struct genl_info *info)
 		if (err < 0)
 			goto nla_put_failure;
 		break;
+	case SWITCH_TYPE_LINK:
+		err = swconfig_send_link(msg, info,
+					 SWITCH_ATTR_OP_VALUE_LINK,
+					 val.value.link);
+		if (err < 0)
+			goto nla_put_failure;
+		break;
 	default:
-		DPRINTF("invalid type in attribute\n");
+		pr_debug("invalid type in attribute\n");
 		err = -EINVAL;
-		goto error;
+		goto nla_put_failure;
 	}
-
-        genlmsg_end(msg, hdr);
+	genlmsg_end(msg, hdr);
+	err = msg->len;
+	if (err < 0)
+		goto nla_put_failure;
 
 	swconfig_put_dev(dev);
 	return genlmsg_reply(msg, info);
@@ -843,9 +900,8 @@ swconfig_get_attr(struct sk_buff *skb, struct genl_info *info)
 	return err;
 }
 
-static int
-swconfig_send_switch(struct sk_buff *msg, u32 pid, u32 seq, int flags,
-		const struct switch_dev *dev)
+static int swconfig_send_switch(struct sk_buff *msg, u32 pid, u32 seq,
+				int flags, const struct switch_dev *dev)
 {
 	struct nlattr *p = NULL, *m = NULL;
 	void *hdr;
@@ -879,25 +935,25 @@ swconfig_send_switch(struct sk_buff *msg, u32 pid, u32 seq, int flags,
 		if (!p)
 			continue;
 		if (dev->portmap[i].s) {
-			if (nla_put_string(msg, SWITCH_PORTMAP_SEGMENT, dev->portmap[i].s))
+			if (nla_put_string(msg, SWITCH_PORTMAP_SEGMENT,
+					   dev->portmap[i].s))
 				goto nla_put_failure;
-			if (nla_put_u32(msg, SWITCH_PORTMAP_VIRT, dev->portmap[i].virt))
+			if (nla_put_u32(msg, SWITCH_PORTMAP_VIRT,
+					dev->portmap[i].virt))
 				goto nla_put_failure;
 		}
 		nla_nest_end(msg, p);
 	}
 	nla_nest_end(msg, m);
-        genlmsg_end(msg, hdr);
-
-	return 0;
-
+	genlmsg_end(msg, hdr);
+	return msg->len;
 nla_put_failure:
 	genlmsg_cancel(msg, hdr);
 	return -EMSGSIZE;
 }
 
 static int swconfig_dump_switches(struct sk_buff *skb,
-		struct netlink_callback *cb)
+				  struct netlink_callback *cb)
 {
 	struct switch_dev *dev;
 	int start = cb->args[0];
@@ -908,8 +964,8 @@ static int swconfig_dump_switches(struct sk_buff *skb,
 		if (++idx <= start)
 			continue;
 		if (swconfig_send_switch(skb, NETLINK_CB(cb->skb).portid,
-				cb->nlh->nlmsg_seq, NLM_F_MULTI,
-				dev) < 0)
+					 cb->nlh->nlmsg_seq, NLM_F_MULTI,
+					 dev) < 0)
 			break;
 	}
 	swconfig_unlock();
@@ -918,8 +974,7 @@ static int swconfig_dump_switches(struct sk_buff *skb,
 	return skb->len;
 }
 
-static int
-swconfig_done(struct netlink_callback *cb)
+static int swconfig_done(struct netlink_callback *cb)
 {
 	return 0;
 }
@@ -957,16 +1012,19 @@ static struct genl_ops swconfig_ops[] = {
 	},
 	{
 		.cmd = SWITCH_CMD_SET_GLOBAL,
+		.flags = GENL_ADMIN_PERM,
 		.doit = swconfig_set_attr,
 		.policy = switch_policy,
 	},
 	{
 		.cmd = SWITCH_CMD_SET_VLAN,
+		.flags = GENL_ADMIN_PERM,
 		.doit = swconfig_set_attr,
 		.policy = switch_policy,
 	},
 	{
 		.cmd = SWITCH_CMD_SET_PORT,
+		.flags = GENL_ADMIN_PERM,
 		.doit = swconfig_set_attr,
 		.policy = switch_policy,
 	},
@@ -978,9 +1036,21 @@ static struct genl_ops swconfig_ops[] = {
 	}
 };
 
+static struct genl_family switch_fam = {
+#if KERNEL_VERSION(4, 10, 0) > LINUX_VERSION_CODE
+	.id = GENL_ID_GENERATE,
+#endif
+	.name = "switch",
+	.hdrsize = 0,
+	.version = 1,
+	.maxattr = SWITCH_ATTR_MAX,
+	.module = THIS_MODULE,
+	.ops = swconfig_ops,
+	.n_ops = ARRAY_SIZE(swconfig_ops),
+};
+
 #ifdef CONFIG_OF
-void
-of_switch_load_portmap(struct switch_dev *dev)
+void of_switch_load_portmap(struct switch_dev *dev)
 {
 	struct device_node *port;
 
@@ -992,7 +1062,7 @@ of_switch_load_portmap(struct switch_dev *dev)
 		const char *segment;
 		int size, phys;
 
-		if (of_device_is_compatible(port, "swconfig,port"))
+		if (!of_device_is_compatible(port, "swconfig,port"))
 			continue;
 
 		if (of_property_read_string(port, "swconfig,segment", &segment))
@@ -1003,31 +1073,31 @@ of_switch_load_portmap(struct switch_dev *dev)
 			continue;
 
 		if (size != (2 * sizeof(*prop))) {
-			pr_err("%s: failed to parse port mapping\n", port->name);
+			pr_err("%s: failed to parse port mapping\n",
+			       port->name);
 			continue;
 		}
 
 		phys = be32_to_cpup(prop++);
 		if ((phys < 0) | (phys >= dev->ports)) {
-			pr_err("%s: physical port index out of range\n", port->name);
+			pr_err("%s: physical port index out of range\n",
+			       port->name);
 			continue;
 		}
 
 		dev->portmap[phys].s = kstrdup(segment, GFP_KERNEL);
 		dev->portmap[phys].virt = be32_to_cpup(prop);
 		pr_debug("Found port: %s, physical: %d, virtual: %d\n",
-			segment, phys, dev->portmap[phys].virt);
+			 segment, phys, dev->portmap[phys].virt);
 	}
 }
 #endif
 
-int
-register_switch(struct switch_dev *dev, struct net_device *netdev)
+int register_switch(struct switch_dev *dev, struct net_device *netdev)
 {
 	struct switch_dev *sdev;
 	const int max_switches = 8 * sizeof(unsigned long);
 	unsigned long in_use = 0;
-	int err;
 	int i;
 
 	INIT_LIST_HEAD(&dev->dev_list);
@@ -1038,13 +1108,18 @@ register_switch(struct switch_dev *dev, struct net_device *netdev)
 	}
 	BUG_ON(!dev->alias);
 
+	/* Make sure swdev_id doesn't overflow */
+	if (swdev_id == INT_MAX) {
+		return -ENOMEM;
+	}
+
 	if (dev->ports > 0) {
-		dev->portbuf = kzalloc(sizeof(struct switch_port) * dev->ports,
-				GFP_KERNEL);
+		dev->portbuf = kcalloc(dev->ports, sizeof(*dev->portbuf),
+				       GFP_KERNEL);
 		if (!dev->portbuf)
 			return -ENOMEM;
-		dev->portmap = kzalloc(sizeof(struct switch_portmap) * dev->ports,
-				GFP_KERNEL);
+		dev->portmap = kcalloc(dev->ports, sizeof(*dev->portmap),
+				       GFP_KERNEL);
 		if (!dev->portmap) {
 			kfree(dev->portbuf);
 			return -ENOMEM;
@@ -1078,21 +1153,15 @@ register_switch(struct switch_dev *dev, struct net_device *netdev)
 	/* fill device name */
 	snprintf(dev->devname, IFNAMSIZ, SWCONFIG_DEVNAME, i);
 
-	list_add(&dev->dev_list, &swdevs);
+	list_add_tail(&dev->dev_list, &swdevs);
 	swconfig_unlock();
 
-	err = swconfig_create_led_trigger(dev);
-	if (err)
-		return err;
-
 	return 0;
 }
 EXPORT_SYMBOL_GPL(register_switch);
 
-void
-unregister_switch(struct switch_dev *dev)
+void unregister_switch(struct switch_dev *dev)
 {
-	swconfig_destroy_led_trigger(dev);
 	kfree(dev->portbuf);
 	mutex_lock(&dev->sw_mutex);
 	swconfig_lock();
@@ -1102,22 +1171,53 @@ unregister_switch(struct switch_dev *dev)
 }
 EXPORT_SYMBOL_GPL(unregister_switch);
 
-
-static int __init
-swconfig_init(void)
+int switch_generic_set_link(struct switch_dev *dev, int port,
+			    struct switch_port_link *link)
 {
-	int err;
+	if (WARN_ON(!dev->ops->phy_write16))
+		return -ENOTSUPP;
 
-	INIT_LIST_HEAD(&swdevs);
-	err = genl_register_family_with_ops(&switch_fam, swconfig_ops);
-	if (err)
-		return err;
+	/* Generic implementation */
+	if (link->aneg) {
+		dev->ops->phy_write16(dev, port, MII_BMCR, 0x0000);
+		dev->ops->phy_write16(dev, port, MII_BMCR, BMCR_ANENABLE | BMCR_ANRESTART);
+	} else {
+		u16 bmcr = 0;
+
+		if (link->duplex)
+			bmcr |= BMCR_FULLDPLX;
+
+		switch (link->speed) {
+		case SWITCH_PORT_SPEED_10:
+			break;
+		case SWITCH_PORT_SPEED_100:
+			bmcr |= BMCR_SPEED100;
+			break;
+		case SWITCH_PORT_SPEED_1000:
+			bmcr |= BMCR_SPEED1000;
+			break;
+		default:
+			return -ENOTSUPP;
+		}
+
+		dev->ops->phy_write16(dev, port, MII_BMCR, bmcr);
+	}
 
 	return 0;
 }
 
-static void __exit
-swconfig_exit(void)
+static int __init swconfig_init(void)
+{
+	INIT_LIST_HEAD(&swdevs);
+
+#if KERNEL_VERSION(4, 10, 0) > LINUX_VERSION_CODE
+	return genl_register_family_with_ops(&switch_fam, swconfig_ops);
+#else
+	return genl_register_family(&switch_fam);
+#endif
+}
+
+static void __exit swconfig_exit(void)
 {
 	genl_unregister_family(&switch_fam);
 }
diff --git a/drivers/net/phy/swconfig_leds.c b/drivers/net/phy/swconfig_leds.c
deleted file mode 100644
index 2fc5d55..0000000
--- a/drivers/net/phy/swconfig_leds.c
+++ /dev/null
@@ -1,354 +0,0 @@
-/*
- * swconfig_led.c: LED trigger support for the switch configuration API
- *
- * Copyright (C) 2011 Gabor Juhos <juhosg@openwrt.org>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or (at your option) any later version.
- *
- */
-
-#ifdef CONFIG_SWCONFIG_LEDS
-
-#include <linux/leds.h>
-#include <linux/ctype.h>
-#include <linux/device.h>
-#include <linux/workqueue.h>
-
-#define SWCONFIG_LED_TIMER_INTERVAL	(HZ / 10)
-#define SWCONFIG_LED_NUM_PORTS		32
-
-struct switch_led_trigger {
-	struct led_trigger trig;
-	struct switch_dev *swdev;
-
-	struct delayed_work sw_led_work;
-	u32 port_mask;
-	u32 port_link;
-	unsigned long port_traffic[SWCONFIG_LED_NUM_PORTS];
-};
-
-struct swconfig_trig_data {
-	struct led_classdev *led_cdev;
-	struct switch_dev *swdev;
-
-	rwlock_t lock;
-	u32 port_mask;
-
-	bool prev_link;
-	unsigned long prev_traffic;
-	enum led_brightness prev_brightness;
-};
-
-static void
-swconfig_trig_set_brightness(struct swconfig_trig_data *trig_data,
-			     enum led_brightness brightness)
-{
-	led_set_brightness(trig_data->led_cdev, brightness);
-	trig_data->prev_brightness = brightness;
-}
-
-static void
-swconfig_trig_update_port_mask(struct led_trigger *trigger)
-{
-	struct list_head *entry;
-	struct switch_led_trigger *sw_trig;
-	u32 port_mask;
-
-	if (!trigger)
-		return;
-
-	sw_trig = (void *) trigger;
-
-	port_mask = 0;
-	read_lock(&trigger->leddev_list_lock);
-	list_for_each(entry, &trigger->led_cdevs) {
-		struct led_classdev *led_cdev;
-		struct swconfig_trig_data *trig_data;
-
-		led_cdev = list_entry(entry, struct led_classdev, trig_list);
-		trig_data = led_cdev->trigger_data;
-		if (trig_data) {
-			read_lock(&trig_data->lock);
-			port_mask |= trig_data->port_mask;
-			read_unlock(&trig_data->lock);
-		}
-	}
-	read_unlock(&trigger->leddev_list_lock);
-
-	sw_trig->port_mask = port_mask;
-
-	if (port_mask)
-		schedule_delayed_work(&sw_trig->sw_led_work,
-				      SWCONFIG_LED_TIMER_INTERVAL);
-	else
-		cancel_delayed_work_sync(&sw_trig->sw_led_work);
-}
-
-static ssize_t
-swconfig_trig_port_mask_store(struct device *dev, struct device_attribute *attr,
-			      const char *buf, size_t size)
-{
-	struct led_classdev *led_cdev = dev_get_drvdata(dev);
-	struct swconfig_trig_data *trig_data = led_cdev->trigger_data;
-	unsigned long port_mask;
-	ssize_t ret = -EINVAL;
-	char *after;
-	size_t count;
-
-	port_mask = simple_strtoul(buf, &after, 16);
-	count =	after - buf;
-
-	if (*after && isspace(*after))
-		count++;
-
-	if (count == size) {
-		bool changed;
-
-		write_lock(&trig_data->lock);
-
-		changed = (trig_data->port_mask != port_mask);
-		if (changed) {
-			trig_data->port_mask = port_mask;
-			if (port_mask == 0)
-				swconfig_trig_set_brightness(trig_data, LED_OFF);
-		}
-
-		write_unlock(&trig_data->lock);
-
-		if (changed)
-			swconfig_trig_update_port_mask(led_cdev->trigger);
-
-		ret = count;
-	}
-
-	return ret;
-}
-
-static ssize_t
-swconfig_trig_port_mask_show(struct device *dev, struct device_attribute *attr,
-			     char *buf)
-{
-	struct led_classdev *led_cdev = dev_get_drvdata(dev);
-	struct swconfig_trig_data *trig_data = led_cdev->trigger_data;
-
-	read_lock(&trig_data->lock);
-	sprintf(buf, "%#x\n", trig_data->port_mask);
-	read_unlock(&trig_data->lock);
-
-	return strlen(buf) + 1;
-}
-
-static DEVICE_ATTR(port_mask, 0644, swconfig_trig_port_mask_show,
-		   swconfig_trig_port_mask_store);
-
-static void
-swconfig_trig_activate(struct led_classdev *led_cdev)
-{
-	struct switch_led_trigger *sw_trig;
-	struct swconfig_trig_data *trig_data;
-	int err;
-
-	if (led_cdev->trigger->activate != swconfig_trig_activate)
-		return;
-
-	trig_data = kzalloc(sizeof(struct swconfig_trig_data), GFP_KERNEL);
-	if (!trig_data)
-		return;
-
-	sw_trig = (void *) led_cdev->trigger;
-
-	rwlock_init(&trig_data->lock);
-	trig_data->led_cdev = led_cdev;
-	trig_data->swdev = sw_trig->swdev;
-	led_cdev->trigger_data = trig_data;
-
-	err = device_create_file(led_cdev->dev, &dev_attr_port_mask);
-	if (err)
-		goto err_free;
-
-	return;
-
-err_free:
-	led_cdev->trigger_data = NULL;
-	kfree(trig_data);
-}
-
-static void
-swconfig_trig_deactivate(struct led_classdev *led_cdev)
-{
-	struct swconfig_trig_data *trig_data;
-
-	swconfig_trig_update_port_mask(led_cdev->trigger);
-
-	trig_data = (void *) led_cdev->trigger_data;
-	if (trig_data) {
-		device_remove_file(led_cdev->dev, &dev_attr_port_mask);
-		kfree(trig_data);
-	}
-}
-
-static void
-swconfig_trig_led_event(struct switch_led_trigger *sw_trig,
-			struct led_classdev *led_cdev)
-{
-	struct swconfig_trig_data *trig_data;
-	u32 port_mask;
-	bool link;
-
-	trig_data = led_cdev->trigger_data;
-	if (!trig_data)
-		return;
-
-	read_lock(&trig_data->lock);
-	port_mask = trig_data->port_mask;
-	read_unlock(&trig_data->lock);
-
-	link = !!(sw_trig->port_link & port_mask);
-	if (!link) {
-		if (link != trig_data->prev_link)
-			led_set_brightness(trig_data->led_cdev, LED_OFF);
-	} else {
-		unsigned long traffic;
-		int i;
-
-		traffic = 0;
-		for (i = 0; i < SWCONFIG_LED_NUM_PORTS; i++) {
-			if (port_mask & (1 << i))
-				traffic += sw_trig->port_traffic[i];
-		}
-
-		if (trig_data->prev_brightness != LED_FULL)
-			swconfig_trig_set_brightness(trig_data, LED_FULL);
-		else if (traffic != trig_data->prev_traffic)
-			swconfig_trig_set_brightness(trig_data, LED_OFF);
-
-		trig_data->prev_traffic = traffic;
-	}
-
-	trig_data->prev_link = link;
-}
-
-static void
-swconfig_trig_update_leds(struct switch_led_trigger *sw_trig)
-{
-	struct list_head *entry;
-	struct led_trigger *trigger;
-
-	trigger = &sw_trig->trig;
-	read_lock(&trigger->leddev_list_lock);
-	list_for_each(entry, &trigger->led_cdevs) {
-		struct led_classdev *led_cdev;
-
-		led_cdev = list_entry(entry, struct led_classdev, trig_list);
-		swconfig_trig_led_event(sw_trig, led_cdev);
-	}
-	read_unlock(&trigger->leddev_list_lock);
-}
-
-static void
-swconfig_led_work_func(struct work_struct *work)
-{
-	struct switch_led_trigger *sw_trig;
-	struct switch_dev *swdev;
-	u32 port_mask;
-	u32 link;
-	int i;
-
-	sw_trig = container_of(work, struct switch_led_trigger,
-			       sw_led_work.work);
-
-	port_mask = sw_trig->port_mask;
-	swdev = sw_trig->swdev;
-
-	link = 0;
-	for (i = 0; i < SWCONFIG_LED_NUM_PORTS; i++) {
-		u32 port_bit;
-
-		port_bit = BIT(i);
-		if ((port_mask & port_bit) == 0)
-			continue;
-
-		if (swdev->ops->get_port_link) {
-			struct switch_port_link port_link;
-
-			memset(&port_link, '\0', sizeof(port_link));
-			swdev->ops->get_port_link(swdev, i, &port_link);
-
-			if (port_link.link)
-				link |= port_bit;
-		}
-
-		if (swdev->ops->get_port_stats) {
-			struct switch_port_stats port_stats;
-
-			memset(&port_stats, '\0', sizeof(port_stats));
-			swdev->ops->get_port_stats(swdev, i, &port_stats);
-			sw_trig->port_traffic[i] = port_stats.tx_bytes +
-						   port_stats.rx_bytes;
-		}
-	}
-
-	sw_trig->port_link = link;
-
-	swconfig_trig_update_leds(sw_trig);
-
-	schedule_delayed_work(&sw_trig->sw_led_work,
-			      SWCONFIG_LED_TIMER_INTERVAL);
-}
-
-static int
-swconfig_create_led_trigger(struct switch_dev *swdev)
-{
-	struct switch_led_trigger *sw_trig;
-	int err;
-
-	if (!swdev->ops->get_port_link)
-		return 0;
-
-	sw_trig = kzalloc(sizeof(struct switch_led_trigger), GFP_KERNEL);
-	if (!sw_trig)
-		return -ENOMEM;
-
-	sw_trig->swdev = swdev;
-	sw_trig->trig.name = swdev->devname;
-	sw_trig->trig.activate = swconfig_trig_activate;
-	sw_trig->trig.deactivate = swconfig_trig_deactivate;
-
-	INIT_DELAYED_WORK(&sw_trig->sw_led_work, swconfig_led_work_func);
-
-	err = led_trigger_register(&sw_trig->trig);
-	if (err)
-		goto err_free;
-
-	swdev->led_trigger = sw_trig;
-
-	return 0;
-
-err_free:
-	kfree(sw_trig);
-	return err;
-}
-
-static void
-swconfig_destroy_led_trigger(struct switch_dev *swdev)
-{
-	struct switch_led_trigger *sw_trig;
-
-	sw_trig = swdev->led_trigger;
-	if (sw_trig) {
-		cancel_delayed_work_sync(&sw_trig->sw_led_work);
-		led_trigger_unregister(&sw_trig->trig);
-		kfree(sw_trig);
-	}
-}
-
-#else /* SWCONFIG_LEDS */
-static inline int
-swconfig_create_led_trigger(struct switch_dev *swdev) { return 0; }
-
-static inline void
-swconfig_destroy_led_trigger(struct switch_dev *swdev) { }
-#endif /* CONFIG_SWCONFIG_LEDS */
diff --git a/include/linux/switch.h b/include/linux/switch.h
index 258cc6d..cc86678 100644
--- a/include/linux/switch.h
+++ b/include/linux/switch.h
@@ -1,7 +1,7 @@
 /*
  * switch.h: Switch configuration API
  *
- * Copyright (C) 2008 Felix Fietkau <nbd@openwrt.org>
+ * Copyright (C) 2008 Felix Fietkau <nbd@nbd.name>
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
@@ -13,95 +13,11 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  */
+#ifndef _LINUX_SWITCH_H
+#define _LINUX_SWITCH_H
 
-#ifndef __LINUX_SWITCH_H
-#define __LINUX_SWITCH_H
-
-#include <linux/types.h>
-#include <linux/netdevice.h>
-#include <linux/netlink.h>
-#include <linux/genetlink.h>
-#ifndef __KERNEL__
-#include <netlink/netlink.h>
-#include <netlink/genl/genl.h>
-#include <netlink/genl/ctrl.h>
-#else
 #include <net/genetlink.h>
-#endif
-
-/* main attributes */
-enum {
-	SWITCH_ATTR_UNSPEC,
-	/* global */
-	SWITCH_ATTR_TYPE,
-	/* device */
-	SWITCH_ATTR_ID,
-	SWITCH_ATTR_DEV_NAME,
-	SWITCH_ATTR_ALIAS,
-	SWITCH_ATTR_NAME,
-	SWITCH_ATTR_VLANS,
-	SWITCH_ATTR_PORTS,
-	SWITCH_ATTR_PORTMAP,
-	SWITCH_ATTR_CPU_PORT,
-	/* attributes */
-	SWITCH_ATTR_OP_ID,
-	SWITCH_ATTR_OP_TYPE,
-	SWITCH_ATTR_OP_NAME,
-	SWITCH_ATTR_OP_PORT,
-	SWITCH_ATTR_OP_VLAN,
-	SWITCH_ATTR_OP_VALUE_INT,
-	SWITCH_ATTR_OP_VALUE_STR,
-	SWITCH_ATTR_OP_VALUE_PORTS,
-	SWITCH_ATTR_OP_DESCRIPTION,
-	/* port lists */
-	SWITCH_ATTR_PORT,
-	SWITCH_ATTR_MAX
-};
-
-enum {
-	/* port map */
-	SWITCH_PORTMAP_PORTS,
-	SWITCH_PORTMAP_SEGMENT,
-	SWITCH_PORTMAP_VIRT,
-	SWITCH_PORTMAP_MAX
-};
-
-/* commands */
-enum {
-	SWITCH_CMD_UNSPEC,
-	SWITCH_CMD_GET_SWITCH,
-	SWITCH_CMD_NEW_ATTR,
-	SWITCH_CMD_LIST_GLOBAL,
-	SWITCH_CMD_GET_GLOBAL,
-	SWITCH_CMD_SET_GLOBAL,
-	SWITCH_CMD_LIST_PORT,
-	SWITCH_CMD_GET_PORT,
-	SWITCH_CMD_SET_PORT,
-	SWITCH_CMD_LIST_VLAN,
-	SWITCH_CMD_GET_VLAN,
-	SWITCH_CMD_SET_VLAN
-};
-
-/* data types */
-enum switch_val_type {
-	SWITCH_TYPE_UNSPEC,
-	SWITCH_TYPE_INT,
-	SWITCH_TYPE_STRING,
-	SWITCH_TYPE_PORTS,
-	SWITCH_TYPE_NOVAL,
-};
-
-/* port nested attributes */
-enum {
-	SWITCH_PORT_UNSPEC,
-	SWITCH_PORT_ID,
-	SWITCH_PORT_FLAG_TAGGED,
-	SWITCH_PORT_ATTR_MAX
-};
-
-#define SWITCH_ATTR_DEFAULTS_OFFSET	0x1000
-
-#ifdef __KERNEL__
+#include <uapi/linux/switch.h>
 
 struct switch_dev;
 struct switch_op;
@@ -138,11 +54,13 @@ struct switch_port_link {
 	bool tx_flow;
 	bool rx_flow;
 	enum switch_port_speed speed;
+	/* in ethtool adv_t format */
+	u32 eee;
 };
 
 struct switch_port_stats {
-	unsigned long tx_bytes;
-	unsigned long rx_bytes;
+	unsigned long long tx_bytes;
+	unsigned long long rx_bytes;
 };
 
 /**
@@ -177,8 +95,13 @@ struct switch_dev_ops {
 
 	int (*get_port_link)(struct switch_dev *dev, int port,
 			     struct switch_port_link *link);
+	int (*set_port_link)(struct switch_dev *dev, int port,
+			     struct switch_port_link *link);
 	int (*get_port_stats)(struct switch_dev *dev, int port,
 			      struct switch_port_stats *stats);
+
+	int (*phy_read16)(struct switch_dev *dev, int addr, u8 reg, u16 *value);
+	int (*phy_write16)(struct switch_dev *dev, int addr, u8 reg, u16 value);
 };
 
 struct switch_dev {
@@ -193,18 +116,19 @@ struct switch_dev {
 	struct net_device *netdev;
 	struct mii_bus *mii_bus;
 
-	int ports;
-	int vlans;
-	int cpu_port;
+	unsigned int ports;
+	unsigned int vlans;
+	unsigned int cpu_port;
 
 	/* the following fields are internal for swconfig */
-	int id;
+	unsigned int id;
 	struct list_head dev_list;
 	unsigned long def_global, def_port, def_vlan;
 
 	struct mutex sw_mutex;
 	struct switch_port *portbuf;
 	struct switch_portmap *portmap;
+	struct switch_port_link linkbuf;
 
 	char buf[128];
 
@@ -225,12 +149,13 @@ struct switch_portmap {
 
 struct switch_val {
 	const struct switch_attr *attr;
-	int port_vlan;
-	int len;
+	unsigned int port_vlan;
+	unsigned int len;
 	union {
 		const char *s;
 		u32 i;
 		struct switch_port *ports;
+		struct switch_port_link *link;
 	} value;
 };
 
@@ -249,6 +174,7 @@ struct switch_attr {
 	int max;
 };
 
-#endif
+int switch_generic_set_link(struct switch_dev *dev, int port,
+			    struct switch_port_link *link);
 
-#endif
+#endif /* _LINUX_SWITCH_H */
diff --git a/include/uapi/linux/switch.h b/include/uapi/linux/switch.h
index a59b239..ea44965 100644
--- a/include/uapi/linux/switch.h
+++ b/include/uapi/linux/switch.h
@@ -1,7 +1,7 @@
 /*
  * switch.h: Switch configuration API
  *
- * Copyright (C) 2008 Felix Fietkau <nbd@openwrt.org>
+ * Copyright (C) 2008 Felix Fietkau <nbd@nbd.name>
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
@@ -50,6 +50,7 @@ enum {
 	SWITCH_ATTR_OP_VALUE_INT,
 	SWITCH_ATTR_OP_VALUE_STR,
 	SWITCH_ATTR_OP_VALUE_PORTS,
+	SWITCH_ATTR_OP_VALUE_LINK,
 	SWITCH_ATTR_OP_DESCRIPTION,
 	/* port lists */
 	SWITCH_ATTR_PORT,
@@ -86,6 +87,7 @@ enum switch_val_type {
 	SWITCH_TYPE_INT,
 	SWITCH_TYPE_STRING,
 	SWITCH_TYPE_PORTS,
+	SWITCH_TYPE_LINK,
 	SWITCH_TYPE_NOVAL,
 };
 
@@ -97,6 +99,20 @@ enum {
 	SWITCH_PORT_ATTR_MAX
 };
 
+/* link nested attributes */
+enum {
+	SWITCH_LINK_UNSPEC,
+	SWITCH_LINK_FLAG_LINK,
+	SWITCH_LINK_FLAG_DUPLEX,
+	SWITCH_LINK_FLAG_ANEG,
+	SWITCH_LINK_FLAG_TX_FLOW,
+	SWITCH_LINK_FLAG_RX_FLOW,
+	SWITCH_LINK_SPEED,
+	SWITCH_LINK_FLAG_EEE_100BASET,
+	SWITCH_LINK_FLAG_EEE_1000BASET,
+	SWITCH_LINK_ATTR_MAX,
+};
+
 #define SWITCH_ATTR_DEFAULTS_OFFSET	0x1000
 
 
-- 
2.7.4

