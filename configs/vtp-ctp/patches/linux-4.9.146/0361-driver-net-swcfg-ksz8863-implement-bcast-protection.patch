From 0d0781abf47382d29ecadbf662a3c420cb7adcd0 Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Thu, 4 Jul 2019 16:53:58 +0200
Subject: [PATCH] driver: net: swcfg: ksz8863: implement bcast protection

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/phy/ksz8863-cfg.c | 262 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 259 insertions(+), 3 deletions(-)

diff --git a/drivers/net/phy/ksz8863-cfg.c b/drivers/net/phy/ksz8863-cfg.c
index f732dba..771f808 100644
--- a/drivers/net/phy/ksz8863-cfg.c
+++ b/drivers/net/phy/ksz8863-cfg.c
@@ -27,14 +27,270 @@ struct ksz8863_cfg {
 
 #define get_ksz8863_cfg(_dev) container_of((_dev), struct ksz8863_cfg, swdev)
 
+static int ksz8863_cfg_smi_read(struct ksz8863_cfg *cfg, int reg, u8 *val)
+{
+	return cfg->chip->mii_ops->read(cfg->chip, reg, val);
+}
+
+static int ksz8863_cfg_smi_write(struct ksz8863_cfg *cfg, int reg, u8 val)
+{
+	return cfg->chip->mii_ops->write(cfg->chip, reg, val);
+}
+
+static inline void ksz8863_reg_lock(struct ksz8863_cfg *cfg)
+{
+	mutex_lock(&cfg->chip->reg_lock);
+}
+
+static inline void ksz8863_reg_unlock(struct ksz8863_cfg *cfg)
+{
+	mutex_unlock(&cfg->chip->reg_lock);
+}
+
+static inline int ksz8863_cfg_set_bit(struct ksz8863_cfg *cfg, int reg, u8 mask,
+				      bool val, bool lock)
+{
+	int err;
+	u8 rv;
+
+	if (lock)
+		ksz8863_reg_lock(cfg);
+
+	err = ksz8863_cfg_smi_read(cfg, reg, &rv);
+	if (err)
+		goto out_unlock;
+
+	rv &= ~mask;
+	if (val)
+		rv |= mask;
+
+	err = ksz8863_cfg_smi_write(cfg, reg, rv);
+
+out_unlock:
+	if (lock)
+		ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
+static bool is_ksz8863_cfg_10bt(struct ksz8863_cfg *cfg)
+{
+	int err;
+	u8 val;
+
+	err = ksz8863_cfg_smi_read(cfg, KSZ8863_REG_GL_CTRL4, &val);
+	if (err)
+		return false;
+
+	return val & KSZ8863_REG_GL_CTRL4_10_MBIT;
+}
+
+static int ksz8863_cfg_set_bcast_rate(struct ksz8863_cfg *cfg,
+				      int frames_per_interval)
+{
+	int err;
+	u8 gl_ctrl4_val;
+	u8 gl_ctrl5_val;
+
+	err = ksz8863_cfg_smi_read(cfg, KSZ8863_REG_GL_CTRL4, &gl_ctrl4_val);
+	if (err)
+		return err;
+
+	gl_ctrl4_val &= ~KSZ8863_REG_GL_CTRL4_BCAST_STORM_RATE_HI_MASK;
+	gl_ctrl4_val |= (frames_per_interval >> 8) &
+			KSZ8863_REG_GL_CTRL4_BCAST_STORM_RATE_HI_MASK;
+	gl_ctrl5_val = frames_per_interval &
+			KSZ8863_REG_GL_CTRL5_BCAST_STORM_RATE_LO_MASK;
+
+	err = ksz8863_cfg_smi_write(cfg, KSZ8863_REG_GL_CTRL5, gl_ctrl5_val);
+	if (err)
+		return err;
+
+	return ksz8863_cfg_smi_write(cfg, KSZ8863_REG_GL_CTRL4, gl_ctrl4_val);
+}
+
+static int ksz8863_cfg_get_bcast_rate(struct ksz8863_cfg *cfg,
+				      int *frames_per_interval)
+{
+	int err;
+	u8 gl_ctrl4_val;
+	u8 gl_ctrl5_val;
+
+	err = ksz8863_cfg_smi_read(cfg, KSZ8863_REG_GL_CTRL4, &gl_ctrl4_val);
+	if (err)
+		return err;
+
+	err = ksz8863_cfg_smi_read(cfg, KSZ8863_REG_GL_CTRL5, &gl_ctrl5_val);
+	if (err)
+		return err;
+
+	*frames_per_interval = gl_ctrl4_val;
+	*frames_per_interval &= KSZ8863_REG_GL_CTRL4_BCAST_STORM_RATE_HI_MASK;
+	*frames_per_interval <<= 8;
+	*frames_per_interval |= gl_ctrl5_val;
+
+	return 0;
+}
+
+static int ksz8863_cfg_set_bcast_protect(struct switch_dev *dev,
+					 const struct switch_attr *attr,
+					 struct switch_val *val)
+{
+	int rate, port, err;
+	struct ksz8863_cfg *cfg;
+	u8 rv[KSZ8863_EXT_PORTS];
+
+	cfg = get_ksz8863_cfg(dev);
+	if (!cfg)
+		return -ENODEV;
+
+	ksz8863_reg_lock(cfg);
+
+	rate = val->value.i;
+
+	for (port = 0; port < KSZ8863_EXT_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+
+		err = ksz8863_cfg_smi_read(cfg, pb + KSZ8863_REG_PORT1_CTRL0,
+					   &rv[port]);
+		if (err)
+			goto out_unlock;
+	}
+
+	if (!rate) {
+		for (port = 0; port < KSZ8863_EXT_PORTS; port++)
+			rv[port] &= ~KSZ8863_REG_PORT_CTRL0_BROADCAST_STORM;
+		dev_info(cfg->dev, "disable broadcast storm protection on port 1 and port 2");
+	} else {
+		bool mode_10bt;
+		int frames_per_sec, ms_per_interval, frames_per_interval;
+		int div, num;
+
+		if (rate > 20) {
+			dev_info(cfg->dev, "rate (%d) is too high, throttle to max. (20%%)",
+				 rate);
+			rate = 20;
+		}
+
+		if (is_ksz8863_cfg_10bt(cfg)) {
+			mode_10bt = true;
+			frames_per_sec = 148800 / 10;
+			ms_per_interval = 500;
+		} else {
+			mode_10bt = false;
+			frames_per_sec = 148800;
+			ms_per_interval = 67;
+		}
+
+		div = 1000 * 100;
+		num = frames_per_sec * ms_per_interval * rate;
+		frames_per_interval = num / div;
+
+		if ((num % div) > (div / 2))
+			frames_per_interval++;
+
+		err = ksz8863_cfg_set_bcast_rate(cfg, frames_per_interval);
+		if (err)
+			goto out_unlock;
+
+		for (port = 0; port < KSZ8863_EXT_PORTS; port++)
+			rv[port] |= KSZ8863_REG_PORT_CTRL0_BROADCAST_STORM;
+
+		dev_info(cfg->dev, "enable broadcast storm protection on port 1 and port 2 "
+				   "(%s: rate %d, %d frames / interval",
+				   mode_10bt ? "10BT" : "100BT", rate,
+				   frames_per_interval);
+	}
+
+	for (port = 0; port < KSZ8863_EXT_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+
+		err = ksz8863_cfg_smi_write(cfg, pb + KSZ8863_REG_PORT1_CTRL0,
+					    rv[port]);
+		if (err)
+			goto out_unlock;
+	}
+
+out_unlock:
+	ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
+static int ksz8863_cfg_get_bcast_protect(struct switch_dev *dev,
+					 const struct switch_attr *attr,
+					 struct switch_val *val)
+{
+	int rate, port, err;
+	bool mode_10bt, bcast_en;
+	int frames_per_sec, ms_per_interval, frames_per_interval, div, num;
+	struct ksz8863_cfg *cfg;
+
+	cfg = get_ksz8863_cfg(dev);
+	if (!cfg)
+		return -ENODEV;
+
+	ksz8863_reg_lock(cfg);
+
+	err = ksz8863_cfg_get_bcast_rate(cfg, &frames_per_interval);
+	if (err)
+		goto out_unlock;
+
+	if (is_ksz8863_cfg_10bt(cfg)) {
+		mode_10bt = true;
+		frames_per_sec = 148800 / 10;
+		ms_per_interval = 500;
+	} else {
+		mode_10bt = false;
+		frames_per_sec = 148800;
+		ms_per_interval = 67;
+	}
+
+	div = frames_per_sec * ms_per_interval;
+	num = frames_per_interval * 1000 * 100;
+
+	rate = num / div;
+
+	if ((num % div) > (div / 2))
+		rate++;
+
+	bcast_en = true;
+
+	for (port = 0; port < KSZ8863_EXT_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+		u8 val;
+
+		err = ksz8863_cfg_smi_read(cfg, pb + KSZ8863_REG_PORT1_CTRL0,
+					   &val);
+		if (err)
+			goto out_unlock;
+
+		if (!(val & KSZ8863_REG_PORT_CTRL0_BROADCAST_STORM))
+			bcast_en = false;
+	}
+
+	dev_info(cfg->dev, "broadcast storm protection is %s on port 1 and port 2 "
+		 "(%s: calculated rate %d, %d frames / interval )",
+		 bcast_en ? "enabled" : "disabled",
+		 mode_10bt ? "10BT" : "100BT",
+		 rate, frames_per_interval);
+
+	val->value.i = bcast_en ? rate : 0;
+
+out_unlock:
+	ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
 static struct switch_attr ksz8863_cfg_global_attrs[] = {
 	{
 		.type = SWITCH_TYPE_INT,
 		.name = "bcast_protect",
 		.description = "Sets the broadcast storm protection rate limit"
-			" (0..20%) for Port 1 & 2. '0' will disable protection",
-		//.set = ksz8863_sw_set_bcast_protect,
-		//.get = ksz8863_sw_get_bcast_protect,
+			" (0..20) for Port 1 & 2. '0' will disable protection",
+		.set = ksz8863_cfg_set_bcast_protect,
+		.get = ksz8863_cfg_get_bcast_protect,
 	},
 };
 
-- 
2.7.4

