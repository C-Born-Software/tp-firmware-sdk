From 4c63dab1077ba9addd3fe4835f84aaa8a5dbd99c Mon Sep 17 00:00:00 2001
From: Christian Hohnstaedt <Christian.Hohnstaedt@wago.com>
Date: Mon, 13 Jan 2020 15:49:27 +0100
Subject: [PATCH] net: dsa: tag_tail: fix bug when no space is left in the skb

The bug only occurres if there is no space left in the skb.
Fix length and padding calculation and add the one byte required
tail tag space.

Signed-off-by: Christian Hohnstaedt <Christian.Hohnstaedt@wago.com>

[64072.389058] docker0: port 1(vethf98cf95) entered forwarding state
[64194.756240] skbuff: skb_over_panic: text:c07a608c len:679 put:1 head:d2964000 data:d296409a tail:0xd2964341 end:0xd2964340 dev:ethX1
[64194.756388] ------------[ cut here ]------------
[64194.756393] kernel BUG at net/core/skbuff.c:106!
[64194.756398] Internal error: Oops - BUG: 0 [#1] PREEMPT ARM
[64194.756414] Modules linked in: veth xt_addrtype
[64194.756426] CPU: 0 PID: 6530 Comm: node-red Not tainted 4.9.146-rt125w02.06.00 #1
[64194.756430] Hardware name: Generic AM33XX (Flattened Device Tree)
[64194.756435] task: de770e80 task.stack: de5d8000
[64194.756455] PC is at skb_panic+0x60/0x6c
[64194.756468] LR is at wake_up_klogd+0x54/0x94
[64194.756474] pc : [<c0654814>] lr : [<c017002c>]    psr: 60010013
[64194.756474] sp : de5d91f0  ip : de5d90e0  fp : de5d921c
[64194.756478] r10: de5d92dc  r9 : df526480  r8 : 00000000
[64194.756483] r7 : c09f14bf  r6 : d2964340  r5 : d2964341  r4 : d296409a
[64194.756487] r3 : 00000100  r2 : 00000100  r1 : c0d2a184  r0 : 00000078
[64194.756493] Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
[64194.756498] Control: 10c5387d Table: 9e7cc019  DAC: 00000051
[64194.756502] Process node-red (pid: 6530, stack limit = 0xde5d8210)
[64194.756506] Stack: (0xde5d91f0 to 0xde5da000)
---
 net/dsa/tag_tail.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/net/dsa/tag_tail.c b/net/dsa/tag_tail.c
index be7e85f..3a0bd6c 100644
--- a/net/dsa/tag_tail.c
+++ b/net/dsa/tag_tail.c
@@ -43,7 +43,7 @@ static struct sk_buff *tail_xmit(struct sk_buff *skb, struct net_device *dev)
 	 */
 	padlen = (skb->len < ETH_ZLEN) ? ETH_ZLEN - skb->len : 0;
 
-	if (unlikely(skb_padto(skb, ETH_ZLEN)))
+	if (unlikely(skb_pad(skb, padlen + 1)))
 		return NETDEV_TX_OK;
 
 	skb_put(skb, padlen);
-- 
2.7.4

