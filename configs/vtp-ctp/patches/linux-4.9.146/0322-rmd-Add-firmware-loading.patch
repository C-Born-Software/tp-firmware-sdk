From 7f2c15a17533634bcbb3d2b2e010920acb4a441c Mon Sep 17 00:00:00 2001
From: Christian Hohnstaedt <Christian.Hohnstaedt@wago.com>
Date: Thu, 5 Sep 2019 15:20:31 +0200
Subject: [PATCH] rmd: Add firmware loading

This patch loads the RMD firmware by using the
request_firmware() interface when userspace
open()s the device.

The loaded firmware is verified and its timestamp is
checked against the currently running RMD firmware.

On timestamp missmatch a firmware store stub is called:
  store_fw().

The default firmware filename is "rmd-01-01-f_reversed_rbf.img"
but can be adapted via a "firmware" device-tree entry
in the rmd section.

Firmware loading is only done once for each rmd
as long as the driver is not unloaded.

Signed-off-by: Christian Hohnstaedt <Christian.Hohnstaedt@wago.com>
---
 drivers/char/rmd.c | 95 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 95 insertions(+)

diff --git a/drivers/char/rmd.c b/drivers/char/rmd.c
index 4017937..6359e8c 100644
--- a/drivers/char/rmd.c
+++ b/drivers/char/rmd.c
@@ -16,6 +16,7 @@
 #include <linux/dma-mapping.h>
 #include <linux/uaccess.h>
 #include <linux/rmd.h>
+#include <linux/firmware.h>
 
 #include <linux/debugfs.h>
 
@@ -23,6 +24,10 @@
 #define RMD_MAX_DEVICES 42
 #define RMD_TRIPPLE_BUF_SIZE 3
 
+#define SARDTF_OFFS 0x10
+#define FIRMWARE_TYPE "rmd-01-01-f"
+#define DEFAULT_IMAGE FIRMWARE_TYPE "_reversed_rbf.img"
+
 static struct rmd_base_t {
 	int		major;
 	struct class	*class;
@@ -82,6 +87,8 @@ struct rmd {
 	int			minor;
 	unsigned int		irq;
 	unsigned long		is_open;
+	const char		*fw_name;
+	bool			fw_loaded;
 
 	struct rmd_info		*info;
 
@@ -113,6 +120,86 @@ struct rmd_info {
 	size_t			tripple_buf_ctrl_size;
 };
 
+
+#define two_digit(p, x) (((p)[0] - '0') * (x) + (p)[1] - '0')
+#define to_bcd(p) two_digit((p), 16)
+#define to_num(p) two_digit((p), 10)
+
+static u32 stamp_to_version(const char *stamp)
+{
+	return to_bcd(stamp + 14) +
+		(to_bcd(stamp + 11) << 8) +
+		(((to_num(stamp + 2) - 10) & 0xf) << 16) +
+		((to_num(stamp + 5) & 0xf) << 20) +
+		(to_bcd(stamp + 8) << 24);
+}
+
+static u32 parse_fw_header(struct device *dev, const char *buf, size_t len)
+{
+	int i;
+	static const char *const names[] = { "Version", "Type", "Stamp" };
+
+	if (!buf || len < 5 || buf[0] < 3)
+		return 0;
+
+	for (i = 0, buf++, len--; len > 0 && i < 3; i++) {
+		int l = buf[0];
+
+		if (buf[1] + buf[2] + buf[3] != 0 || len < l+4)
+			return -EINVAL;
+
+		buf += 4;
+		dev_info(dev, "FW %s' = '%.*s'\n", names[i], l, buf);
+
+		if (i == 1 && (l != sizeof(FIRMWARE_TYPE) - 1 ||
+				memcmp(buf, FIRMWARE_TYPE, l)))
+			return -EINVAL;
+
+		if (i == 2 && l == sizeof("YYYY-MM-ddThh:mm:ss") - 1)
+			return stamp_to_version(buf);
+
+		buf += l;
+		len -= l + 4;
+	}
+	return 0;
+}
+static int store_fw(struct rmd *rmd, const void *data, size_t len)
+{
+	/* TODO: This is the stub, writing the firmware to the SPI Flash */
+	return 0;
+}
+static int rmd_load_firmware(struct rmd *rmd)
+{
+	const struct firmware *fw;
+	u32 datetime, fw_dtf;
+	int ret;
+
+	if (rmd->fw_loaded)
+		return 0;
+
+	dev_info(rmd->dev, "Requesting firmware '%s'", rmd->fw_name);
+	ret = request_firmware(&fw, rmd->fw_name, rmd->dev);
+
+	if (ret < 0)
+		return ret;
+
+	fw_dtf = parse_fw_header(rmd->dev, fw->data, fw->size);
+	datetime = ioread32(rmd->base + SARDTF_OFFS);
+
+	if (datetime == fw_dtf) {
+		dev_info(rmd->dev, "Firmware 0x%x up to date", fw_dtf);
+	} else {
+		dev_info(rmd->dev, "Updating RMD from 0x%x to 0x%x",
+							datetime, fw_dtf);
+		ret = store_fw(rmd, fw->data, fw->size);
+	}
+
+	release_firmware(fw);
+	rmd->fw_loaded = !ret;
+
+	return ret;
+}
+
 static bool rmd_softcopy_mode(struct rmd_config *config)
 {
 	return config->flags & RMD_FLAG_SOFTCOPY;
@@ -480,6 +567,11 @@ static int rmd_open(struct inode *inode, struct file *filep)
 		return -ENOMEM;
 	}
 
+	if (rmd_load_firmware(rmd) != 0) {
+		clear_bit(0, &rmd->is_open);
+		return -ENODEV;
+	}
+
 	rmd->info = info;
 	info->rmd = rmd;
 	info->tripple_buf_ctrl_size = PAGE_SIZE;
@@ -714,6 +806,9 @@ static int of_rmd(struct device *dev, struct rmd *rmd)
 
 	disable_irq(rmd->irq);
 
+	if (of_property_read_string(np, "firmware", &rmd->fw_name))
+		rmd->fw_name = DEFAULT_IMAGE;
+
 	return 0;
 }
 
-- 
2.7.4

