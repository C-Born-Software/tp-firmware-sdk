From 0f5724ddce3ab0df6e7cb51eeb436cc8d4532309 Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Mon, 14 May 2018 15:58:02 +0200
Subject: [PATCH] net: swconfig: add ATU entries flush

For ProfiNet (e.t. MRP) is it necessary to flush ATU
(Address Translation Unit) entries. It has to
be done vary quickly, to meet required timings.
Using of netlink interface of swconfig is to slow,
in context of ProfiNet. This patch implement a device-file
(sysfs) interface for flashing all ATU entries.

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/dsa/mv88e6xxx/mv88e6xxx.h |  13 ++--
 drivers/net/phy/mv88e6321-cfg.c       | 112 ++++++++++++++++++++++++++++++++++
 2 files changed, 119 insertions(+), 6 deletions(-)

diff --git a/drivers/net/dsa/mv88e6xxx/mv88e6xxx.h b/drivers/net/dsa/mv88e6xxx/mv88e6xxx.h
index 907a18a..4c7ec72 100644
--- a/drivers/net/dsa/mv88e6xxx/mv88e6xxx.h
+++ b/drivers/net/dsa/mv88e6xxx/mv88e6xxx.h
@@ -228,15 +228,16 @@
 #define GLOBAL_ATU_CONTROL	0x0a
 #define GLOBAL_ATU_CONTROL_LEARN2ALL	BIT(3)
 #define GLOBAL_ATU_OP		0x0b
-#define GLOBAL_ATU_OP_BUSY	BIT(15)
-#define GLOBAL_ATU_OP_NOP		(0 << 12)
+#define GLOBAL_ATU_OP_BUSY			BIT(15)
+#define GLOBAL_ATU_OP_NOP			(0 << 12)
 #define GLOBAL_ATU_OP_FLUSH_MOVE_ALL		((1 << 12) | GLOBAL_ATU_OP_BUSY)
 #define GLOBAL_ATU_OP_FLUSH_MOVE_NON_STATIC	((2 << 12) | GLOBAL_ATU_OP_BUSY)
-#define GLOBAL_ATU_OP_LOAD_DB		((3 << 12) | GLOBAL_ATU_OP_BUSY)
-#define GLOBAL_ATU_OP_GET_NEXT_DB	((4 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_LOAD_DB			((3 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_GET_NEXT_DB		((4 << 12) | GLOBAL_ATU_OP_BUSY)
 #define GLOBAL_ATU_OP_FLUSH_MOVE_ALL_DB		((5 << 12) | GLOBAL_ATU_OP_BUSY)
-#define GLOBAL_ATU_OP_FLUSH_MOVE_NON_STATIC_DB ((6 << 12) | GLOBAL_ATU_OP_BUSY)
-#define GLOBAL_ATU_OP_GET_CLR_VIOLATION	  ((7 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_FLUSH_MOVE_NON_STATIC_DB	((6 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_GET_CLR_VIOLATION		((7 << 12) | GLOBAL_ATU_OP_BUSY)
+#define GLOBAL_ATU_OP_MASK			(7 << 12)
 #define GLOBAL_ATU_DATA		0x0c
 #define GLOBAL_ATU_DATA_TRUNK			BIT(15)
 #define GLOBAL_ATU_DATA_TRUNK_ID_MASK		0x00f0
diff --git a/drivers/net/phy/mv88e6321-cfg.c b/drivers/net/phy/mv88e6321-cfg.c
index ccd690d..54b3ed4 100644
--- a/drivers/net/phy/mv88e6321-cfg.c
+++ b/drivers/net/phy/mv88e6321-cfg.c
@@ -47,6 +47,8 @@
 #define MV88E6321_SW_PORT3_REG		0x13
 #define MV88E6321_SW_PORT4_REG		0x14
 
+#define MV88E6321_GLOBAL_REG		0x1B
+
 #define MV88E6321_EXTERNAL_PHY0		0x0
 #define MV88E6321_EXTERNAL_PHY1		0x1
 #define MV88E6321_INTERNAL_PHY3		0x3
@@ -870,6 +872,109 @@ static DEVICE_ATTR(tcam_dtb, S_IWUSR | S_IRUGO, show_tcam_dtb, store_tcam_dtb);
 
 #endif
 
+static inline int mv88e6321_wait_atu_ready(struct mii_bus *bus)
+{
+	int ret = 0;
+	int attempt;
+
+	for (attempt = 0; attempt < 16; ++attempt) {
+		ret = mdiobus_read(bus, MV88E6321_GLOBAL_REG, GLOBAL_ATU_OP);
+		if (ret < 0) {
+			pr_err("read failed from addr: 0x%02X reg: 0x%02X" \
+			       "ret: %d\n", MV88E6321_GLOBAL_REG, GLOBAL_ATU_OP,
+			       ret);
+			goto out;
+		}
+
+		if (!(ret & GLOBAL_ATU_OP_BUSY)) {
+			ret = 0;
+			goto out;
+		}
+
+		usleep_range(1000, 2000);
+	}
+
+	ret = -ETIMEDOUT;
+	pr_err("Timeout while waiting for ATU ready\n");
+
+out:
+	return ret;
+}
+
+static int mv88e6321_atu_flush(struct mii_bus *bus)
+{
+	int ret = 0;
+	u16 val = 0;
+
+	/* Set ATU-Entry State to 0 for ATU flush */
+	ret = mdiobus_read(bus, MV88E6321_GLOBAL_REG, GLOBAL_ATU_DATA);
+	if (ret < 0) {
+		pr_err("Read ATU data register failed: %d\n", ret);
+		goto out;
+	}
+
+	val = (u16) ret;
+
+	val &= ~GLOBAL_ATU_DATA_STATE_MASK;
+	val |= GLOBAL_ATU_DATA_STATE_UNUSED;
+
+	ret = mdiobus_write(bus, MV88E6321_GLOBAL_REG, GLOBAL_ATU_DATA,
+			    val);
+	if (ret) {
+		pr_err("Write ATU data failed: %d\n", ret);
+		goto out;
+	}
+
+	/* flush all ATU entries */
+
+	ret = mv88e6321_wait_atu_ready(bus);
+	if (ret)
+		goto out;
+
+        ret = mdiobus_read(bus, MV88E6321_GLOBAL_REG, GLOBAL_ATU_OP);
+	if (ret < 0) {
+		pr_err("Read ATU operation register failed: %d\n", ret);
+		goto out;
+	}
+
+	val = (u16)ret;
+
+	val &= ~GLOBAL_ATU_OP_MASK;
+	val |= GLOBAL_ATU_OP_FLUSH_MOVE_ALL;
+
+	ret = mdiobus_write(bus, MV88E6321_GLOBAL_REG, GLOBAL_ATU_OP,
+			    val);
+	if (ret) {
+		pr_err("Write ATU operation failed: %d\n", ret);
+		goto out;
+	}
+
+	ret = mv88e6321_wait_atu_ready(bus);
+	if (ret)
+		goto out;
+
+out:
+	return ret;
+}
+
+static ssize_t store_atu_flush(struct device* dev, struct device_attribute *attr,
+			       const char *buf, size_t count)
+{
+	ssize_t ret = 0;
+	struct mv88e6321_info *pdata = dev->platform_data;
+	struct mii_bus *bus = pdata->swdev->mii_bus;
+
+	if (count > 0 && *buf != '0' && *buf != 0) {
+		ret = mv88e6321_atu_flush(bus);
+		if (ret >= 0)
+			ret = count;
+	}
+
+	return ret;
+}
+
+static DEVICE_ATTR(atu_flush, S_IWUSR, NULL, store_atu_flush);
+
 struct mv88e6321_info *of_get_mv_pdata(struct device *dev)
 {
 	struct device_node *np = dev->of_node;
@@ -1058,6 +1163,12 @@ static int mv88e6321_probe(struct platform_device *pdev)
 	mutex_init(&pdata->tcam_lock);
 #endif
 
+	ret = device_create_file(&pdev->dev, &dev_attr_atu_flush);
+	if (ret) {
+		dev_err(&pdev->dev, "Couldn't create device file %d\n", ret);
+		return ret;
+	}
+
         if ((ret = register_switch(swdev, NULL))) {
                 pr_info("%s: switch registration failed\n", __func__);
                 return ret;
@@ -1080,6 +1191,7 @@ static int mv88e6321_remove(struct platform_device *pdev)
 	mutex_unlock(&pdata->tcam_lock);
 
 #endif
+	device_remove_file(&pdev->dev, &dev_attr_atu_flush);
 	unregister_switch(pdata->swdev);
 	return 0;
 }
-- 
2.7.4

