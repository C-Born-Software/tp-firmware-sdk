From 6ed780dda403b6d5a2d092559e75b421e94ec4a5 Mon Sep 17 00:00:00 2001
From: Peter Galka <peter.galka@wago.com>
Date: Fri, 7 Dec 2018 12:00:21 +0100
Subject: [PATCH] drivers: ksz8863: add fast aging workaround w1

Signed-off-by: Peter Galka <peter.galka@wago.com>
---
 drivers/net/phy/ksz8863-cfg.c | 159 +++++++++++++++++++++++++++++++-----------
 1 file changed, 119 insertions(+), 40 deletions(-)

diff --git a/drivers/net/phy/ksz8863-cfg.c b/drivers/net/phy/ksz8863-cfg.c
index 19ca6a7..b5b20c5 100644
--- a/drivers/net/phy/ksz8863-cfg.c
+++ b/drivers/net/phy/ksz8863-cfg.c
@@ -1294,53 +1294,132 @@ static inline int ksz8863_sw_get_port_mirror(struct switch_dev *dev,
 	return 0;
 }
 
-static inline int ksz8863_sw_set_fast_aging(struct switch_dev *dev,
-					    const struct switch_attr *attr,
-					    struct switch_val *val)
+/* The common way to handle fast aging does not work correctly.
+ *
+ * [origin code snippet]
+ * ksz8863_nread(GlobalControl1, &val, 1);
+ * val |= BIT(1); for enabling
+ * val &= BIT(1); for disabling
+ * ksz8863_nwrite(GlobalControl1, &val, 1);
+ *
+ * This workaround disables learning on all ports
+ * thus the dynamic table will not be built.
+ */
+static inline int
+ksz8863_sw_set_fastaging(struct switch_dev *dev,
+			 const struct switch_attr *attr,
+			 struct switch_val *val)
 {
-	u8 gc1_v;
-	int ret, enable = val->value.i;
-
-	if ((ret = ksz8863_nread(GlobalControl1, &gc1_v, 1)))
-		return ret;
+	u8 reg;
+	int error = 1;
+	const int enable = val->value.i;
 
-	pr_debug("%s: read: gc1_v 0x%x\n", __func__, gc1_v);
+	do { /* break the loop on error */
+		if (is_dsa_enabled()) {
+			pr_info("%s: ERROR: fastaging not featured in dsa mode\n",
+				__func__);
+			break;
+		}
+		if (enable) {
+			/* disable learning on all ports */
+			if ((ksz8863_nread(Port1Control2, &reg, 1)))
+				break;
+			reg |= 0x01;
+			if ((ksz8863_nwrite(Port1Control2, &reg, 1)))
+				break;
+			if ((ksz8863_nread(Port2Control2, &reg, 1)))
+				break;
+			reg |= 0x01;
+			if ((ksz8863_nwrite(Port2Control2, &reg, 1)))
+				break;
+			if ((ksz8863_nread(Port3Control2, &reg, 1)))
+				break;
+			reg |= 0x01;
+			if ((ksz8863_nwrite(Port3Control2, &reg, 1)))
+				break;
+			/* flush dynamic mac table */
+			if ((ksz8863_nread(GlobalControl0, &reg, 1)))
+				break;
+			reg |= 0x20;
+			if ((ksz8863_nwrite(GlobalControl0, &reg, 1)))
+				break;
+		} else {
+			/* enable learning on all ports */
+			if ((ksz8863_nread(Port1Control2, &reg, 1)))
+				break;
+			reg &= 0xfe;
+			if ((ksz8863_nwrite(Port1Control2, &reg, 1)))
+				break;
+			if ((ksz8863_nread(Port2Control2, &reg, 1)))
+				break;
+			reg &= 0xfe;
+			if ((ksz8863_nwrite(Port2Control2, &reg, 1)))
+				break;
+			if ((ksz8863_nread(Port3Control2, &reg, 1)))
+				break;
+			reg &= 0xfe;
+			if ((ksz8863_nwrite(Port3Control2, &reg, 1)))
+				break;
+		}
+		error = 0;
+	} while (false);
 
-	if (enable)
-		gc1_v |= BIT(1); /* enable fast age (800us) */
+	if (error)
+		pr_info("%s: ERROR: %s fast aging failed\n", __func__,
+			enable ? "enabling" : "disabling");
 	else
-		gc1_v &= ~BIT(1);
-
-	if ((ret = ksz8863_nwrite(GlobalControl1, &gc1_v, 1)))
-		return ret;
-
-	pr_debug("%s: write: gc1_v 0x%x\n", __func__, gc1_v);
-
-	pr_info("%s: fast age %s\n", __func__, enable ? "enabled" : "disabled");
+		pr_info("%s: fast aging %s\n", __func__, enable ?
+			"enabled" : "disabled");
 
-	return 0;
+	return error;
 }
 
-static inline int ksz8863_sw_get_fast_aging(struct switch_dev *dev,
-					    const struct switch_attr *attr,
-					    struct switch_val *val)
+/* The common way to handle fast aging does not work correctly.
+ * The workaround disables learning on all ports. The dedicated
+ * fast aging register does not matter.
+ *
+ * [origin code snippet]
+ * ksz8863_nread(GlobalControl1, &val, 1);
+ * if (val & BIT(1))
+ *		val->value.i = 1;	ENABLED
+ *	else
+ *		val->value.i = 0;	DISABLED
+ */
+static inline int
+ksz8863_sw_get_fastaging(struct switch_dev *dev,
+			 const struct switch_attr *attr,
+			 struct switch_val *val)
 {
-	u8 gc1_v;
-	int ret;
-
-	if ((ret = ksz8863_nread(GlobalControl1, &gc1_v, 1)))
-		return ret;
-
-	pr_debug("%s: read: gc1_v 0x%x\n", __func__, gc1_v);
-
-	if (gc1_v & BIT(1))
-		val->value.i = 1;
-	else
-		val->value.i = 0;
-
-	pr_info("%s: fast age is %s\n", __func__, val->value.i ? "enabled" : "disabled");
+	u8 reg[3];
+	int error = 1;
+
+	do { /* break the loop on error */
+		if (is_dsa_enabled())
+			val->value.i = 0; /* fast aging not enabled */
+		else {
+			/* check if learning is disable on all ports */
+			if ((ksz8863_nread(Port1Control2, &reg[0], 1)))
+				break;
+			if ((ksz8863_nread(Port2Control2, &reg[1], 1)))
+				break;
+			if ((ksz8863_nread(Port3Control2, &reg[2], 1)))
+				break;
+			if ((reg[0] & 0x1) && (reg[1] & 0x1) &&
+			    (reg[2] & 0x1)) {
+				val->value.i = 1;
+				pr_info("%s: fast aging enabled\n", __func__);
+			} else {
+				val->value.i = 0;
+				pr_info("%s: fast aging disabled\n", __func__);
+			}
+		}
+		error = 0;
+	} while (false);
 
-	return 0;
+	if (error)
+		pr_info("%s: ERROR: reading fast aging setting failed\n",
+			__func__);
+	return error;
 }
 
 #ifdef CONFIG_NET_DSA_KSZ8863
@@ -1593,8 +1672,8 @@ static struct switch_attr ksz8863_global_attrs[] = {
                 .type = SWITCH_TYPE_INT,
                 .name = "fast_aging",
                 .description = "Enables:1/Disables:0 Fast Aging.",
-                .set = ksz8863_sw_set_fast_aging,
-                .get = ksz8863_sw_get_fast_aging,
+                .set = ksz8863_sw_set_fastaging,
+                .get = ksz8863_sw_get_fastaging,
 #ifdef CONFIG_NET_DSA_KSZ8863
         }, {
                 .type = SWITCH_TYPE_INT,
-- 
2.7.4

