From aad2e5490a93a190f84ce6d47b579cb3d4376b9a Mon Sep 17 00:00:00 2001
From: Heinrich Toews <heinrich.toews@wago.com>
Date: Wed, 27 Feb 2019 12:29:17 +0100
Subject: [PATCH] mtd: anv32aa1w: Add driver for Anvo-Systems Dresdens SPI SRAM
 device

The AM335x Optimization code was added to accelerate the 8bit word transfer.
This mode make use of the AM335x McSPI TURBO mode which limits the data to
65534 byte for one transfer. TURBO mode works only together with FIFO mode
enabled. For this this amount of data to be read or written must be even and
one transfer is allowed to be max of 65534 words.

32bit transfer was added as another option to accererate the transfer with
the restriction of only 4 byte aligned access. Access beyond this border
will be denied.

Signed-off-by: Heinrich Toews <heinrich.toews@wago.com>
Signed-off-by: Christian Hohnstaedt <Christian.Hohnstaedt@wago.com>
---
 drivers/mtd/devices/Kconfig     |  11 ++
 drivers/mtd/devices/Makefile    |   1 +
 drivers/mtd/devices/anv32aa1w.c | 301 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 313 insertions(+)
 create mode 100644 drivers/mtd/devices/anv32aa1w.c

diff --git a/drivers/mtd/devices/Kconfig b/drivers/mtd/devices/Kconfig
index 75c816a..86d9d05 100644
--- a/drivers/mtd/devices/Kconfig
+++ b/drivers/mtd/devices/Kconfig
@@ -95,6 +95,17 @@ config MTD_M25P80
 	  if you want to specify device partitioning or to use a device which
 	  doesn't support the JEDEC ID instruction.
 
+config MTD_ANV32AA1W
+	tristate "Anvo-Systems Dresden ANV32AA1W"
+	depends on SPI_MASTER
+	help
+	  This enables access to Anvo-Systems Dresden ANV32AA1W 1Mb SRAM chips,
+	  using SPI.
+
+	  Set up your spi devices with the right board-specific
+	  platform data, or a device tree description if you want to
+	  specify device partitioning
+
 config MTD_SPEAR_SMI
 	tristate "SPEAR MTD NOR Support through SMI controller"
 	depends on PLAT_SPEAR
diff --git a/drivers/mtd/devices/Makefile b/drivers/mtd/devices/Makefile
index 7912d3a..6a718b6 100644
--- a/drivers/mtd/devices/Makefile
+++ b/drivers/mtd/devices/Makefile
@@ -12,6 +12,7 @@ obj-$(CONFIG_MTD_LART)		+= lart.o
 obj-$(CONFIG_MTD_BLOCK2MTD)	+= block2mtd.o
 obj-$(CONFIG_MTD_DATAFLASH)	+= mtd_dataflash.o
 obj-$(CONFIG_MTD_M25P80)	+= m25p80.o
+obj-$(CONFIG_MTD_ANV32AA1W)	+= anv32aa1w.o
 obj-$(CONFIG_MTD_SPEAR_SMI)	+= spear_smi.o
 obj-$(CONFIG_MTD_SST25L)	+= sst25l.o
 obj-$(CONFIG_MTD_BCM47XXSFLASH)	+= bcm47xxsflash.o
diff --git a/drivers/mtd/devices/anv32aa1w.c b/drivers/mtd/devices/anv32aa1w.c
new file mode 100644
index 0000000..b5b9302
--- /dev/null
+++ b/drivers/mtd/devices/anv32aa1w.c
@@ -0,0 +1,301 @@
+/*
+ * anv32aa1w.c
+ *
+ * This driver is based on the Microchip 23k256 SPI RAM driver
+ *
+ * Copyright Â© 2019 Heinrich Toews <heinrich.toews@wago.com>
+ *
+ * This code is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/partitions.h>
+#include <linux/mutex.h>
+#include <linux/sched.h>
+#include <linux/sizes.h>
+#include <linux/spi/flash.h>
+#include <linux/spi/spi.h>
+#include <linux/of_device.h>
+#include <linux/platform_data/spi-omap2-mcspi.h>
+
+#define CONFIG_ANV32AA1W__AM335X_OPT
+
+struct anv32aa1w_flash {
+	struct spi_device	*spi;
+	struct mutex		lock;
+	struct mtd_info		mtd;
+};
+
+#define anv32aa1w_CMD_WRITE_STATUS	0x01
+#define anv32aa1w_CMD_WREN	        0x06
+#define anv32aa1w_CMD_WRITE		0x02
+#define anv32aa1w_CMD_READ		0x03
+
+#define to_anv32aa1w_flash(x) container_of(x, struct anv32aa1w_flash, mtd)
+
+static struct omap2_mcspi_device_config anv32aa1w_cd = {
+	.turbo_mode = 1,
+};
+
+static bool anv32aa1w_32bit_mode = 0;
+
+/*
+ * Put the device into 'write enabled' mode.
+ * This is needed on every write cycle.
+ *
+ */
+static int anv32aa1w_write_enable(struct spi_device *spi)
+{
+	struct spi_transfer transfer = {};
+	struct spi_message message;
+	unsigned char command = anv32aa1w_CMD_WREN;
+
+	spi_message_init(&message);
+
+	transfer.tx_buf = &command;
+	transfer.len = sizeof(command);
+	spi_message_add_tail(&transfer, &message);
+
+	return spi_sync(spi, &message);
+}
+
+#if defined(CONFIG_ANV32AA1W__AM335X_OPT)
+#define ANV32AA1W_MAX_TURBO_LEN	65534
+static void
+init_data_transfers_am335x(struct spi_message *msg, struct spi_transfer *t,
+			   const unsigned char *buf, size_t len, int is_tx)
+{
+	unsigned char *p = (unsigned char *) buf;
+	int total = len, transfer_bytes = 0, i;
+
+	/*
+	 * AM335x McSPI optimization:
+	 * In order to make use of the Turbo mode
+	 * to minimize the inter-word GAP,
+	 * split the transfer into chunks of max 65535 words.
+	 * The data length must be an even number to have
+	 * at least a fifo depth of '2' bytes.
+	 * If this criteria is not met TURBO MODE will be ignored.
+	 */
+	for (i = 0; total > 0 && i < 3; i++) {
+		p += transfer_bytes;
+
+		if (total > ANV32AA1W_MAX_TURBO_LEN)
+			transfer_bytes = ANV32AA1W_MAX_TURBO_LEN;
+		else if (total > 1 && total % 2)
+			transfer_bytes = total - 1;
+		else
+			transfer_bytes = total;
+
+		if (is_tx)
+			t[i].tx_buf = p;
+		else
+			t[i].rx_buf = p;
+
+		t[i].len = transfer_bytes;
+		spi_message_add_tail(&t[i], msg);
+
+		total -= transfer_bytes;
+#ifdef DEBUG
+		trace_printk("%s: p %p, total %d, tbytes %d\n",
+			     is_tx ? "TX" : "RX",
+			     p, total, transfer_bytes);
+#endif
+	}
+}
+#else
+static void
+init_data_transfers_am335x(struct spi_message *msg, struct spi_transfer *t,
+			   const unsigned char *buf, size_t len, int is_tx)
+{
+	t->tx_buf = buf;
+	t->len = len;
+	spi_message_add_tail(t, &msg);
+}
+#endif
+
+static int
+init_data_transfers_32b(struct spi_message *msg,
+				  struct spi_transfer *t, unsigned char *buf,
+				  loff_t offset, size_t len, int is_tx)
+{
+	if (is_tx)
+		t->tx_buf = buf;
+	else
+		t->rx_buf = buf;
+
+	t->len = len;
+	t->bits_per_word = 32;
+	spi_message_add_tail(t, msg);
+
+	return 0;
+}
+
+static int anv32aa1w_rw(struct mtd_info *mtd, loff_t offs, size_t len,
+			size_t *retlen, unsigned char *buf, bool write)
+{
+	struct anv32aa1w_flash *flash = to_anv32aa1w_flash(mtd);
+	/* 1x cmd + max. 3x data transfers */
+	struct spi_transfer transfer[4] = {};
+	struct spi_message message;
+	unsigned char command[] = {
+		write ? anv32aa1w_CMD_WRITE : anv32aa1w_CMD_READ,
+		offs >> 16, offs >> 8, offs
+	};
+
+	if (write)
+		anv32aa1w_write_enable(flash->spi);
+
+	spi_message_init(&message);
+
+	transfer[0].tx_buf = command;
+	transfer[0].len = sizeof(command);
+
+	spi_message_add_tail(transfer, &message);
+
+	if (anv32aa1w_32bit_mode) {
+		if (offs % 4 || len % 4)
+			return -1;
+
+		init_data_transfers_32b(&message, transfer + 1,
+						buf, offs, len, write);
+	} else {
+		init_data_transfers_am335x(&message, transfer + 1,
+						buf, len, write);
+	}
+
+	mutex_lock(&flash->lock);
+
+	spi_sync(flash->spi, &message);
+
+	if (retlen && message.actual_length > sizeof(command))
+		*retlen += message.actual_length - sizeof(command);
+
+	mutex_unlock(&flash->lock);
+
+	return 0;
+}
+
+static int anv32aa1w_write(struct mtd_info *mtd, loff_t to, size_t len,
+			    size_t *retlen, const unsigned char *buf)
+{
+	return anv32aa1w_rw(mtd, to, len, retlen, (unsigned char *)buf, true);
+}
+
+static int anv32aa1w_read(struct mtd_info *mtd, loff_t from, size_t len,
+			   size_t *retlen, unsigned char *buf)
+{
+	return anv32aa1w_rw(mtd, from, len, retlen, buf, false);
+}
+
+
+static ssize_t set_turbo_mode_store(struct device_driver *driver,
+				    const char *buf, size_t count)
+{
+	bool b;
+
+	if (kstrtobool(buf, &b) < 0)
+		return -EINVAL;
+
+	anv32aa1w_cd.turbo_mode = b ? 1 : 0;
+	return count;
+}
+
+static ssize_t set_turbo_mode_show(struct device_driver *driver, char *buf)
+{
+	return sprintf(buf, "%d\n", anv32aa1w_cd.turbo_mode);
+}
+
+DRIVER_ATTR_RW(set_turbo_mode);
+
+static ssize_t set_32bit_mode_store(struct device_driver *driver,
+				    const char *buf, size_t count)
+{
+	return kstrtobool(buf, &anv32aa1w_32bit_mode) < 0 ? -EINVAL : count;
+}
+
+static ssize_t set_32bit_mode_show(struct device_driver *driver, char *buf)
+{
+	return sprintf(buf, "%d\n", anv32aa1w_32bit_mode);
+}
+
+DRIVER_ATTR_RW(set_32bit_mode);
+
+static struct attribute *driver_attrs[] = {
+        &driver_attr_set_turbo_mode.attr,
+        &driver_attr_set_32bit_mode.attr,
+        NULL,
+};
+
+static struct attribute_group driver_attr_group = {
+        .attrs = driver_attrs,
+};
+
+static const struct attribute_group *driver_attr_groups[] = {
+        &driver_attr_group,
+        NULL,
+};
+
+static int anv32aa1w_probe(struct spi_device *spi)
+{
+	struct anv32aa1w_flash *flash;
+	struct flash_platform_data *data;
+
+	flash = devm_kzalloc(&spi->dev, sizeof(*flash), GFP_KERNEL);
+	if (!flash)
+		return -ENOMEM;
+
+	spi->controller_data = &anv32aa1w_cd;
+
+	flash->spi = spi;
+	mutex_init(&flash->lock);
+	spi_set_drvdata(spi, flash);
+
+	data = dev_get_platdata(&spi->dev);
+
+	flash->mtd.dev.parent	= &spi->dev;
+	flash->mtd.type		= MTD_RAM;
+	flash->mtd.flags	= MTD_CAP_RAM;
+	flash->mtd.writesize	= 1;
+	flash->mtd.size		= SZ_128K;
+	flash->mtd._read	= anv32aa1w_read;
+	flash->mtd._write	= anv32aa1w_write;
+
+	return mtd_device_parse_register(&flash->mtd, NULL, NULL,
+					 data ? data->parts : NULL,
+					 data ? data->nr_parts : 0);
+}
+
+static int anv32aa1w_remove(struct spi_device *spi)
+{
+	struct anv32aa1w_flash *flash = spi_get_drvdata(spi);
+
+	return mtd_device_unregister(&flash->mtd);
+}
+
+static const struct of_device_id anv32aa1w_of_table[] = {
+	{ .compatible = "anvo-systems,anv32aa1w" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, anv32aa1w_of_table);
+
+static struct spi_driver anv32aa1w_driver = {
+	.driver = {
+		.name	= "anv32aa1w",
+		.of_match_table = of_match_ptr(anv32aa1w_of_table),
+		.groups = driver_attr_groups,
+	},
+	.probe		= anv32aa1w_probe,
+	.remove		= anv32aa1w_remove,
+};
+
+module_spi_driver(anv32aa1w_driver);
+
+MODULE_DESCRIPTION("MTD SPI driver for anv32aa1w RAM chips");
+MODULE_AUTHOR("Heinrich Toews <heinrich.toews@wago.com>");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("spi:anv32aa1w");
-- 
2.7.4

