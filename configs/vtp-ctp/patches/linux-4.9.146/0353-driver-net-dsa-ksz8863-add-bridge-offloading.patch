From 91be3406d277146b8d45b11baa09c522ed1b560a Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Fri, 28 Jun 2019 16:45:55 +0200
Subject: [PATCH] driver: net: dsa: ksz8863: add bridge offloading

This patch adds handling for frames with unknown mac address and broadcast
frames for separated and switched mode.

Switched mode means that both external ports are either in the same bridge
or are in no bridge at all.

Separated mode means that at least one external port is in a bridge
and the other external port is in another bridge or not assigned to a bridge.

If separated mode is enabled then frames with unknown mac address
and broadcast frames are only forwarded to the cpu port (no forwarding
between external ports).

If switched mode is enabled then frames with unknown mac address
and broadcast frames send to all other ports (regular switch operation).

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/dsa/ksz886x/ksz8863.c | 226 +++++++++++++++++++++++++++++++++-----
 drivers/net/dsa/ksz886x/ksz8863.h |  27 ++++-
 2 files changed, 224 insertions(+), 29 deletions(-)

diff --git a/drivers/net/dsa/ksz886x/ksz8863.c b/drivers/net/dsa/ksz886x/ksz8863.c
index c344090..4741465 100644
--- a/drivers/net/dsa/ksz886x/ksz8863.c
+++ b/drivers/net/dsa/ksz886x/ksz8863.c
@@ -32,12 +32,12 @@
 
 static inline int port_to_index(int port)
 {
-	return port - 1;
+	return port - KSZ8863_EXT_PORT1_ID;
 }
 
 static inline int index_to_port(int port)
 {
-	return port + 1;
+	return port + KSZ8863_EXT_PORT1_ID;
 }
 
 static enum dsa_tag_protocol ksz8863_get_tag_protocol(struct dsa_switch *ds)
@@ -45,6 +45,18 @@ static enum dsa_tag_protocol ksz8863_get_tag_protocol(struct dsa_switch *ds)
 	return DSA_TAG_PROTO_TAIL;
 }
 
+static struct net_device *ksz8863_get_bridge_of_port(struct ksz8863_chip *chip,
+						     int port)
+{
+	return chip->ports[port_to_index(port)].bridge;
+}
+
+static void ksz8863_set_bridge_of_port(struct ksz8863_chip *chip, int port,
+				       struct net_device *bridge)
+{
+	chip->ports[port_to_index(port)].bridge = bridge;
+}
+
 static int ksz8863_setup_global(struct ksz8863_chip *chip)
 {
 	int ret;
@@ -70,7 +82,7 @@ static int ksz8863_setup_global(struct ksz8863_chip *chip)
 	if (ret)
 		return ret;
 
-	/* Set broadcast and unknown MAC address forwarging*/
+	/* Set broadcast and unknown MAC address forwarging */
 	ret = chip->mii_ops->read(chip, KSZ8863_REG_GL_CTRL12, &val);
 	if (ret)
 		return ret;
@@ -151,8 +163,8 @@ static int ksz8863_setup_adv_ctrl(struct ksz8863_chip *chip)
 		return ret;
 
 	val &= ~KSZ8863_REG_PWR_LED_LED_MODE_SEL_MASK;
-	val |= (KSZ8863_REG_PWR_LED_LED_MODE_1 <<
-		KSZ8863_REG_PWR_LED_LED_MODE_SEL_SHIFT);
+	val |= (KSZ8863_REG_PWR_LED_LED_MODE_1
+		<< KSZ8863_REG_PWR_LED_LED_MODE_SEL_SHIFT);
 	ret = chip->mii_ops->write(chip, KSZ8863_REG_PWR_LED, val);
 	if (ret)
 		return ret;
@@ -200,16 +212,16 @@ static int ksz8863_phy_write(struct dsa_switch *ds, int port, int reg, u16 val)
 static int ksz8863_flush_mac_tables(struct ksz8863_chip *chip)
 {
 	int err;
-	int port;
+	int port_index;
 	u8 val;
 	u8 states[KSZ8863_NUM_PORTS];
 
 	/* backup port states */
-	for (port = 0; port < KSZ8863_NUM_PORTS; port++) {
-		int pb = KSZ8863_REG_PORTS_BASE * port;
+	for (port_index = 0; port_index < KSZ8863_NUM_PORTS; port_index++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port_index;
 
 		err = chip->mii_ops->read(chip, pb + KSZ8863_REG_PORT1_CTRL2,
-					  &states[port]);
+					  &states[port_index]);
 		if (err)
 			return err;
 	}
@@ -217,11 +229,12 @@ static int ksz8863_flush_mac_tables(struct ksz8863_chip *chip)
 	/* disable learning and disable receiving while flushing dynamic mac
 	 * table
 	 */
-	for (port = 0; port < KSZ8863_NUM_PORTS; port++) {
-		int pb = KSZ8863_REG_PORTS_BASE * port;
+	for (port_index = 0; port_index < KSZ8863_NUM_PORTS; port_index++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port_index;
 
-		err = chip->mii_ops->write(chip, pb + KSZ8863_REG_PORT1_CTRL2,
-					   KSZ8863_REG_PORT_CTRL2_LEARN_DISABLE);
+		err = chip->mii_ops->write(
+			chip, pb + KSZ8863_REG_PORT1_CTRL2,
+			KSZ8863_REG_PORT_CTRL2_LEARN_DISABLE);
 		if (err)
 			return err;
 	}
@@ -237,11 +250,11 @@ static int ksz8863_flush_mac_tables(struct ksz8863_chip *chip)
 		return err;
 
 	/* restore port states */
-	for (port = 0; port < KSZ8863_NUM_PORTS; port++) {
-		int pb = KSZ8863_REG_PORTS_BASE * port;
+	for (port_index = 0; port_index < KSZ8863_NUM_PORTS; port_index++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port_index;
 
 		err = chip->mii_ops->write(chip, pb + KSZ8863_REG_PORT1_CTRL2,
-				       states[port]);
+					   states[port_index]);
 		if (err)
 			return err;
 	}
@@ -253,7 +266,7 @@ static void ksz8863_adjust_link(struct dsa_switch *ds, int port,
 				struct phy_device *phydev)
 {
 	struct ksz8863_chip *chip = ds->priv;
-	int pb = KSZ8863_REG_PORTS_BASE * port;
+	int pb = KSZ8863_REG_PORTS_BASE * port_to_index(port);
 	int err;
 	u8 old_val, val;
 
@@ -278,12 +291,166 @@ static void ksz8863_adjust_link(struct dsa_switch *ds, int port,
 		chip->mii_ops->write(chip, pb + KSZ8863_REG_PORT1_CTRL13, val);
 }
 
+static int ksz8863_set_switched_mode(struct ksz8863_chip *chip)
+{
+	int err;
+	u8 val;
+
+	err = chip->mii_ops->read(chip, KSZ8863_REG_GL_CTRL12, &val);
+	if (err)
+		return err;
+
+	val |= KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_ENABLE;
+
+	val &= ~KSZ8863_REG_GL_CTRL12_PORT_MASK;
+
+	val |= KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT1;
+	val |= KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT2;
+	val |= KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT3;
+
+	err = chip->mii_ops->write(chip, KSZ8863_REG_GL_CTRL12, val);
+	if (err)
+		return err;
+
+	dev_info(chip->dev, "set ksz8863 in switched mode\n");
+
+	chip->switched = true;
+
+	return 0;
+}
+
+static int ksz8863_set_separated_mode(struct ksz8863_chip *chip)
+{
+	int err;
+	u8 val;
+
+	err = chip->mii_ops->read(chip, KSZ8863_REG_GL_CTRL12, &val);
+	if (err)
+		return err;
+
+	val |= KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_ENABLE;
+
+	val &= ~KSZ8863_REG_GL_CTRL12_PORT_MASK;
+	val |= KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT3;
+
+	err = chip->mii_ops->write(chip, KSZ8863_REG_GL_CTRL12, val);
+	if (err)
+		return err;
+
+	dev_info(chip->dev, "set ksz8863 in separated mode\n");
+
+	chip->switched = false;
+
+	return 0;
+}
+
+static int ksz8863_set_bridged_mode(struct ksz8863_chip *chip)
+{
+	int err, ret;
+	int (*set_mode)(struct ksz8863_chip *);
+	int port_index;
+	u8 states[2];
+
+	set_mode = NULL;
+
+	if (ksz8863_get_bridge_of_port(chip, KSZ8863_EXT_PORT1_ID) ==
+	    ksz8863_get_bridge_of_port(chip, KSZ8863_EXT_PORT2_ID)) {
+		if (!chip->switched)
+			set_mode = ksz8863_set_switched_mode;
+	} else {
+		if (chip->switched)
+			set_mode = ksz8863_set_separated_mode;
+	}
+
+	if (!set_mode)
+		return 0;
+
+	/* backup port register ctrl 2 */
+	for (port_index = 0; port_index < KSZ8863_NUM_PORTS; port_index++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port_index;
+
+		if (dsa_is_cpu_port(chip->ds, index_to_port(port_index)))
+			continue;
+
+		err = chip->mii_ops->read(chip, pb + KSZ8863_REG_PORT1_CTRL2,
+					  &states[port_index]);
+		if (err)
+			return err;
+	}
+
+	/* disable learning and disable receiving while changing
+	 * handling of unknown mac address and broadcast frames
+	 */
+	for (port_index = 0; port_index < KSZ8863_NUM_PORTS; port_index++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port_index;
+
+		if (dsa_is_cpu_port(chip->ds, index_to_port(port_index)))
+			continue;
+
+		err = chip->mii_ops->write(
+			chip, pb + KSZ8863_REG_PORT1_CTRL2,
+			KSZ8863_REG_PORT_CTRL2_LEARN_DISABLE);
+		if (err)
+			return err;
+	}
+
+	/* set appropriate mode */
+	ret = set_mode(chip);
+
+	/* restore port register ctrl 2 */
+	for (port_index = 0; port_index < KSZ8863_NUM_PORTS; port_index++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port_index;
+
+		if (dsa_is_cpu_port(chip->ds, index_to_port(port_index)))
+			continue;
+
+		err = chip->mii_ops->write(chip, pb + KSZ8863_REG_PORT1_CTRL2,
+					   states[port_index]);
+		if (err)
+			return err;
+	}
+
+	return err;
+}
+
+static int ksz8863_port_bridge_join(struct dsa_switch *ds, int port,
+				    struct net_device *bridge)
+{
+	struct ksz8863_chip *chip = ds->priv;
+
+	if (port >= KSZ8863_NUM_PORTS || dsa_is_cpu_port(ds, port))
+		return -EINVAL;
+
+	if (ksz8863_get_bridge_of_port(chip, port) &&
+	    ksz8863_get_bridge_of_port(chip, port) != bridge)
+		return -EBUSY;
+
+	ksz8863_set_bridge_of_port(chip, port, bridge);
+
+	return ksz8863_set_bridged_mode(chip);
+}
+
+static void ksz8863_port_bridge_leave(struct dsa_switch *ds, int port)
+{
+	struct ksz8863_chip *chip = ds->priv;
+
+	if (port >= (KSZ8863_NUM_PORTS + KSZ8863_EXT_PORT1_ID) ||
+	    dsa_is_cpu_port(ds, port))
+		return;
+
+	ksz8863_set_bridge_of_port(chip, port, NULL);
+
+	ksz8863_set_bridged_mode(chip);
+}
+
 static struct dsa_switch_ops ksz8863_switch_ops = {
-	.get_tag_protocol	= ksz8863_get_tag_protocol,
-	.setup			= ksz8863_setup,
-	.phy_read		= ksz8863_phy_read,
-	.phy_write		= ksz8863_phy_write,
-	.adjust_link		= ksz8863_adjust_link,
+	.get_tag_protocol = ksz8863_get_tag_protocol,
+	.setup = ksz8863_setup,
+	.phy_read = ksz8863_phy_read,
+	.phy_write = ksz8863_phy_write,
+	.adjust_link = ksz8863_adjust_link,
+	.port_bridge_join = ksz8863_port_bridge_join,
+	.port_bridge_leave = ksz8863_port_bridge_leave,
 };
 
 static int ksz8863_smi_read(struct ksz8863_chip *chip, int reg, u8 *val)
@@ -355,6 +522,8 @@ static struct ksz8863_chip *ksz8863_alloc_chip(struct device *dev)
 		return NULL;
 
 	chip->dev = dev;
+	/* switch starts in switched mode */
+	chip->switched = true;
 
 	return chip;
 }
@@ -424,7 +593,7 @@ static int ksz8863_detect(struct ksz8863_chip *chip)
 		return err;
 
 	chip_id = val & KSZ8863_REG_CHIP_ID1_ID_MASK;
-	chip_id	>>= KSZ8863_REG_CHIP_ID1_ID_SHIFT;
+	chip_id >>= KSZ8863_REG_CHIP_ID1_ID_SHIFT;
 
 	chip_rev = val & KSZ8863_REG_CHIP_ID1_REV_ID_MASK;
 	chip_rev >>= KSZ8863_REG_CHIP_ID1_REV_ID_SHIFT;
@@ -434,7 +603,8 @@ static int ksz8863_detect(struct ksz8863_chip *chip)
 		return -ENODEV;
 	}
 
-	dev_info(chip->dev, "detected family id 0x%x, chip id 0x%x, revision id 0x%x\n",
+	dev_info(chip->dev,
+		 "detected family id 0x%x, chip id 0x%x, revision id 0x%x\n",
 		 chip_family, chip_id, chip_rev);
 
 	return 0;
@@ -566,12 +736,12 @@ static const struct of_device_id ksz8863_of_match[] = {
 MODULE_DEVICE_TABLE(of, ksz8863_of_match);
 
 static struct mdio_driver ksz8863_driver = {
-	.probe	= ksz8863_probe,
+	.probe = ksz8863_probe,
 	.remove = ksz8863_remove,
 	.mdiodrv.driver = {
-		.name = "ksz8863",
-		.of_match_table = ksz8863_of_match,
-	},
+			.name = "ksz8863",
+			.of_match_table = ksz8863_of_match,
+		},
 };
 
 static int __init ksz8863_init(void)
diff --git a/drivers/net/dsa/ksz886x/ksz8863.h b/drivers/net/dsa/ksz886x/ksz8863.h
index ab77f6a..5147f4d 100644
--- a/drivers/net/dsa/ksz886x/ksz8863.h
+++ b/drivers/net/dsa/ksz886x/ksz8863.h
@@ -16,6 +16,9 @@
 
 #define KSZ8863_NUM_PORTS 3
 
+#define KSZ8863_EXT_PORT1_ID 1
+#define KSZ8863_EXT_PORT2_ID 2
+
 #define KSZ8863_REG_CHIP_ID0			0x00
 #define KSZ8863_REG_CHIP_ID0_FAMILY_ID			0x88
 
@@ -117,6 +120,19 @@
 #define KSZ8863_REG_PORT_CTRL0_REMOVE_TAG		BIT(1)
 #define KSZ8863_REG_PORT_CTRL0_4_PRIOS_ENABLE		BIT(0)
 
+#define KSZ8863_REG_PORT1_CTRL2			0x12
+#define KSZ8863_REG_PORT2_CTRL2			0x22
+#define KSZ8863_REG_PORT3_CTRL2			0x32
+
+#define KSZ8863_REG_PORT_CTRL2_2_PRIORITIES_ENABLE	BIT(7)
+#define KSZ8863_REG_PORT_CTRL2_INGRESS_FILTER		BIT(6)
+#define KSZ8863_REG_PORT_CTRL2_DISCARD_NON_VID		BIT(5)
+#define KSZ8863_REG_PORT_CTRL2_FORCE_FLOW_CTRL		BIT(4)
+#define KSZ8863_REG_PORT_CTRL2_BACK_PRESSURE		BIT(3)
+#define KSZ8863_REG_PORT_CTRL2_TX_ENABLE		BIT(2)
+#define KSZ8863_REG_PORT_CTRL2_RX_ENABLE		BIT(1)
+#define KSZ8863_REG_PORT_CTRL2_LEARN_DISABLE		BIT(0)
+
 #define KSZ8863_REG_PORT1_CTRL5			0x15
 #define KSZ8863_REG_PORT2_CTRL5			0x25
 #define KSZ8863_REG_PORT3_CTRL5			0x35
@@ -162,6 +178,10 @@
 #define KSZ8863_REG_PWR_LED_PWR_MODE_MASK		0x03
 #define KSZ8863_REG_PWR_LED_PWR_MODE_SEL_SHIFT		0
 
+struct ksz8863_port {
+	struct net_device *bridge;
+};
+
 struct ksz8863_chip {
 	/* The dsa_switch this structure is related to */
 	struct dsa_switch *ds;
@@ -185,6 +205,12 @@ struct ksz8863_chip {
 
 	/* If true driver will disable internal 1.8V LDO */
 	bool disable_internal_ldo;
+
+	/* Port information */
+	struct ksz8863_port ports[KSZ8863_NUM_PORTS];
+
+	/* switched / separated mode */
+	bool switched;
 };
 
 struct ksz8863_bus_ops {
@@ -193,4 +219,3 @@ struct ksz8863_bus_ops {
 };
 
 #endif /* __KSZ8863_H__ */
-
-- 
2.7.4

