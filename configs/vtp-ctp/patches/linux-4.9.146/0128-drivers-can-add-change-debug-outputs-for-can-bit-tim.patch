From d2a50b5986266cbf2fe23e698085924e96035d90 Mon Sep 17 00:00:00 2001
From: Axel Wueste <axel.wueste@wago.com>
Date: Thu, 7 Dec 2017 17:02:44 +0100
Subject: [PATCH] drivers: can: add/change debug outputs for can bit timing
 register

---
 drivers/net/can/c_can/c_can.c |  2 +-
 drivers/net/can/dev.c         | 12 +++++++-----
 drivers/net/can/ti_hecc.c     |  7 +++----
 3 files changed, 11 insertions(+), 10 deletions(-)

diff --git a/drivers/net/can/c_can/c_can.c b/drivers/net/can/c_can/c_can.c
index 85aa05f..f884813 100644
--- a/drivers/net/can/c_can/c_can.c
+++ b/drivers/net/can/c_can/c_can.c
@@ -198,7 +198,7 @@ enum c_can_bus_error_types {
 
 static const struct can_bittiming_const c_can_bittiming_const = {
 	.name = KBUILD_MODNAME,
-	.tseg1_min = 2,		/* Time segment 1 = prop_seg + phase_seg1 */
+	.tseg1_min = 3,		/* Time segment 1 = prop_seg + phase_seg1 */
 	.tseg1_max = 16,
 	.tseg2_min = 1,		/* Time segment 2 = phase_seg2 */
 	.tseg2_max = 8,
diff --git a/drivers/net/can/dev.c b/drivers/net/can/dev.c
index ff3d9fc..ca94312 100644
--- a/drivers/net/can/dev.c
+++ b/drivers/net/can/dev.c
@@ -69,7 +69,7 @@ u8 can_len2dlc(u8 len)
 EXPORT_SYMBOL_GPL(can_len2dlc);
 
 #ifdef CONFIG_CAN_CALC_BITTIMING
-#define CAN_CALC_MAX_ERROR 50 /* in one-tenth of a percent */
+#define CAN_CALC_MAX_ERROR 20 /* in one-tenth of a percent */
 #define CAN_CALC_SYNC_SEG 1
 
 /*
@@ -192,13 +192,15 @@ static int can_calc_bittiming(struct net_device *dev, struct can_bittiming *bt,
 		bitrate_error = (u32)v64;
 		if (bitrate_error > CAN_CALC_MAX_ERROR) {
 			netdev_err(dev,
-				   "bitrate error %d.%d%% too high\n",
-				   bitrate_error / 10, bitrate_error % 10);
+				   "CAN baudrate %li bitrate error %d.%d%% too high\n",
+				    bt->bitrate, bitrate_error / 10, bitrate_error % 10);
 			return -EDOM;
 		}
-		netdev_warn(dev, "bitrate error %d.%d%%\n",
-			    bitrate_error / 10, bitrate_error % 10);
+		netdev_warn(dev, "CAN baudrate %li bitrate error %d.%d%%\n",
+			    bt->bitrate, bitrate_error / 10, bitrate_error % 10);
 	}
+    else
+        netdev_warn(dev, "CAN baudrate %li no bitrate error\n",bt->bitrate);
 
 	/* real sample point */
 	bt->sample_point = can_update_sample_point(btc, sample_point_nominal, best_tseg,
diff --git a/drivers/net/can/ti_hecc.c b/drivers/net/can/ti_hecc.c
index 00ec698..744d87e6 100644
--- a/drivers/net/can/ti_hecc.c
+++ b/drivers/net/can/ti_hecc.c
@@ -357,7 +357,6 @@ static void ti_hecc_reset(struct net_device *ndev)
 	u32 cnt;
 	struct ti_hecc_priv *priv = netdev_priv(ndev);
 
-	netdev_dbg(ndev, "resetting hecc ...\n");
 	hecc_set_bit(priv, HECC_CANMC, HECC_CANMC_SRES);
 
 	/* Set change control request and wait till enabled */
@@ -672,7 +671,7 @@ static int ti_hecc_rx_poll(struct napi_struct *napi, int quota)
 			while (hecc_get_bit(priv, HECC_CANES, HECC_CANES_RM)) {
 				cpu_relax();
 				if (time_after(jiffies, timeout)) {
-					netdev_warn(ndev, "receiving pkt\n");
+					netdev_warn(ndev, "timeout receiving pkt\n");
 					break;
 				}
 			}
@@ -807,7 +806,7 @@ static irqreturn_t ti_hecc_interrupt(int irq, void *dev_id)
 	int_status = hecc_read(priv,
 		(priv->int_line) ? HECC_CANGIF1 : HECC_CANGIF0);
 
-	/* this results blocking in kernel 4.9	
+	/* this results blocking in kernel 4.9
 	if (!int_status)
 		return IRQ_NONE;
 	*/
@@ -850,7 +849,7 @@ static irqreturn_t ti_hecc_interrupt(int irq, void *dev_id)
 				hecc_write(priv, HECC_CANMIM, ack);
 				__napi_schedule(&priv->napi);
 			} else {
-				netdev_err(ndev, "Error, poll already scheduled\n");				
+				netdev_err(ndev, "Error, poll already scheduled\n");
 			}
 		}
 	}
-- 
2.7.4

