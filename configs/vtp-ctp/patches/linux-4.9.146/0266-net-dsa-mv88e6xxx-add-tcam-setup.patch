From e669e15811afe84a724ddd5e731d3395df766985 Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Fri, 28 Sep 2018 08:57:18 +0200
Subject: [PATCH] net: dsa: mv88e6xxx: add tcam setup

During probe of mv88e6xxx for mv88e6321, tcam entries
are reading from device tree and setup on switch.

For every tcam entry a sysfs device file will be create.

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/dsa/mv88e6xxx/chip.c           | 188 +++++++++++++++++++++++++++++
 drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c |   2 +-
 drivers/net/dsa/mv88e6xxx/mv88e6xxx.h      |  16 +++
 drivers/net/phy/mv88e6321-cfg.c            |   9 --
 4 files changed, 205 insertions(+), 10 deletions(-)

diff --git a/drivers/net/dsa/mv88e6xxx/chip.c b/drivers/net/dsa/mv88e6xxx/chip.c
index 16df962..5370205 100644
--- a/drivers/net/dsa/mv88e6xxx/chip.c
+++ b/drivers/net/dsa/mv88e6xxx/chip.c
@@ -14,6 +14,8 @@
  * (at your option) any later version.
  */
 
+#define pr_fmt(fmt) "dsa: mv88e6xxx: " fmt
+
 #include <linux/delay.h>
 #include <linux/etherdevice.h>
 #include <linux/ethtool.h>
@@ -2650,6 +2652,184 @@ static int mv88e6xxx_vtu_setup(struct mv88e6xxx_chip *chip)
 	return err;
 }
 
+static void mv88e6xxx_tcam_cleanup(struct mv88e6xxx_chip *chip)
+{
+	struct tcam_info *tcam_info = NULL;
+	struct tcam_info *tcam_info_tmp = NULL;
+
+	mv88e6321_flush_tcam(chip->bus, -1);
+
+	list_for_each_entry_safe(tcam_info, tcam_info_tmp,
+				 &chip->tcam.info_head.list, list) {
+		device_remove_file(chip->dev, &tcam_info->dev_attr);
+		list_del(&tcam_info->list);
+		devm_kfree(chip->dev, tcam_info);
+	}
+}
+
+static struct tcam_info*
+mv88e6xxx_get_tcam_info_by_title(struct mv88e6xxx_chip *chip, const char *title)
+{
+	struct tcam_info *tcam_info;
+
+	list_for_each_entry(tcam_info, &chip->tcam.info_head.list, list) {
+		if (!strcmp(tcam_info->title, title))
+			return tcam_info;
+	}
+
+	return NULL;
+}
+
+static ssize_t mv88e6xxx_store_tcam_entry_enable(struct device *dev,
+						 struct device_attribute *attr,
+						 const char *buf, size_t count)
+{
+	ssize_t ret;
+	struct dsa_switch *ds = dev_get_drvdata(dev);
+	struct mv88e6xxx_chip *chip = ds->priv;
+	struct mii_bus *bus = chip->bus;
+	struct tcam_info *tcam_info;
+
+	if (!count)
+		return -EINVAL;
+
+	tcam_info = mv88e6xxx_get_tcam_info_by_title(chip, attr->attr.name);
+	if (!tcam_info)
+		return -EEXIST;
+
+	if (*buf == '0' || *buf == 0)
+		ret = mv88e6321_disable_tcam(bus, tcam_info->id);
+	else
+		ret = mv88e6321_enable_tcam(bus, tcam_info->id,
+					    tcam_info->reg_frame_type);
+
+	return ret ? : count;
+}
+
+static ssize_t mv88e6xxx_show_tcam_entry_enable(struct device *dev,
+						struct device_attribute *attr,
+						char *buf)
+{
+	struct dsa_switch *ds = dev_get_drvdata(dev);
+	struct mv88e6xxx_chip *chip = ds->priv;
+	struct mii_bus *bus = chip->bus;
+	struct tcam_info *tcam_info;
+
+	tcam_info = mv88e6xxx_get_tcam_info_by_title(chip, attr->attr.name);
+	if (!tcam_info)
+		return -EEXIST;
+
+	if (mv88e6321_is_tcam_enabled(bus, tcam_info->id))
+		snprintf(buf, PAGE_SIZE, "%d", 1);
+	else
+		snprintf(buf, PAGE_SIZE, "%d", 0);
+
+	return 1;
+}
+
+static int mv88e6xxx_add_device_file(struct device *dev,
+				     struct tcam_info *tcam_info)
+{
+	int err = 0;
+
+	tcam_info->dev_attr.attr.name = tcam_info->title;
+	tcam_info->dev_attr.attr.mode = 0644;
+
+	tcam_info->dev_attr.show = mv88e6xxx_show_tcam_entry_enable;
+	tcam_info->dev_attr.store = mv88e6xxx_store_tcam_entry_enable;
+
+	err = device_create_file(dev, &tcam_info->dev_attr);
+
+	return err;
+}
+
+static int mv88e6xxx_set_tcam_entry(struct mv88e6xxx_chip *chip,
+				    struct tcam_entry *tcam_entry)
+{
+	int err = 0;
+	u16 reg_frame_type = tcam_entry->reg_frame_type;
+	struct tcam_info *tcam_info;
+
+	/* deactivate TCAM entry by default */
+	tcam_entry->reg_frame_type = 0x00FF;
+
+	err = mv88e6321_load_tcam(chip->bus, tcam_entry);
+	if (err)
+		goto out;
+
+	tcam_info = devm_kzalloc(chip->dev, sizeof(*tcam_info), GFP_KERNEL);
+	if (!tcam_info) {
+		err = -ENOMEM;
+		goto out;
+	}
+
+	tcam_info->title = tcam_entry->title;
+	tcam_info->id = tcam_entry->orig_id;
+	if (tcam_entry->is96frame)
+		tcam_info->next_id = tcam_entry->next_id;
+	else
+		tcam_info->next_id = -1;
+	tcam_info->reg_frame_type = reg_frame_type;
+
+	list_add(&tcam_info->list, &chip->tcam.info_head.list);
+
+	err = mv88e6xxx_add_device_file(chip->dev, tcam_info);
+	if (err)
+		goto out_free_tcam_info;
+
+	return 0;
+
+out_free_tcam_info:
+	list_del(&tcam_info->list);
+	devm_kfree(chip->dev, tcam_info);
+out:
+	return err;
+}
+
+static int mv88e6xxx_tcam_setup(struct mv88e6xxx_chip *chip)
+{
+	int err = 0;
+	struct tcam_entries tcam_entries = {0};
+	struct tcam_entry *tcam_entry = NULL;
+	struct tcam_entry *tcam_entry_tmp = NULL;
+	struct device_node *np = of_root;
+
+	if (!np)
+		return -ENODATA;
+
+	INIT_LIST_HEAD(&tcam_entries.head.list);
+
+	err = of_get_tcam_entry(&tcam_entries, np);
+	if (err)
+		goto out;
+
+	mv88e6xxx_tcam_cleanup(chip);
+
+	err = mv88e6321_set_tcam_mode(chip->bus, &tcam_entries);
+	if (err)
+		goto out_free_tcam_infos;
+
+	list_for_each_entry(tcam_entry, &tcam_entries.head.list, list) {
+		err = mv88e6xxx_set_tcam_entry(chip, tcam_entry);
+		if (err)
+			goto out_free_tcam_infos;
+	}
+
+	goto out_free_tcam_entries;
+
+out_free_tcam_infos:
+	mv88e6xxx_tcam_cleanup(chip);
+out_free_tcam_entries:
+	list_for_each_entry_safe(tcam_entry, tcam_entry_tmp,
+				 &tcam_entries.head.list, list) {
+		list_del(&tcam_entry->list);
+		kfree(tcam_entry);
+	}
+out:
+
+	return err;
+}
+
 static bool mv88e6xxx_has_ext_phy(struct dsa_switch *ds, int port)
 {
 	struct device_node *np = ds->ports[port].dn;
@@ -3146,6 +3326,11 @@ static int mv88e6xxx_setup(struct dsa_switch *ds)
 			goto unlock;
 	}
 
+	if (mv88e6xxx_has(chip, MV88E6XXX_FLAG_TCAM)) {
+		err = mv88e6xxx_tcam_setup(chip);
+		if (err)
+			goto unlock;
+	}
 
 unlock:
 	mutex_unlock(&chip->reg_lock);
@@ -4175,6 +4360,8 @@ static int mv88e6xxx_probe(struct mdio_device *mdiodev)
 		}
 	}
 
+	INIT_LIST_HEAD(&chip->tcam.info_head.list);
+
 	err = mv88e6xxx_mdio_register(chip, np, false);
 	if (err)
 		goto out_g2_irq;
@@ -4208,6 +4395,7 @@ static void mv88e6xxx_remove(struct mdio_device *mdiodev)
 	struct dsa_switch *ds = dev_get_drvdata(&mdiodev->dev);
 	struct mv88e6xxx_chip *chip = ds->priv;
 
+	mv88e6xxx_tcam_cleanup(chip);
 	mv88e6xxx_debugfs_destroy(chip);
 	mv88e6xxx_phy_destroy(chip);
 	mv88e6xxx_unregister_switch(chip);
diff --git a/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c b/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c
index 19d90a1..9e21c77 100644
--- a/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c
+++ b/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c
@@ -1,4 +1,4 @@
-#define pr_fmt(fmt)     "mv88e6321: tcam:" fmt
+#define pr_fmt(fmt)     "mv88e6321: tcam: " fmt
 
 #include <linux/delay.h>
 #include "mv88e6321_tcam.h"
diff --git a/drivers/net/dsa/mv88e6xxx/mv88e6xxx.h b/drivers/net/dsa/mv88e6xxx/mv88e6xxx.h
index 3c81b5c1..23beb07 100644
--- a/drivers/net/dsa/mv88e6xxx/mv88e6xxx.h
+++ b/drivers/net/dsa/mv88e6xxx/mv88e6xxx.h
@@ -687,6 +687,19 @@ struct mv88e6xxx_irq {
 	unsigned int nirqs;
 };
 
+struct tcam_info {
+	struct list_head list;
+	struct device_attribute dev_attr;
+	const char *title;
+	u8 id;
+	s16 next_id;
+	u16 reg_frame_type;
+};
+
+struct mv88e6xxx_tcam {
+	struct tcam_info info_head;
+};
+
 struct mv88e6xxx_chip {
 	const struct mv88e6xxx_info *info;
 
@@ -747,6 +760,9 @@ struct mv88e6xxx_chip {
 
 	/* directory within debugfs */
 	struct dentry *debugfs_root_entry;
+
+	/* TCAM infos */
+	struct mv88e6xxx_tcam tcam;
 };
 
 struct mv88e6xxx_bus_ops {
diff --git a/drivers/net/phy/mv88e6321-cfg.c b/drivers/net/phy/mv88e6321-cfg.c
index aa73f9c..875f5b3 100644
--- a/drivers/net/phy/mv88e6321-cfg.c
+++ b/drivers/net/phy/mv88e6321-cfg.c
@@ -65,15 +65,6 @@ extern struct mv88e6xxx_chip *global_chip;
 
 static int mv88e6321_setup_tcam(struct mii_bus *bus, struct device_node *np);
 
-struct tcam_info {
-	struct list_head list;
-	struct device_attribute dev_attr;
-	const char *title;
-	u8 id;
-	s16 next_id;
-	u16 reg_frame_type;
-};
-
 struct mv88e6321_info {
 	struct device *dev;
 	struct switch_dev *swdev;
-- 
2.7.4

