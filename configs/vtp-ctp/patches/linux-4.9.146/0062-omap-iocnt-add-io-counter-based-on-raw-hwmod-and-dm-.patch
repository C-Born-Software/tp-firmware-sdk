From e8735b2e591eae884ce5c9d0a62f02a080894551 Mon Sep 17 00:00:00 2001
From: Heinrich Toews <heinrich.toews@wago.com>
Date: Mon, 27 Jun 2016 15:26:33 +0000
Subject: [PATCH] omap: iocnt: add io counter based on raw hwmod and dm timer

---
 arch/arm/configs/wago_src_generic_defconfig |   8 +
 arch/arm/mach-omap2/Kconfig                 |  35 ++++
 arch/arm/mach-omap2/Makefile                |   6 +-
 arch/arm/mach-omap2/io-cnt.c                | 282 ++++++++++++++++++++++++++++
 drivers/clk/ti/clk-33xx.c                   |   1 +
 5 files changed, 331 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm/mach-omap2/io-cnt.c

diff --git a/arch/arm/configs/wago_src_generic_defconfig b/arch/arm/configs/wago_src_generic_defconfig
index eec204e..ef656b4 100644
--- a/arch/arm/configs/wago_src_generic_defconfig
+++ b/arch/arm/configs/wago_src_generic_defconfig
@@ -43,6 +43,14 @@ CONFIG_WAGO_USV=y
 # CONFIG_SOC_TI81XX is not set
 # CONFIG_MACH_OMAP3517EVM is not set
 # CONFIG_MACH_OMAP3_PANDORA is not set
+# CONFIG_MACH_TOUCHBOOK is not set
+# CONFIG_MACH_OMAP_3430SDP is not set
+# CONFIG_MACH_NOKIA_RX51 is not set
+# CONFIG_MACH_CM_T35 is not set
+# CONFIG_MACH_CM_T3517 is not set
+# CONFIG_MACH_SBC3530 is not set
+# CONFIG_GPMC_FPGA_INIT is not set
+CONFIG_OMAP_DM_TIMER_IO_CNT=y
 CONFIG_ARM_THUMBEE=y
 CONFIG_SWP_EMULATE=y
 CONFIG_PREEMPT_RT_FULL=y
diff --git a/arch/arm/mach-omap2/Kconfig b/arch/arm/mach-omap2/Kconfig
index 834f552..249a6ef 100644
--- a/arch/arm/mach-omap2/Kconfig
+++ b/arch/arm/mach-omap2/Kconfig
@@ -234,6 +234,41 @@ config OMAP3_SDRC_AC_TIMING
 	  wish to say no.  Selecting yes without understanding what is
 	  going on could result in system crashes;
 
+config GPMC_FPGA_INIT
+	bool "Add Support for FPGA gpmc initialisation"
+	default y
+	help
+	 Say Y to enable fpga gpmc init code
+
+config OMAP_DM_TIMER_IO_CNT
+	select OMAP_DM_TIMER
+	tristate "IO Counter based on OMAP DMTimer"
+	help
+	  This driver makes use of OMAP DMTimer to realize a counter device triggered by
+	  an external clock source connected via TCLKIN input pin. The counter value and
+	  reset will be accessable through sysfs.
+
+config OMAP4_ERRATA_I688
+	bool "OMAP4 errata: Async Bridge Corruption"
+	depends on (ARCH_OMAP4 || SOC_OMAP5) && !ARCH_MULTIPLATFORM
+	select ARCH_HAS_BARRIERS
+	help
+	  If a data is stalled inside asynchronous bridge because of back
+	  pressure, it may be accepted multiple times, creating pointer
+	  misalignment that will corrupt next transfers on that data path
+	  until next reset of the system (No recovery procedure once the
+	  issue is hit, the path remains consistently broken). Async bridge
+	  can be found on path between MPU to EMIF and MPU to L3 interconnect.
+	  This situation can happen only when the idle is initiated by a
+	  Master Request Disconnection (which is trigged by software when
+	  executing WFI on CPU).
+	  The work-around for this errata needs all the initiators connected
+	  through async bridge must ensure that data path is properly drained
+	  before issuing WFI. This condition will be met if one Strongly ordered
+	  access is performed to the target right before executing the WFI.
+	  In MPU case, L3 T2ASYNC FIFO and DDR T2ASYNC FIFO needs to be drained.
+	  IO barrier ensure that there is no synchronisation loss on initiators
+	  operating on both interconnect port simultaneously.
 endmenu
 
 endif
diff --git a/arch/arm/mach-omap2/Makefile b/arch/arm/mach-omap2/Makefile
index 8c7edaf..f10067c 100644
--- a/arch/arm/mach-omap2/Makefile
+++ b/arch/arm/mach-omap2/Makefile
@@ -258,4 +258,8 @@ smsc911x-$(CONFIG_SMSC911X)		:= gpmc-smsc911x.o
 obj-y					+= $(smsc911x-m) $(smsc911x-y)
 
 obj-y					+= common-board-devices.o twl-common.o dss-common.o
-obj-$(CONFIG_WAGO_SYSTEM_BASED_STARTUP)  += wsysinit.o wsysinit-boot-table.o wsysinit-testenv.o
+
+obj-$(CONFIG_WAGO_SYSTEM_BASED_STARTUP)	+= wsysinit.o wsysinit-boot-table.o wsysinit-testenv.o
+
+obj-$(CONFIG_GPMC_FPGA_INIT)            += gpmc-fpga.o
+obj-$(CONFIG_OMAP_DM_TIMER_IO_CNT)      += io-cnt.o
diff --git a/arch/arm/mach-omap2/io-cnt.c b/arch/arm/mach-omap2/io-cnt.c
new file mode 100644
index 0000000..2be2999
--- /dev/null
+++ b/arch/arm/mach-omap2/io-cnt.c
@@ -0,0 +1,282 @@
+/*
+ *    Copyright (c) 2016 Heinrich Toews <heinrich.toews@wago.com>
+ *
+ *    This program is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU General Public License
+ *    version 2 as published by the Free Software Foundation.
+ *
+ *    Description:
+ *      This driver implements an io counter device controlled by an external signal
+ *      pending at TCLKIN. It makes use of OMAP's dual-mode timers
+ *      and works directly on the hwmod assosiated with the timer.
+ *
+ */
+#undef DEBUG
+
+#include <linux/clk.h>
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/slab.h>
+#include <linux/time.h>
+#include <linux/kdev_t.h>
+
+#include <plat/dmtimer.h>
+#include "omap_hwmod.h"
+
+/*
+ * See some infos on the timers 'tclkin' INPUT handling at:
+ * https://github.com/ddrown/pps-gmtimer/blob/master/pps-gmtimer.c
+ *
+ * As considering the following statement we are still
+ * in need of the SYSCLK to configure the device:
+ *
+ *    "if tclkin has no clock, writes to the timer registers will stall and you will get a message like:
+ *    Unhandled fault: external abort on non-linefetch (0x1028) at 0xfa044048"
+ *
+ */
+
+extern struct class* wsysinit_sysfs_class;
+struct device* omap_iocnt_sysdev = NULL;
+
+#define DM_TIMER_LOAD_MIN		0x0 /* 0xFFFFFFFE */
+
+struct omap_chip {
+	struct omap_dm_timer	*dm_timer;
+	struct omap_hwmod       *oh;
+};
+
+static inline u32 omap_dm_timer_read_reg(struct omap_dm_timer *timer, u32 reg)
+{
+	WARN_ON((reg & 0xff) < _OMAP_TIMER_WAKEUP_EN_OFFSET);
+	return __omap_dm_timer_read(timer, reg, timer->posted);
+}
+
+static void omap_dm_timer_write_reg(struct omap_dm_timer *timer, u32 reg,
+						u32 value)
+{
+	WARN_ON((reg & 0xff) < _OMAP_TIMER_WAKEUP_EN_OFFSET);
+	__omap_dm_timer_write(timer, reg, value, timer->posted);
+}
+
+static void omap_iocnt_start(struct omap_chip *omap)
+{
+	pr_debug("io-cnt: turn on hwmod <%s>\n", omap->oh->name);
+
+	omap_hwmod_enable(omap->oh);
+
+	/*
+	 * Set load reg to DM_TIMER_LOAD_MIN
+	 */
+	omap_dm_timer_write_reg(omap->dm_timer, OMAP_TIMER_LOAD_REG, DM_TIMER_LOAD_MIN);
+
+	/*
+	 * Reset the counter to zero
+	 */
+	omap_dm_timer_write_reg(omap->dm_timer, OMAP_TIMER_COUNTER_REG, 0);
+
+	pr_debug("io-cnt: start the timer now!\n");
+
+	/*
+	 * set AR and ST bits
+	 *
+	 * now timer beginns to count based on the sys clk
+	 *
+	 */
+	omap_dm_timer_write_reg(omap->dm_timer, OMAP_TIMER_CTRL_REG, 3);
+
+	pr_debug("io-cnt: set clk to external.\n");
+
+	/*
+	 * configure the external clock source (TCLKIN).
+	 *
+	 * At this moment counter cannot be resetted and
+	 * will continue counting clk edges coming from the external clock.
+	 */
+	omap_dm_timer_set_source(omap->dm_timer, OMAP_TIMER_SRC_EXT_CLK);
+}
+
+ssize_t omap_iocnt_sysfs_counter_show(struct device *dev,
+				      struct device_attribute *attr,
+				      char *buf)
+{
+	struct omap_chip *omap = dev_get_drvdata(dev);
+	u32 cnt_val;
+
+	cnt_val = omap_dm_timer_read_reg(omap->dm_timer, OMAP_TIMER_COUNTER_REG);
+
+	sprintf(buf, "%u\n", cnt_val);
+
+	return strlen(buf);
+}
+
+#ifdef DEBUG
+ssize_t omap_iocnt_sysfs_cnt_debug_show(struct device *dev,
+					struct device_attribute *attr,
+					char *buf)
+{
+	u32 reg[2];
+	struct omap_chip *omap = dev_get_drvdata(dev);
+
+	reg[0] = omap_dm_timer_read_reg(omap->dm_timer, OMAP_TIMER_CTRL_REG);
+	reg[1] = omap_dm_timer_read_reg(omap->dm_timer, OMAP_TIMER_LOAD_REG);
+	reg[2] = omap_dm_timer_read_reg(omap->dm_timer, OMAP_TIMER_COUNTER_REG);
+
+	sprintf(buf,
+		"WP_TCLR: %u [0x%.8x]\n"
+		"WP_TLDR: %u [0x%.8x]\n"
+		"WP_TCRR: %u [0x%.8x]\n",
+		reg[0], reg[0],
+		reg[1], reg[1],
+		reg[2], reg[2]
+		);
+
+	return strlen(buf);
+}
+
+ssize_t omap_iocnt_sysfs_cnt_debug_store(struct device *dev,
+					 struct device_attribute *attr,
+					 const char *buf,
+					 size_t count)
+{
+	struct omap_chip *omap = dev_get_drvdata(dev);
+	int ret_val;
+	unsigned long val;
+
+	ret_val = kstrtoul(buf, 10, &val);
+	if (!ret_val) {
+		pr_debug("io-cnt: set counter to <0x%.8x>\n", (u32) val);
+		omap_dm_timer_write_reg(omap->dm_timer, OMAP_TIMER_COUNTER_REG, val);
+	} else if (!strncmp(buf, "disable", 7)) {
+		pr_debug("io-cnt: disable hwmod <%s>\n", omap->oh->name);
+		omap_hwmod_idle(omap->oh);
+	} else if (!strncmp(buf, "sysclk", 6)) {
+		pr_debug("io-cnt: set clk to sys_clk.\n");
+		omap_dm_timer_set_source(omap->dm_timer, OMAP_TIMER_SRC_SYS_CLK);
+	} else if (!strncmp(buf, "extclk", 6)) {
+		pr_debug("io-cnt: set clk to external.\n");
+		omap_dm_timer_set_source(omap->dm_timer, OMAP_TIMER_SRC_EXT_CLK);
+	} else if (!strncmp(buf, "enable", 6)) {
+		pr_debug("io-cnt: turn on hwmod <%s>\n", omap->oh->name);
+
+		omap_hwmod_enable(omap->oh);
+
+		pr_debug("io-cnt: start the timer now!\n");
+		omap_dm_timer_write_reg(omap->dm_timer, OMAP_TIMER_LOAD_REG, DM_TIMER_LOAD_MIN);
+		omap_dm_timer_write_reg(omap->dm_timer, OMAP_TIMER_COUNTER_REG, 0);
+		omap_dm_timer_write_reg(omap->dm_timer, OMAP_TIMER_CTRL_REG, 3);
+	}
+
+	return count;
+}
+
+DEVICE_ATTR (debug, 0600, omap_iocnt_sysfs_cnt_debug_show, omap_iocnt_sysfs_cnt_debug_store);
+#endif	/* DEBUG */
+
+DEVICE_ATTR (counter, 0444, omap_iocnt_sysfs_counter_show, NULL);
+
+int omap_iocnt_init_sysfs(struct omap_chip *omap)
+{
+	if (!omap)
+		return -1;
+
+	omap_iocnt_sysdev = device_create(wsysinit_sysfs_class, NULL,
+					  MKDEV(0, 0), NULL, "iocnt");
+
+	device_create_file(omap_iocnt_sysdev, &dev_attr_counter);
+#ifdef DEBUG
+	device_create_file(omap_iocnt_sysdev, &dev_attr_debug);
+#endif
+
+	dev_set_drvdata(omap_iocnt_sysdev, omap);
+
+	return 0;
+}
+
+static int omap_iocnt_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct omap_dm_timer *dm_timer;
+	struct device_node *timer;
+	struct omap_chip *omap;
+	const char *oh_name = NULL;
+	struct omap_hwmod *oh;
+
+	timer = of_parse_phandle(np, "ti,timers", 0);
+	if (!timer)
+		return -ENODEV;
+
+	/* get the hwmod directly */
+	of_property_read_string_index(timer, "ti,hwmods", 0, &oh_name);
+	if (!oh_name)
+		return -ENODEV;
+
+	oh = omap_hwmod_lookup(oh_name);
+	if (!oh)
+		return -ENODEV;
+
+	dm_timer = omap_dm_timer_request_by_node(timer);
+	if (!dm_timer)
+		return -EPROBE_DEFER;
+
+	omap = devm_kzalloc(&pdev->dev, sizeof(*omap), GFP_KERNEL);
+	if (omap == NULL)
+		return -ENOMEM;
+
+	omap->oh = oh;
+	omap->dm_timer = dm_timer;
+
+	/*
+	 * use the sysclk for
+	 * initial configuration
+	 */
+	omap_dm_timer_set_source(omap->dm_timer, OMAP_TIMER_SRC_SYS_CLK);
+
+	platform_set_drvdata(pdev, omap);
+
+	omap_iocnt_init_sysfs(omap);
+
+	/*
+	 * Start the timer now and
+	 * set the external clock
+	 */
+	omap_iocnt_start(omap);
+
+	dev_info(&pdev->dev, "driver probed.\n");
+
+	return 0;
+}
+
+static int omap_iocnt_remove(struct platform_device *pdev)
+{
+	struct omap_chip *omap = platform_get_drvdata(pdev);
+
+	omap_dm_timer_free(omap->dm_timer);
+
+	return 0;
+}
+
+static const struct of_device_id omap_iocnt_of_match[] = {
+	{.compatible = "ti,omap-iocnt"},
+	{}
+};
+MODULE_DEVICE_TABLE(of, omap_iocnt_of_match);
+
+static struct platform_driver omap_iocnt_driver = {
+	.driver = {
+		.name	= "omap_iocnt",
+		.owner	= THIS_MODULE,
+		.of_match_table = omap_iocnt_of_match,
+	},
+	.probe		= omap_iocnt_probe,
+	.remove		= omap_iocnt_remove,
+};
+module_platform_driver(omap_iocnt_driver);
+
+MODULE_AUTHOR("Heinrich Toews <heinrich.toews@wago.com>");
+MODULE_LICENSE("GPL v2");
+MODULE_VERSION("2016-07-12");
+MODULE_DESCRIPTION("OMAP Dual-Mode Timer based I/O Counter driver");
diff --git a/drivers/clk/ti/clk-33xx.c b/drivers/clk/ti/clk-33xx.c
index 0e47d95..4e21fae 100644
--- a/drivers/clk/ti/clk-33xx.c
+++ b/drivers/clk/ti/clk-33xx.c
@@ -111,6 +111,7 @@ static struct ti_dt_clk am33xx_clks[] = {
 	DT_CLK("48300200.pwm", "tbclk", "ehrpwm0_tbclk"),
 	DT_CLK("48302200.pwm", "tbclk", "ehrpwm1_tbclk"),
 	DT_CLK("48304200.pwm", "tbclk", "ehrpwm2_tbclk"),
+	DT_CLK(NULL, "timer_ext_ck", "tclkin_ck"),
 	{ .node_name = NULL },
 };
 
-- 
2.7.4

