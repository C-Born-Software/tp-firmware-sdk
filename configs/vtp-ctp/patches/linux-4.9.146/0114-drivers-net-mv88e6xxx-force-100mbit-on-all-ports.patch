From 69c8658bac92d55803a37e9511a74b2cf8ad2df9 Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Fri, 29 Sep 2017 16:34:41 +0200
Subject: [PATCH] drivers: net: mv88e6xxx: force 100mbit on all ports

---
 drivers/net/dsa/mv88e6xxx/chip.c |   4 +
 drivers/net/phy/mv88e6321-cfg.c  | 255 ++++++++++++++++++++++++++++++++++-----
 2 files changed, 231 insertions(+), 28 deletions(-)

diff --git a/drivers/net/dsa/mv88e6xxx/chip.c b/drivers/net/dsa/mv88e6xxx/chip.c
index 116da5b..1c2649f 100644
--- a/drivers/net/dsa/mv88e6xxx/chip.c
+++ b/drivers/net/dsa/mv88e6xxx/chip.c
@@ -34,6 +34,8 @@
 #include "global1.h"
 #include "global2.h"
 
+struct mv88e6xxx_chip *global_chip = NULL;
+
 static void assert_reg_lock(struct mv88e6xxx_chip *chip)
 {
 	if (unlikely(!mutex_is_locked(&chip->reg_lock))) {
@@ -3859,6 +3861,8 @@ static int mv88e6xxx_probe(struct mdio_device *mdiodev)
 		return err;
 	}
 
+	global_chip = chip;
+
 	return 0;
 }
 
diff --git a/drivers/net/phy/mv88e6321-cfg.c b/drivers/net/phy/mv88e6321-cfg.c
index 75753ac..6631c8a 100644
--- a/drivers/net/phy/mv88e6321-cfg.c
+++ b/drivers/net/phy/mv88e6321-cfg.c
@@ -37,6 +37,28 @@
 
 #define DFLT_CFG_FLAGS                  MV88E6321_CFG_PWRDOWN_FLAG
 
+#define MV88E6321_SW_ADDR		0x6
+#define MV88E6321_SW_PORT0_REG		0x10
+#define MV88E6321_SW_PORT1_REG		0x11
+#define MV88E6321_SW_PORT3_REG		0x13
+#define MV88E6321_SW_PORT4_REG		0x14
+
+#define MV88E6321_INTERNAL_PHY3		0x3
+#define MV88E6321_INTERNAL_PHY4		0x4
+
+#define EXT_PHY_PORT0_SMI_ADDR		0x2
+#define EXT_PHY_PORT1_SMI_ADDR		0x5
+#define EXT_PHY_PORT0_SWITCH_REG	0x10
+#define EXT_PHY_PORT1_SWITCH_REG	0x11
+
+#define EXT_PHY_STD_CTRL			0x0
+#define EXT_PHY_STD_CTRL_RESTART_AUTONEG	BIT(9)
+#define EXT_PHY_STD_CTRL_POWER_DOWN		BIT(11)
+
+#define EXT_STD_GCTRL			0x9
+#define EXT_STD_GCTRL_DUPLEX_MASK	(3<<8)
+
+extern struct mv88e6xxx_chip *global_chip;
 
 struct mv88e6321_info {
 	struct device *dev;
@@ -49,19 +71,6 @@ static int mv88e6321_soft_reset(void)
         return 0;
 }
 
-static int mv88e6321_setup_dflt_cfg(int flags)
-{
-        int ret;
-
-        /* Reset */
-        if ((ret = mv88e6321_soft_reset()))
-                return ret;
-
-	pr_info("%s:%d\n", __func__, __LINE__);
-
-        return 0;
-}
-
 static u8 cur_reg = 0;
 static u8 cur_phy_reg = 0;
 
@@ -134,9 +143,9 @@ static int mv88e6321_sw_multi_chip_wait(struct switch_dev *dev)
 	return -ETIMEDOUT;
 }
 
-static int mv88e6321_sw_get_mdio_multi_write(struct switch_dev *dev,
-				      const struct switch_attr *attr,
-				      struct switch_val *val)
+static int mv88e6321_sw_multi_chip_write(struct switch_dev *dev,
+					int sw_addr, int addr,
+					int reg, u16 val)
 {
 	int ret;
 
@@ -146,13 +155,13 @@ static int mv88e6321_sw_get_mdio_multi_write(struct switch_dev *dev,
 		return ret;
 
 	/* Transmit the data to write. */
-	ret = mdiobus_write_nested(dev->mii_bus, 6, SMI_DATA, val->value.i);
+	ret = mdiobus_write_nested(dev->mii_bus, sw_addr, SMI_DATA, val);
 	if (ret < 0)
 		return ret;
 
 	/* Transmit the write command. */
-	ret = mdiobus_write_nested(dev->mii_bus, 6, SMI_CMD,
-				   SMI_CMD_OP_22_WRITE | (cur_phy_reg << 5) | cur_reg);
+	ret = mdiobus_write_nested(dev->mii_bus, sw_addr, SMI_CMD,
+				   SMI_CMD_OP_22_WRITE | (addr << 5) | reg);
 	if (ret < 0)
 		return ret;
 
@@ -163,11 +172,18 @@ static int mv88e6321_sw_get_mdio_multi_write(struct switch_dev *dev,
 
 	return 0;
 }
-
-static int mv88e6321_sw_get_mdio_multi_read(struct switch_dev *dev,
+static int mv88e6321_sw_get_mdio_multi_write(struct switch_dev *dev,
 				      const struct switch_attr *attr,
 				      struct switch_val *val)
 {
+	return mv88e6321_sw_multi_chip_write(dev, MV88E6321_SW_ADDR, cur_phy_reg,
+					cur_reg, val->value.i);
+}
+
+static int mv88e6321_sw_multi_chip_read(struct switch_dev *dev,
+					int sw_addr, int addr,
+					int reg, u16 *val)
+{
 	int ret;
 
 	/* Wait for the bus to become free. */
@@ -177,8 +193,8 @@ static int mv88e6321_sw_get_mdio_multi_read(struct switch_dev *dev,
 
 
 	/* Transmit the read command. */
-	ret = mdiobus_write_nested(dev->mii_bus, 6, SMI_CMD,
-				   SMI_CMD_OP_22_READ | (cur_phy_reg << 5) | cur_reg);
+	ret = mdiobus_write_nested(dev->mii_bus, sw_addr, SMI_CMD,
+				   SMI_CMD_OP_22_READ | (addr << 5) | reg);
 	if (ret < 0)
 		return ret;
 
@@ -188,15 +204,29 @@ static int mv88e6321_sw_get_mdio_multi_read(struct switch_dev *dev,
 		return ret;
 
 	/* Read the data. */
-	ret = mdiobus_read_nested(dev->mii_bus, 6, SMI_DATA);
+	ret = mdiobus_read_nested(dev->mii_bus, sw_addr, SMI_DATA);
 	if (ret < 0)
 		return ret;
 
-        //val->value.i = mdiobus_read(dev->mii_bus, cur_phy_reg, cur_reg);
-	val->value.i = ret & 0xffffffff;
+	*val = ret & 0xffff;
+
+	return 0;
+}
+
+static int mv88e6321_sw_get_mdio_multi_read(struct switch_dev *dev,
+				      const struct switch_attr *attr,
+				      struct switch_val *val)
+{
+	int ret;
+	u16 reg_val;
+	ret = mv88e6321_sw_multi_chip_read(dev, MV88E6321_SW_ADDR, cur_phy_reg,
+					cur_reg, &reg_val);
+	val->value.i = reg_val & 0xffffffff;
+
 	pr_debug("mdiobus_read: phy 0x%02x, reg 0x%02x, val 0x%04x\n",
 		 cur_phy_reg, cur_reg, val->value.i);
-        return 0;
+
+	return ret;
 }
 
 static inline int mv88e6321_sw_reset(struct switch_dev *dev)
@@ -204,11 +234,174 @@ static inline int mv88e6321_sw_reset(struct switch_dev *dev)
         return mv88e6321_soft_reset();
 }
 
+static int mv88e6321_sw_force_speed_internal_phys(struct switch_dev *dev,
+						int int_phy_addr)
+{
+	u16 reg_val;
+	int ret;
+
+	mutex_lock(&global_chip->reg_lock);
+
+	/* 1.     PHY Register 0x00 bit[11] = 1 Power Down */
+	ret = global_chip->info->ops->phy_read(global_chip, int_phy_addr, 0,
+					&reg_val);
+	if (ret < 0)
+		goto out;
+
+	reg_val |= BIT(11);
+	ret = global_chip->info->ops->phy_write(global_chip, int_phy_addr, 0,
+					reg_val);
+	if (ret < 0)
+		goto out;
+
+	/* 2.     PHY Register 0x1A bit[14] = 1 Disabale 1000BASE-T */
+	ret = global_chip->info->ops->phy_read(global_chip, int_phy_addr, 0x1A,
+					&reg_val);
+	if (ret < 0)
+		goto out;
+
+	reg_val |= BIT(14);
+	ret = global_chip->info->ops->phy_write(global_chip, int_phy_addr, 0x1A,
+					reg_val);
+	if (ret < 0)
+		goto out;
+
+	/* 3.     PHY Register 0x00 bit[9] = 1 Restart Auto Negotiation */
+	ret = global_chip->info->ops->phy_read(global_chip, int_phy_addr, 0,
+					&reg_val);
+	if (ret < 0)
+		goto out;
+
+	reg_val |= BIT(9);
+	ret = global_chip->info->ops->phy_write(global_chip, int_phy_addr, 0,
+					reg_val);
+	if (ret < 0)
+		goto out;
+
+	/* 4.     PHY Register 0x00 bit[11] = 0 Power Down */
+	ret = global_chip->info->ops->phy_read(global_chip, int_phy_addr, 0,
+					&reg_val);
+	if (ret < 0)
+		goto out;
+
+	reg_val &= ~BIT(11);
+	ret = global_chip->info->ops->phy_write(global_chip, int_phy_addr, 0,
+					reg_val);
+out:
+	mutex_unlock(&global_chip->reg_lock);
+
+	return ret;
+}
+
+static int mv88e6321_sw_force_speed_external_phys(struct switch_dev *dev,
+					int ext_phy_addr, int sw_port_addr)
+{
+	u16 reg_val;
+	int ret;
+
+	/* 1.Extern PHY Register 0x00 bit[11] = 1 Power Down */
+        reg_val = mdiobus_read(global_chip->bus, ext_phy_addr,
+			EXT_PHY_STD_CTRL);
+
+	ret = mdiobus_write(global_chip->bus, ext_phy_addr, EXT_PHY_STD_CTRL,
+			(reg_val | EXT_PHY_STD_CTRL_POWER_DOWN));
+	if (ret < 0)
+		goto out;
+
+	/* 2.Extern PHY Register 0x09 bit[9:0] = 00  Disable 1000BASE-T */
+        reg_val = mdiobus_read(global_chip->bus, ext_phy_addr, EXT_STD_GCTRL);
+	ret = mdiobus_write(global_chip->bus, ext_phy_addr, EXT_STD_GCTRL,
+			(reg_val & ~(EXT_STD_GCTRL_DUPLEX_MASK)));
+	if (ret < 0)
+		goto out;
+
+	/* 3.Switch Register – Port Staus 0x00  bit 12=0 PHY Detect  */
+	ret = global_chip->smi_ops->read(global_chip, sw_port_addr, PORT_STATUS,
+				&reg_val);
+	if (ret < 0) {
+		goto out;
+	}
+
+	reg_val = (reg_val & ~(PORT_STATUS_PHY_DETECT));
+	ret = global_chip->smi_ops->write(global_chip, sw_port_addr, PORT_STATUS,
+				reg_val);
+	if (ret < 0)
+		goto out;
+
+	/* 4.Switch Register- Physical Control 0x01- ForceSpeed bit[1:0] = 0b01 */
+	ret = global_chip->smi_ops->read(global_chip, sw_port_addr, PORT_PCS_CTRL,
+				&reg_val);
+	if (ret < 0)
+		goto out;
+
+	reg_val &= ~(PORT_PCS_CTRL_100<<1);
+	ret = global_chip->smi_ops->write(global_chip, sw_port_addr, PORT_PCS_CTRL,
+				reg_val);
+	if (ret < 0)
+		goto out;
+
+	/* 5.Switch Register – Port Status 0x00  bit 12=1 PHY Detect */
+	ret = global_chip->smi_ops->read(global_chip, sw_port_addr, PORT_STATUS,
+				&reg_val);
+	if (ret < 0)
+		goto out;
+
+	reg_val |= PORT_STATUS_PHY_DETECT;
+	ret = global_chip->smi_ops->write(global_chip, sw_port_addr, PORT_STATUS,
+				reg_val);
+	if (ret < 0)
+		goto out;
+
+	/* 6.Extern PHY Register 0x00 bit[9] = 1 Restart Auto Negotiation */
+        reg_val = mdiobus_read(global_chip->bus, ext_phy_addr, EXT_PHY_STD_CTRL);
+
+	ret = mdiobus_write(global_chip->bus, ext_phy_addr, EXT_PHY_STD_CTRL,
+			(reg_val | EXT_PHY_STD_CTRL_RESTART_AUTONEG));
+	if (ret < 0)
+		goto out;
+
+	/* 7.Extern PHY Register 0x00 bit[11] = 0 Power Down */
+        reg_val = mdiobus_read(global_chip->bus, ext_phy_addr,
+			EXT_PHY_STD_CTRL);
+
+	ret = mdiobus_write(global_chip->bus, ext_phy_addr, EXT_PHY_STD_CTRL,
+			(reg_val & ~EXT_PHY_STD_CTRL_POWER_DOWN));
+	if (ret < 0)
+		goto out;
+out:
+
+	return ret;
+}
+
 static int mv88e6321_sw_setup_dflt_cfg(struct switch_dev *dev,
                                      const struct switch_attr *attr,
                                      struct switch_val *val)
 {
-        return mv88e6321_setup_dflt_cfg(DFLT_CFG_FLAGS);
+	int ret;
+
+	ret = mv88e6321_sw_force_speed_external_phys(dev, EXT_PHY_PORT0_SMI_ADDR,
+						EXT_PHY_PORT0_SWITCH_REG);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_sw_force_speed_external_phys(dev, EXT_PHY_PORT1_SMI_ADDR,
+					EXT_PHY_PORT1_SWITCH_REG);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_sw_force_speed_internal_phys(dev,
+						MV88E6321_INTERNAL_PHY3);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_sw_force_speed_internal_phys(dev,
+						MV88E6321_INTERNAL_PHY4);
+	if (ret < 0)
+		return ret;
+	else
+		ret = 0;
+
+        return ret;
 }
 
 #ifdef CONFIG_NET_DSA_MV88E6XXX
@@ -255,6 +448,12 @@ static struct switch_attr mv88e6321_global_attrs[] = {
                 .description = "Read/Write with selected mdio registers",
                 .set = mv88e6321_sw_get_mdio_multi_write,
                 .get = mv88e6321_sw_get_mdio_multi_read,
+        }, {
+                .type = SWITCH_TYPE_INT,
+                .name = "mdio_rw_mdio_generic",
+                .description = "Read/Write with selected mdio registers (not nested)",
+                .set = mv88e6321_sw_set_mdio_write,
+                .get = mv88e6321_sw_get_mdio_read,
         },
 #ifdef CONFIG_NET_DSA_MV88E6XXX
         {
-- 
2.7.4

