From d1890c9f223b29cbe519b8b2b2b32b1f99cd2c56 Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Wed, 24 Apr 2019 11:04:34 +0200
Subject: [PATCH] memory: omap-gpmc: make WAITPIN polaritys configureable

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 .../bindings/memory-controllers/omap-gpmc.txt      |  2 ++
 drivers/memory/omap-gpmc.c                         | 38 +++++++++++++++-------
 2 files changed, 29 insertions(+), 11 deletions(-)

diff --git a/Documentation/devicetree/bindings/memory-controllers/omap-gpmc.txt b/Documentation/devicetree/bindings/memory-controllers/omap-gpmc.txt
index c1359f4..15da496 100644
--- a/Documentation/devicetree/bindings/memory-controllers/omap-gpmc.txt
+++ b/Documentation/devicetree/bindings/memory-controllers/omap-gpmc.txt
@@ -22,6 +22,8 @@ Required properties:
 			can support.
  - gpmc,num-waitpins:	The maximum number of wait pins that controller can
 			support.
+ - gpmc,wait0-active-high: sets high polarity of input pin WAIT0
+ - gpmc,wait1-active-high: sets high polarity of input pin WAIT1
  - ranges:		Must be set up to reflect the memory layout with four
 			integer values for each chip-select line in use:
 
diff --git a/drivers/memory/omap-gpmc.c b/drivers/memory/omap-gpmc.c
index bf0fe01..454316d 100644
--- a/drivers/memory/omap-gpmc.c
+++ b/drivers/memory/omap-gpmc.c
@@ -79,6 +79,8 @@
 #define GPMC_ECC_CTRL_ECCREG9		0x009
 
 #define GPMC_CONFIG_LIMITEDADDRESS		BIT(1)
+#define GPMC_CONFIG_WAIT0PINPOLARITY		BIT(8)
+#define GPMC_CONFIG_WAIT1PINPOLARITY		BIT(9)
 
 #define GPMC_STATUS_EMPTYWRITEBUFFERSTATUS	BIT(0)
 
@@ -251,6 +253,8 @@ static unsigned gpmc_capability;
 static void __iomem *gpmc_base;
 
 static struct clk *gpmc_l3_clk;
+static bool gpmc_wait0_active_high;
+static bool gpmc_wait1_active_high;
 
 static irqreturn_t gpmc_handle_irq(int irq, void *dev);
 
@@ -385,6 +389,18 @@ static inline void gpmc_cs_modify_reg(int cs, int reg, u32 mask, bool value)
 	gpmc_cs_write_reg(cs, reg, l);
 }
 
+static inline void gpmc_config_modify(u32 mask, int value)
+{
+	u32 l;
+
+	l = gpmc_read_reg(GPMC_CONFIG);
+	if (value)
+		l |= mask;
+	else
+		l &= ~mask;
+	gpmc_write_reg(GPMC_CONFIG, l);
+}
+
 static void gpmc_cs_bool_timings(int cs, const struct gpmc_bool_timings *p)
 {
 	gpmc_cs_modify_reg(cs, GPMC_CS_CONFIG1,
@@ -1054,16 +1070,9 @@ EXPORT_SYMBOL(gpmc_cs_free);
  */
 int gpmc_configure(int cmd, int wval)
 {
-	u32 regval;
-
 	switch (cmd) {
 	case GPMC_CONFIG_WP:
-		regval = gpmc_read_reg(GPMC_CONFIG);
-		if (wval)
-			regval &= ~GPMC_CONFIG_WRITEPROTECT; /* WP is ON */
-		else
-			regval |= GPMC_CONFIG_WRITEPROTECT;  /* WP is OFF */
-		gpmc_write_reg(GPMC_CONFIG, regval);
+		gpmc_config_modify(GPMC_CONFIG_WRITEPROTECT, !wval);
 		break;
 
 	default:
@@ -2114,9 +2123,7 @@ static int gpmc_probe_generic_child(struct platform_device *pdev,
 	}
 
 	/* Clear limited address i.e. enable A26-A11 */
-	val = gpmc_read_reg(GPMC_CONFIG);
-	val &= ~GPMC_CONFIG_LIMITEDADDRESS;
-	gpmc_write_reg(GPMC_CONFIG, val);
+	gpmc_config_modify(GPMC_CONFIG_LIMITEDADDRESS, 0);
 
 	/* Enable CS region */
 	gpmc_cs_enable_mem(cs);
@@ -2178,6 +2185,12 @@ static int gpmc_probe_dt(struct platform_device *pdev)
 		return ret;
 	}
 
+	gpmc_wait0_active_high = of_property_read_bool(pdev->dev.of_node,
+						"gpmc,wait0-active-high");
+
+	gpmc_wait1_active_high = of_property_read_bool(pdev->dev.of_node,
+						"gpmc,wait1-active-high");
+
 	return 0;
 }
 
@@ -2361,6 +2374,9 @@ static int gpmc_probe(struct platform_device *pdev)
 
 	gpmc_probe_dt_children(pdev);
 
+	gpmc_config_modify(GPMC_CONFIG_WAIT0PINPOLARITY, gpmc_wait0_active_high);
+	gpmc_config_modify(GPMC_CONFIG_WAIT1PINPOLARITY, gpmc_wait1_active_high);
+
 	return 0;
 
 gpio_init_failed:
-- 
2.7.4

