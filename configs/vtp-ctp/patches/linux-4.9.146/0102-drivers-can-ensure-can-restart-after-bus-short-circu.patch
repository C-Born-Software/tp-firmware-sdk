From 06f5a88cb72c00b3c93b277789b94db34edfe2d7 Mon Sep 17 00:00:00 2001
From: Axel Wueste <axel.wueste@wago.com>
Date: Fri, 15 Sep 2017 07:10:16 +0200
Subject: [PATCH] drivers: can: ensure can restart after bus short-circuit

---
 drivers/net/can/c_can/c_can.c | 16 +++++++++++++---
 drivers/net/can/ti_hecc.c     |  2 ++
 2 files changed, 15 insertions(+), 3 deletions(-)

diff --git a/drivers/net/can/c_can/c_can.c b/drivers/net/can/c_can/c_can.c
index e3dccd3..85aa05f 100644
--- a/drivers/net/can/c_can/c_can.c
+++ b/drivers/net/can/c_can/c_can.c
@@ -890,16 +890,19 @@ static int c_can_handle_state_change(struct net_device *dev,
 		/* error warning state */
 		priv->can.can_stats.error_warning++;
 		priv->can.state = CAN_STATE_ERROR_WARNING;
+		netdev_dbg(dev, "Error Warning interrupt\n");
 		break;
 	case C_CAN_ERROR_PASSIVE:
 		/* error passive state */
 		priv->can.can_stats.error_passive++;
 		priv->can.state = CAN_STATE_ERROR_PASSIVE;
+	    netdev_dbg(dev, "Error passive interrupt\n");
 		break;
 	case C_CAN_BUS_OFF:
 		/* bus-off state */
 		priv->can.state = CAN_STATE_BUS_OFF;
 		priv->can.can_stats.bus_off++;
+		netdev_dbg(dev, "Bus-off interrupt\n");
 		break;
 	default:
 		break;
@@ -907,8 +910,13 @@ static int c_can_handle_state_change(struct net_device *dev,
 
 	/* propagate the error condition to the CAN stack */
 	skb = alloc_can_err_skb(dev, &cf);
-	if (unlikely(!skb))
-		return 0;
+	if (!skb) {
+		if (printk_ratelimit())
+			netdev_err(dev,
+				"ti_hecc_error: alloc_can_err_skb() failed\n");
+		return -ENOMEM;
+	}
+
 
 	__c_can_get_berr_counter(dev, &bec);
 	reg_err_counter = priv->read_reg(priv, C_CAN_ERR_CNT_REG);
@@ -950,7 +958,7 @@ static int c_can_handle_state_change(struct net_device *dev,
 	stats->rx_bytes += cf->can_dlc;
 	netif_receive_skb(skb);
 
-	return 1;
+	return 0;
 }
 
 static int c_can_handle_bus_err(struct net_device *dev,
@@ -1084,8 +1092,10 @@ static irqreturn_t c_can_isr(int irq, void *dev_id)
 	struct net_device *dev = (struct net_device *)dev_id;
 	struct c_can_priv *priv = netdev_priv(dev);
 
+	/* this results blocking in kernel 4.9	
 	if (!priv->read_reg(priv, C_CAN_INT_REG))
 		return IRQ_NONE;
+	*/
 
 	/* disable all interrupts and schedule the NAPI */
 	c_can_irq_control(priv, false);
diff --git a/drivers/net/can/ti_hecc.c b/drivers/net/can/ti_hecc.c
index 3dcbf14..00ec698 100644
--- a/drivers/net/can/ti_hecc.c
+++ b/drivers/net/can/ti_hecc.c
@@ -807,8 +807,10 @@ static irqreturn_t ti_hecc_interrupt(int irq, void *dev_id)
 	int_status = hecc_read(priv,
 		(priv->int_line) ? HECC_CANGIF1 : HECC_CANGIF0);
 
+	/* this results blocking in kernel 4.9	
 	if (!int_status)
 		return IRQ_NONE;
+	*/
 
 	err_status = hecc_read(priv, HECC_CANES);
 	if (err_status & (HECC_BUS_ERROR | HECC_CANES_BO |
-- 
2.7.4

