From 73a9d17cb578b014fdfded033f9af2062b5c124c Mon Sep 17 00:00:00 2001
From: Christian Hohnstaedt <Christian.Hohnstaedt@wago.com>
Date: Tue, 17 Sep 2019 11:38:50 +0200
Subject: [PATCH] dma: edma.c: add debugfs entries for the complex DMA chains

Provide extensive details about the PaRAM chains in debugfs
and allow to manually control them.

One directory for each direction:

 - dma0chan12: Read from FIFO into DRAM
 - dma0chan13: Write from DRAM into FIFO

The numbers 12 and 13 depend on the settings in the device tree.
Inside the directories:

 - */0?-*:
    content of the functional PaRAM content for all 3 chains
    as stored in the edesc kernel structure

 - dma0chan*/Hardware-PaRAMs
    content of all PaRAMs as stored in the PaRAM of the
    EDMA controller

 - dma0chan*/Trigger
    allows to manually trigger a PaRAM chain by writing an 's'
    single stepping to the next PaRAM or by writing a 'c' to
    iterate or continue once over the PaRAM chain just like an
    external DMA event would do.

 - dma0chan*/Work-PaRAM
    displays the current content of the Working PaRAM describing
    the task that will be executed next.

Signed-off-by: Christian Hohnstaedt <Christian.Hohnstaedt@wago.com>
---
 drivers/dma/edma.c | 386 +++++++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 343 insertions(+), 43 deletions(-)

diff --git a/drivers/dma/edma.c b/drivers/dma/edma.c
index 197872d..36e5c0e 100644
--- a/drivers/dma/edma.c
+++ b/drivers/dma/edma.c
@@ -31,6 +31,7 @@
 #include <linux/of_address.h>
 #include <linux/of_device.h>
 #include <linux/pm_runtime.h>
+#include <linux/debugfs.h>
 
 #include <linux/platform_data/edma.h>
 
@@ -239,6 +240,9 @@ struct edma_desc {
 
 	dma_addr_t			rmd_mem;
 	size_t				rmd_chunk_size;
+	struct dentry			*debug;
+	const char * const		*rmd_task_names;
+	struct debugfs_regset32		rmd_work_parm;
 	int				rmd_task_num;
 
 	struct edma_pset		pset[0];
@@ -793,9 +797,341 @@ static inline struct edma_desc *to_edma_desc(struct dma_async_tx_descriptor *tx)
 
 static void edma_desc_free(struct virt_dma_desc *vdesc)
 {
-	kfree(container_of(vdesc, struct edma_desc, vdesc));
+	struct edma_desc *edesc = container_of(vdesc, struct edma_desc, vdesc);
+
+	debugfs_remove_recursive(edesc->debug);
+	kfree(edesc);
+}
+
+#ifdef CONFIG_DEBUG_FS
+static struct debugfs_reg32 param_reg[] = {
+	{ "OPT  ",  0 },
+	{ "SRC  ",  4 },
+	{ "ABCNT",  8 },
+	{ "DST  ", 12 },
+	{ "BIDX ", 16 },
+	{ "BCLNK", 20 },
+	{ "CIDX ", 24 },
+	{ "CCNT ", 28 },
+};
+
+static char *dfs_param_text(u32 addr, char *buf)
+{
+	int idx, offs;
+
+	buf[0] = 0;
+
+	if (addr > 0x2000)
+		return buf;
+
+	idx = addr / PARM_SIZE;
+	offs = addr % PARM_SIZE;
+
+	sprintf(buf, " %i:%s+%d", idx, param_reg[offs>>2].name, offs & 0x3);
+	return buf;
+}
+
+static int dfs_print_param(struct edma_desc *edesc, int i,
+				char *buf, size_t len)
+{
+	struct edma_chan *echan = edesc->echan;
+	char srctxt[128] = "", dsttxt[128] = "";
+	struct edmacc_param *p = &edesc->pset[i].param;
+	u32 param_addr = echan->ecc->phys + EDMA_PARM;
+
+	if (i >= edesc->pset_nr)
+		return 0;
+
+	return snprintf(buf, len,
+		 "%d\n"
+		 "%d\n"
+		 "Offset:%04x %d\n"
+		 "%d\n"
+		 "%08x%s%s%s\n"
+		 "%08x%s\n"
+		 "A:%04x B:%04x\n"
+		 "%08x%s\n"
+		 "D:%04x S:%04x\n"
+		 "Link:%04x\n"
+		 "D:%04x S:%04x\n"
+		 "%08x\n",
+		 i, echan->ch_num,
+		 PARM_OFFSET(echan->slot[i]), echan->slot[i],
+		 edesc->pset[i].link, p->opt,
+		 (p->opt & TCCHEN) ? " CHAIN" : "",
+		 (p->opt & TCINTEN) ? " IRQ" : "",
+		 ((p->opt >> 12) & 0x3F) == echan->ch_num &&
+			 (p->opt & (TCCMODE)) >> 11 == 0 &&
+			 (p->opt & STATIC) == 0 ? " OK" : " BAD",
+		 p->src, dfs_param_text(p->src - param_addr, srctxt),
+		 p->a_b_cnt & 0xffff, p->a_b_cnt >> 16,
+		 p->dst, dfs_param_text(p->dst - param_addr, dsttxt),
+		 p->src_dst_bidx >> 16, p->src_dst_bidx & 0xffff,
+		 p->link_bcntrld & 0xffff,
+		 p->src_dst_cidx >> 16, p->src_dst_cidx & 0xffff,
+		 p->ccnt);
+}
+
+static void dfs_print_table(struct seq_file *m, int cnt, const char **bufs,
+			const char *capt)
+{
+	int lengths[cnt], i, len, capt_offs;
+	int capt_len = capt ? strlen(capt) : 0;
+
+	for (i = 0, len = 0; i < cnt; i++) {
+		const char *p, *q;
+
+		lengths[i] = 0;
+		for (p = bufs[i]; p && *p; p = q+1) {
+			q = strchr(p, '\n');
+			if (!q)
+				break;
+			if (q-p > lengths[i])
+				lengths[i] = q-p;
+		}
+		len += lengths[i];
+	}
+	capt_offs = (len - capt_len) / 2 + capt_len;
+	if (capt)
+		seq_printf(m, "%*s\n%*.*s", capt_offs, capt,
+				capt_offs, capt_len,
+				"-------------------------------------");
+	while (1) {
+		for (i = 0; i < cnt; i++) {
+			const char *p = bufs[i];
+			const char *end = strchr(p, '\n');
+
+			if (!end)
+				return;
+			seq_printf(m, "%s%*.*s", i?"| " : "", lengths[i] + 1,
+					(int)(end-p), p);
+			bufs[i] = *end ? end+1 : end;
+		}
+		seq_putc(m, '\n');
+	}
 }
 
+#define PARAM_NAMES "pset\nchnum\nslot\nlink\nopt\n"\
+		    "src\nabcnt\ndst\nbidx\nlnkreld\ncidx\ncnt\n"
+
+static int dfs_show_param_task(struct seq_file *m, void *_p)
+{
+	const char *nam = m->file->f_path.dentry->d_name.name;
+	struct edma_desc *edesc = m->private;
+	char *buf, *p;
+	const char *cols[4] = { PARAM_NAMES, };
+	int i, type;
+
+	if (strlen(nam) < 4)
+		return -EINVAL;
+
+	for (type = 0; type < edesc->rmd_task_num; type++) {
+		if (!strcmp(nam + 3, edesc->rmd_task_names[type]))
+			break;
+	}
+	if (type++ >= edesc->rmd_task_num)
+		return -EINVAL;
+
+	buf = p = kmalloc(4096, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	for (i = 0; i < 3 && (p-buf) < 4096; i++) {
+		cols[i+1] = p;
+		p += dfs_print_param(edesc, type + i*edesc->rmd_task_num,
+					p, 4096 - (p-buf)) + 1;
+	}
+	if (i == 3)
+		dfs_print_table(m, 4, cols, nam);
+	kfree(buf);
+	return 0;
+}
+
+static int dfs_show_phys_params(struct seq_file *m, void *_p)
+{
+	struct edma_desc *edesc = m->private;
+	int i;
+
+	for (i = 1; i < edesc->pset_nr; i++) {
+		int offs = PARM_OFFSET(edesc->echan->slot[i]);
+
+		if (edesc->rmd_task_names && edesc->rmd_task_num) {
+			int task = (i-1) % edesc->rmd_task_num;
+
+			seq_printf(m, "Slot[%d]: %d %04x: %s[%d]\n",
+				i, edesc->echan->slot[i], offs,
+				edesc->rmd_task_names[task],
+				(i-1) / edesc->rmd_task_num);
+		} else {
+			seq_printf(m, "Slot[%d]: %d %04x\n",
+				i, edesc->echan->slot[i], offs);
+		}
+		debugfs_print_regs32(m, param_reg, ARRAY_SIZE(param_reg),
+			edesc->echan->ecc->base + offs, "  ");
+	}
+	return 0;
+}
+
+static int dfs_open_param_task(struct inode *inode, struct file *filep)
+{
+	return single_open(filep, dfs_show_param_task, inode->i_private);
+}
+
+static const struct file_operations dfs_print_param_array_task = {
+
+	.owner = THIS_MODULE,
+	.open = dfs_open_param_task,
+	.release = single_release,
+	.read = seq_read,
+	.llseek = seq_lseek
+};
+
+static int dfs_open_phys_params(struct inode *inode, struct file *file)
+{
+	return single_open(file, dfs_show_phys_params, inode->i_private);
+}
+
+static const struct file_operations dfs_print_phys_params = {
+
+	.owner = THIS_MODULE,
+	.open = dfs_open_phys_params,
+	.release = single_release,
+	.read = seq_read,
+	.llseek = seq_lseek
+};
+
+ssize_t dfs_trigger_write(struct file *file, const char __user *user,
+			  size_t len, loff_t *ppos)
+{
+	struct edma_desc *edesc = file->private_data;
+	struct edma_chan *echan = edesc->echan;
+	struct edma_cc *ecc = echan->ecc;
+	int channel = EDMA_CHAN_SLOT(echan->ch_num);
+	char buf[8];
+	ssize_t ret;
+
+	if (*ppos) {
+		*ppos += len;
+		return len;
+	}
+	simple_write_to_buffer(buf, sizeof(buf), ppos, user, len);
+	switch (buf[0]) {
+	case 's':
+	case 'S':
+		edma_param_modify(ecc, PARM_OPT, echan->slot[0],
+				  ~TCCHEN, 0);
+		/* fall */
+	case 'c':
+	case 'C':
+		edma_shadow0_write_array(ecc, SH_ESR, channel >> 5,
+					 BIT(channel & 0x1f));
+	}
+	return ret;
+}
+
+static const struct file_operations dfs_trigger = {
+
+	.owner = THIS_MODULE,
+	.open = simple_open,
+	.write = dfs_trigger_write
+};
+
+static void dfs_setup(struct edma_desc *edesc)
+{
+	struct edma_chan *echan = edesc->echan;
+	struct edma_cc *ecc = echan->ecc;
+	int i;
+
+	edesc->debug = debugfs_create_dir(dma_chan_name(&echan->vchan.chan),
+					 NULL);
+	if (!edesc->debug)
+		return;
+
+	edesc->rmd_work_parm.regs = param_reg;
+	edesc->rmd_work_parm.nregs = ARRAY_SIZE(param_reg);
+	edesc->rmd_work_parm.base = ecc->base + PARM_OFFSET(echan->slot[0]);
+	debugfs_create_regset32("Work-PaRAM", 0444, edesc->debug,
+				&edesc->rmd_work_parm);
+
+	for (i = 0; i < edesc->rmd_task_num; i++) {
+		char buf[256];
+
+		snprintf(buf, sizeof(buf), "%02d-%s", i,
+				edesc->rmd_task_names[i]);
+		debugfs_create_file(buf, 0444, edesc->debug, edesc,
+					&dfs_print_param_array_task);
+	}
+	debugfs_create_file("Hardware-PaRAMs", 0444, edesc->debug, edesc,
+				&dfs_print_phys_params);
+	debugfs_create_file("Trigger", 0600, edesc->debug, edesc,
+				&dfs_trigger);
+}
+
+static void dump_param(struct edma_desc *edesc, int i)
+{
+	char buf[256];
+	const char *cols[2] = { PARAM_NAMES, buf};
+	struct seq_file s;
+
+	memset(&s, 0, sizeof(s));
+	s.size = PAGE_SIZE;
+	s.buf = kzalloc(s.size, GFP_KERNEL);
+
+	if (!s.buf)
+		return;
+
+	dfs_print_param(edesc, i, buf, sizeof(buf));
+	dfs_print_table(&s, 2, cols, NULL);
+	dev_dbg(edesc->echan->vchan.chan.device->dev, "%s", s.buf);
+	kfree(s.buf);
+}
+
+static void setup_task_names(struct edma_desc *edesc)
+{
+	static const char * const rmd_rx_task_names[] = {
+
+		[rmd_rx_fifo_trans]	= "FIFO-Trans",
+		[rmd_rx_ack_write]	= "ACK-Write",
+		[rmd_rx_data_valid]	= "Data-Valid",
+		[rmd_rx_data_switch]	= "Data-Switch",
+		[rmd_rx_reload_dummy]	= "Reload-Dummy",
+		[rmd_rx_lock_bufctrl]	= "Buffer-Lock",
+		[rmd_rx_copy_bufctrl]	= "Copy-BufCtrl",
+		[rmd_rx_update_link]	= "Update-Link",
+		[rmd_rx_update_bufctrl]	= "Update-BufCtrl",
+		[rmd_rx_max] = NULL
+	};
+
+	static const char * const rmd_tx_task_names[] = {
+
+		[rmd_tx_new_data]	= "New-Data",
+		[rmd_tx_switch_buf]	= "Switch-Buf",
+		[rmd_tx_lock_bufctrl]	= "Lock-BufCtrl",
+		[rmd_tx_get_bufnum]	= "Get-BufNum",
+		[rmd_tx_update_link]	= "Update-Link",
+		[rmd_tx_update_bufctrl]	= "Update-BufCtrl",
+		[rmd_tx_unlock]		= "Unlock-BufCtrl",
+		[rmd_tx_fifo_trans]	= "FIFO-Trans",
+		[rmd_tx_ack_write]	= "ACK-Write",
+		[rmd_tx_max] = NULL
+	};
+
+	edesc->rmd_task_names = edesc->direction == DMA_DEV_TO_MEM ?
+		rmd_rx_task_names : rmd_tx_task_names;
+}
+
+#else
+static void dfs_setup(struct edma_desc *edesc)
+{
+}
+static void dump_param(struct edma_desc *edesc, int i)
+{
+}
+static void setup_task_names(struct edma_desc *edesc)
+{
+}
+#endif
+
 /* Dispatch a queued descriptor to the controller (caller holds lock) */
 static void edma_execute(struct edma_chan *echan)
 {
@@ -826,27 +1162,6 @@ static void edma_execute(struct edma_chan *echan)
 		j = i + edesc->processed;
 		edma_write_slot(ecc, echan->slot[i], &edesc->pset[j].param);
 		edesc->sg_len += edesc->pset[j].len;
-		dev_vdbg(dev,
-			 "\n pset[%d]:\n"
-			 "  chnum\t%d\n"
-			 "  slot\t%d\n"
-			 "  opt\t%08x\n"
-			 "  src\t%08x\n"
-			 "  dst\t%08x\n"
-			 "  abcnt\t%08x\n"
-			 "  ccnt\t%08x\n"
-			 "  bidx\t%08x\n"
-			 "  cidx\t%08x\n"
-			 "  lkrld\t%08x\n",
-			 j, echan->ch_num, echan->slot[i],
-			 edesc->pset[j].param.opt,
-			 edesc->pset[j].param.src,
-			 edesc->pset[j].param.dst,
-			 edesc->pset[j].param.a_b_cnt,
-			 edesc->pset[j].param.ccnt,
-			 edesc->pset[j].param.src_dst_bidx,
-			 edesc->pset[j].param.src_dst_cidx,
-			 edesc->pset[j].param.link_bcntrld);
 		/* Link to the previous slot if not the last set */
 		if (i != nslots - 1) {
 			int target = i + 1;
@@ -1419,27 +1734,7 @@ static struct dma_async_tx_descriptor *edma_prep_dma_cyclic(
 			src_addr += period_len;
 
 		dev_vdbg(dev, "%s: Configure period %d of buf:\n", __func__, i);
-		dev_vdbg(dev,
-			"\n pset[%d]:\n"
-			"  chnum\t%d\n"
-			"  slot\t%d\n"
-			"  opt\t%08x\n"
-			"  src\t%08x\n"
-			"  dst\t%08x\n"
-			"  abcnt\t%08x\n"
-			"  ccnt\t%08x\n"
-			"  bidx\t%08x\n"
-			"  cidx\t%08x\n"
-			"  lkrld\t%08x\n",
-			i, echan->ch_num, echan->slot[i],
-			edesc->pset[i].param.opt,
-			edesc->pset[i].param.src,
-			edesc->pset[i].param.dst,
-			edesc->pset[i].param.a_b_cnt,
-			edesc->pset[i].param.ccnt,
-			edesc->pset[i].param.src_dst_bidx,
-			edesc->pset[i].param.src_dst_cidx,
-			edesc->pset[i].param.link_bcntrld);
+		dump_param(edesc, i);
 
 		edesc->absync = ret;
 
@@ -1504,6 +1799,7 @@ static struct edma_desc *device_prep_dma_rmd_from_device(
 	edesc->rmd_chunk_size = chunk_size;
 	edesc->rmd_transfer = 1;
 	edesc->rmd_task_num = rmd_rx_max;
+	setup_task_names(edesc);
 
 	BUILD_BUG_ON(RMD_SLOTS_RX > EDMA_MAX_SLOTS);
 
@@ -1703,6 +1999,7 @@ static struct edma_desc *device_prep_dma_rmd_to_device(
 	edesc->rmd_chunk_size = chunk_size;
 	edesc->rmd_transfer = 1;
 	edesc->rmd_task_num = rmd_tx_max;
+	setup_task_names(edesc);
 
 	BUILD_BUG_ON(RMD_SLOTS_TX > EDMA_MAX_SLOTS);
 
@@ -1906,6 +2203,8 @@ static struct dma_async_tx_descriptor *edma_prep_dma_rmd(
 	if (!edesc)
 		return NULL;
 
+	dfs_setup(edesc);
+
 	/* Place channel to highest priority queue */
 	if (!echan->tc)
 		edma_assign_channel_eventq(echan, EVENTQ_0);
@@ -1932,6 +2231,7 @@ static void edma_completion_handler(struct edma_chan *echan)
 			if (edesc->pset_nr > 2) {
 				edma_read_slot(echan->ecc, echan->slot[2],
 						&edesc->pset[2].param);
+				dump_param(edesc, 2);
 			}
 			echan->edesc = NULL;
 
-- 
2.7.4

