From 97d3e9e2e63180fe68c33cff854b33875ead787b Mon Sep 17 00:00:00 2001
From: Heinrich Toews <heinrich.toews@wago.com>
Date: Fri, 25 Nov 2016 12:44:11 +0000
Subject: [PATCH] tty: rs485: bugfix: move IGNORE_FLUSH to driver data

        For some reason the tty flag TTY_IGNORE_FLUSH was lost
        during communication. We fix it through move it to
        tty->driver->flags which are kept during the layers of
        communication.

        This issue fixes WAT21487.
---
 drivers/tty/n_tty.c                  | 9 +++++----
 drivers/tty/serial/omap-serial-rtu.c | 7 ++-----
 include/linux/tty.h                  | 1 -
 include/linux/tty_driver.h           | 1 +
 4 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/drivers/tty/n_tty.c b/drivers/tty/n_tty.c
index 3745858..7217ea3 100644
--- a/drivers/tty/n_tty.c
+++ b/drivers/tty/n_tty.c
@@ -794,7 +794,8 @@ static void commit_echoes(struct tty_struct *tty)
 	echoed = __process_echoes(tty);
 	mutex_unlock(&ldata->output_lock);
 
-	if (echoed && tty->ops->flush_chars)
+	if (echoed && tty->ops->flush_chars
+            && !test_bit(TTY_DRIVER_IGNORE_FLUSH, &tty->driver->flags))
 		tty->ops->flush_chars(tty);
 }
 
@@ -812,7 +813,7 @@ static void process_echoes(struct tty_struct *tty)
 	mutex_unlock(&ldata->output_lock);
 
 	if (echoed && tty->ops->flush_chars
-	    && !test_bit(TTY_IGNORE_FLUSH, &tty->flags))
+            && !test_bit(TTY_DRIVER_IGNORE_FLUSH, &tty->driver->flags))
 		tty->ops->flush_chars(tty);
 }
 
@@ -1651,7 +1652,7 @@ static void __receive_buf(struct tty_struct *tty, const unsigned char *cp,
 
 		flush_echoes(tty);
 		if (tty->ops->flush_chars
-		    && !test_bit(TTY_IGNORE_FLUSH, &tty->flags))
+		    && !test_bit(TTY_DRIVER_IGNORE_FLUSH, &tty->driver->flags))
 			tty->ops->flush_chars(tty);
 	}
 
@@ -2353,7 +2354,7 @@ static ssize_t n_tty_write(struct tty_struct *tty, struct file *file,
 				b++; nr--;
 			}
 			if (tty->ops->flush_chars
-			    && !test_bit(TTY_IGNORE_FLUSH, &tty->flags))
+			    && !test_bit(TTY_DRIVER_IGNORE_FLUSH, &tty->driver->flags))
 				tty->ops->flush_chars(tty);
 		} else {
 			struct n_tty_data *ldata = tty->disc_data;
diff --git a/drivers/tty/serial/omap-serial-rtu.c b/drivers/tty/serial/omap-serial-rtu.c
index 71f007c..91efac5 100644
--- a/drivers/tty/serial/omap-serial-rtu.c
+++ b/drivers/tty/serial/omap-serial-rtu.c
@@ -243,7 +243,6 @@ static inline void serial_omap_update_rts(struct uart_omap_port *up)
 static void serial_omap_config_rs485(struct uart_omap_port *up, struct serial_rs485 *rs485conf)
 {
 	if (gpio_is_valid(up->rs485en_gpio)) {
-                bool rs485_is_enabled = (up->rs485.flags & SER_RS485_ENABLED);
 		int val;
 
 		/* way from uart_port to tty_port: ugly :( */
@@ -265,14 +264,12 @@ static void serial_omap_config_rs485(struct uart_omap_port *up, struct serial_rs
 
 
 		if(val) { /* Enable RS485 */
-                        if(!rs485_is_enabled)
-                                set_bit(TTY_IGNORE_FLUSH, &tty->flags);
+                        set_bit(TTY_DRIVER_IGNORE_FLUSH, &tty->driver->flags);
 		} else { /* Enable RS232 */
 			up->tx_in_progress = 0;
 			up->tx_wait_end = 0;
 
-                        if(rs485_is_enabled)
-                                clear_bit(TTY_IGNORE_FLUSH, &tty->flags);
+                        clear_bit(TTY_DRIVER_IGNORE_FLUSH, &tty->driver->flags);
 		}
 
 		gpio_set_value(up->rs485en_gpio, up->rs485en_alow ? !val : val);
diff --git a/include/linux/tty.h b/include/linux/tty.h
index 1cff37e..fe1b862 100644
--- a/include/linux/tty.h
+++ b/include/linux/tty.h
@@ -357,7 +357,6 @@ struct tty_file_private {
 #define TTY_HUPPED 		18	/* Post driver->hangup() */
 #define TTY_HUPPING		19	/* Hangup in progress */
 #define TTY_LDISC_HALTED	22	/* Line discipline is halted */
-#define TTY_IGNORE_FLUSH	23	/* flag to prevent flushing of chars */
 
 /* Values for tty->flow_change */
 #define TTY_THROTTLE_SAFE 1
diff --git a/include/linux/tty_driver.h b/include/linux/tty_driver.h
index b742b5e..ca9a370 100644
--- a/include/linux/tty_driver.h
+++ b/include/linux/tty_driver.h
@@ -415,6 +415,7 @@ static inline struct tty_driver *tty_driver_kref_get(struct tty_driver *d)
 #define TTY_DRIVER_HARDWARE_BREAK	0x0020
 #define TTY_DRIVER_DYNAMIC_ALLOC	0x0040
 #define TTY_DRIVER_UNNUMBERED_NODE	0x0080
+#define TTY_DRIVER_IGNORE_FLUSH         0x0100
 
 /* tty driver types */
 #define TTY_DRIVER_TYPE_SYSTEM		0x0001
-- 
2.7.4

