From 1049e4e28de56f71bf3ee9000dee3138dfe4e2cb Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Thu, 6 Jun 2019 17:23:57 +0200
Subject: [PATCH] rmd: add rmd.h to exported kernel-headers

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 include/uapi/linux/Kbuild |   1 +
 include/uapi/linux/rmd.h  | 129 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 130 insertions(+)
 create mode 100644 include/uapi/linux/rmd.h

diff --git a/include/uapi/linux/Kbuild b/include/uapi/linux/Kbuild
index bd9bb25..4c2de54 100644
--- a/include/uapi/linux/Kbuild
+++ b/include/uapi/linux/Kbuild
@@ -364,6 +364,7 @@ header-y += resource.h
 header-y += rfkill.h
 header-y += rio_cm_cdev.h
 header-y += rio_mport_cdev.h
+header-y += rmd.h
 header-y += romfs_fs.h
 header-y += rose.h
 header-y += route.h
diff --git a/include/uapi/linux/rmd.h b/include/uapi/linux/rmd.h
new file mode 100644
index 0000000..61bb5ae
--- /dev/null
+++ b/include/uapi/linux/rmd.h
@@ -0,0 +1,129 @@
+// SPDX-License-Identifier: GPL-2.0+ WITH Linux-syscall-note
+
+#ifndef _UAPI_LINUX_RMD_H
+#define _UAPI_LINUX_RMD_H
+
+#include <linux/ioctl.h>
+#include <linux/types.h>
+
+/* driver version */
+#define RMD_DRV_VERSION 0x00000001
+
+#define RMD_FLAG_SOFTCOPY	1
+#define RMD_FLAG_NEW_DATA	(1 << 2)
+
+#define RMD_BUFFER_INDEX_SIZE	3
+
+static inline __u32 rmd_atomic_load(__u32 *ptr)
+{
+	return __atomic_load_n(ptr, __ATOMIC_SEQ_CST);
+}
+
+static inline __u32 rmd_atomic_xchg(__u32 *ptr, __u32 val)
+{
+	return __atomic_exchange_n(ptr, val, __ATOMIC_SEQ_CST);
+}
+
+static inline __u32 rmd_atomic_cmpxchg(__u32 *ptr, __u32 expected,
+								__u32 desired)
+{
+	__atomic_compare_exchange_n(ptr, &expected, desired, 0,
+					__ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST);
+	return expected;
+}
+
+struct rmd_config {
+	int flags;
+	__u32 idet_fifo_pdi_offset;	/* offset of pdi fifo		*/
+	__u32 idet_fifo_pdi_size;	/* size of pdi fifo in bytes	*/
+	__u32 idet_fifo_pdo_offset;	/* offset of pdo fifo		*/
+	__u32 idet_fifo_pdo_size;	/* size of pdo fifo in bytes	*/
+	__u32 idet_pdi_cs_offset;	/* offset of rx fifo ctrl/stat SFR */
+	__u32 idet_pdo_cs_offset;	/* offset of tx fifo ctrl/stat SFR */
+	__u8 tx_commit_bit_offset;	/* bit offset in control/status SFR to
+					 * commit data when written to tx buffer
+					 */
+
+	__u8 tx_discard_bit_offset;	/* bit offset in control/status SFR to
+					 * discard data when written to tx
+					 * buffer
+					 */
+
+	__u8 rx_read_finish_bit_offset;	/* bit offset in control/status SFR to
+					 * indicate end-of-reading from the rx
+					 * buffer
+					 */
+
+	__u8 rx_data_valid_bit_offset;	/* bit offset in control/status SFR to
+					 * get the valid status of read data
+					 * from the rx buffer
+					 */
+};
+
+struct rmd_cycle {
+	__u32 timeout_us;		/* max time in ns to wait for the cycle
+					 * event
+					 */
+	__u32 cycle_time_us;		/* calculated time in us from the
+					 * previous cycle
+					 */
+};
+
+#define RMD_DRV_MAGIC				'R'
+
+/* Get the driver version. The user should check this version during
+ * initialization
+ */
+#define RMD_GET_DRV_VERSION			_IO(RMD_DRV_MAGIC, 1)
+
+#define RMD_SET_CONFIG				_IOW(RMD_DRV_MAGIC, 2, \
+							struct rmd_config)
+
+#define RMD_GET_CONFIG				_IOR(RMD_DRV_MAGIC, 3, \
+							struct rmd_config)
+
+/* Get the size of read/write buffer. This size needs to be used when the
+ * user mmaps the specific buffer.
+ */
+#define RMD_GET_BUFFER_SIZE			_IO(RMD_DRV_MAGIC, 4)
+
+/* Get the chunk size of read/write buffer elements */
+#define RMD_GET_BUFFER_CHUNK_SIZE		_IO(RMD_DRV_MAGIC, 5)
+
+/* Get control over the read buffer index that holds the last valid data and
+ * return it to the user
+ */
+#define RMD_SWITCH_READ_BUFFER			_IO(RMD_DRV_MAGIC, 6)
+
+/* Pass the control over the write buffer index with the freshest data to the
+ * kernel and retrieve the next write buffer index where the user can put the
+ * next new data. */
+#define RMD_SWITCH_WRITE_BUFFER			_IO(RMD_DRV_MAGIC, 7)
+
+/* Get the current write buffer index. This is the buffer index where the
+ * user can write new data to.
+ */
+#define RMD_GET_WRITE_BUFFER_IDX		_IO(RMD_DRV_MAGIC, 8)
+
+/* Get the current read buffer index that holds the last valid data. */
+ #define RMD_GET_READ_BUFFER_IDX		_IO(RMD_DRV_MAGIC, 9)
+
+/* Wait for the next cycle event from the rmd. */
+#define RMD_WAIT_FOR_NEXT_CYCLE			_IOWR(RMD_DRV_MAGIC, 10, \
+							struct rmd_cycle)
+
+/* Enable/disable the tx data flow */
+#define RMD_ACTIVATE_TX_PATH			_IOW(RMD_DRV_MAGIC, 11, __u8)
+
+/* Get the offset to the tripple buffer control field of the read buffer */
+#define RMD_GET_READ_TRIPPLE_BUF_CTRL_OFFSET	_IO(RMD_DRV_MAGIC, 12)
+
+/* Get the offset to the tripple buffer control field of the write buffer */
+#define RMD_GET_WRITE_TRIPPLE_BUF_CTRL_OFFSET	_IO(RMD_DRV_MAGIC, 13)
+
+/* Get the size of tripple buffer read and write control field. This size needs
+ * to be used when mapping the tripple buffer control field.
+ */
+#define RMD_GET_TRIPPLE_BUF_CTRL_SIZE		_IO(RMD_DRV_MAGIC, 14)
+
+#endif /* _UAPI_LINUX_RMD_H */
-- 
2.7.4

