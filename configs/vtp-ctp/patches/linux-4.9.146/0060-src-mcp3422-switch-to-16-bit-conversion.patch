From 440ac10a7f8c172ae08792b8d6166c3bdad54433 Mon Sep 17 00:00:00 2001
From: Boerje Sewing <boerje.sewing@who-ing.de>
Date: Wed, 15 Jun 2016 17:44:09 +0200
Subject: [PATCH] src: mcp3422: switch to 16 bit conversion.

Signed-off-by: Boerje Sewing <boerje.sewing@who-ing.de>
---
 drivers/iio/adc/mcp3422.c | 65 +++++++++++++++++++++++++++++++++--------------
 1 file changed, 46 insertions(+), 19 deletions(-)

diff --git a/drivers/iio/adc/mcp3422.c b/drivers/iio/adc/mcp3422.c
index e59e237..8682610 100644
--- a/drivers/iio/adc/mcp3422.c
+++ b/drivers/iio/adc/mcp3422.c
@@ -74,21 +74,38 @@
 	}
 
 static const struct iio_chan_spec mcp3421_channels[] = {
-	MCP3422_CHAN(0, 12),
-        IIO_CHAN_SOFT_TIMESTAMP(2),
+	MCP3422_CHAN(0, 18),
+        IIO_CHAN_SOFT_TIMESTAMP(1),
 };
-
 static const struct iio_chan_spec mcp3422_channels[] = {
-	MCP3422_CHAN(0, 12),
-	MCP3422_CHAN(1, 12),
+	MCP3422_CHAN(0, 18),
+	MCP3422_CHAN(1, 18),
         IIO_CHAN_SOFT_TIMESTAMP(2),
 };
 
 static const struct iio_chan_spec mcp3424_channels[] = {
-	MCP3422_CHAN(0, 12),
-	MCP3422_CHAN(1, 12),
-	MCP3422_CHAN(2, 12),
-	MCP3422_CHAN(3, 12),
+	MCP3422_CHAN(0, 18),
+	MCP3422_CHAN(1, 18),
+	MCP3422_CHAN(2, 18),
+	MCP3422_CHAN(3, 18),
+        IIO_CHAN_SOFT_TIMESTAMP(4),
+};
+
+static const struct iio_chan_spec mcp3425_channels[] = {
+	MCP3422_CHAN(0, 16),
+        IIO_CHAN_SOFT_TIMESTAMP(1),
+};
+static const struct iio_chan_spec mcp3426_channels[] = {
+	MCP3422_CHAN(0, 16),
+	MCP3422_CHAN(1, 16),
+        IIO_CHAN_SOFT_TIMESTAMP(2),
+};
+
+static const struct iio_chan_spec mcp3428_channels[] = {
+	MCP3422_CHAN(0, 16),
+	MCP3422_CHAN(1, 16),
+	MCP3422_CHAN(2, 16),
+	MCP3422_CHAN(3, 16),
         IIO_CHAN_SOFT_TIMESTAMP(4),
 };
 
@@ -119,7 +136,7 @@ static const int mcp3422_sign_extend[4] = {
 	[MCP3422_SRATE_15] = 15,
 	[MCP3422_SRATE_3] = 17 };
 
-/* Client data (each client gets its own) */
+/* client data (each client gets its own) */
 struct mcp3422 {
 	struct i2c_client *i2c;
 	u8 id;
@@ -396,10 +413,11 @@ static int mcp3422_probe(struct i2c_client *client,
 	int err;
 	u8 config;
 
-        /* check for basis i2c functionality */
+        /* check for basic i2c functionality */
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
 		return -EOPNOTSUPP;
-
+        
+        /* allocate device ressources via device manager */
 	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*adc));
 	if (!indio_dev)
 		return -ENOMEM;
@@ -418,30 +436,39 @@ static int mcp3422_probe(struct i2c_client *client,
 	indio_dev->info = &mcp3422_info;
 
 	switch (adc->id) {
-	case 1:
-	case 5:
+        case 1:
 		indio_dev->channels = mcp3421_channels;
 		indio_dev->num_channels = ARRAY_SIZE(mcp3421_channels);
 		break;
 	case 2:
 	case 3:
-	case 6:
-	case 7:
 		indio_dev->channels = mcp3422_channels;
 		indio_dev->num_channels = ARRAY_SIZE(mcp3422_channels);
 		break;
-	case 4:
-	case 8:
+        case 4:
 		indio_dev->channels = mcp3424_channels;
 		indio_dev->num_channels = ARRAY_SIZE(mcp3424_channels);
 		break;
+	case 5:
+		indio_dev->channels = mcp3425_channels;
+		indio_dev->num_channels = ARRAY_SIZE(mcp3425_channels);
+		break;
+	case 6:
+	case 7:
+		indio_dev->channels = mcp3426_channels;
+		indio_dev->num_channels = ARRAY_SIZE(mcp3426_channels);
+		break;
+	case 8:
+		indio_dev->channels = mcp3428_channels;
+		indio_dev->num_channels = ARRAY_SIZE(mcp3428_channels);
+		break;
 	}
 
 	/* meaningful default configuration */
 	config = (MCP3422_CONT_SAMPLING
 		| MCP3422_CHANNEL_VALUE(1)
 		| MCP3422_PGA_VALUE(MCP3422_PGA_1)
-		| MCP3422_SAMPLE_RATE_VALUE(MCP3422_SRATE_240));
+		| MCP3422_SAMPLE_RATE_VALUE(MCP3422_SRATE_15));
 	mcp3422_update_config(adc, config);
 
         /* create buffer */
-- 
2.7.4

