From d8323503eabc0ffb54baa58bc3b4ad570a3b2f13 Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Wed, 3 Jul 2019 11:32:24 +0200
Subject: [PATCH] driver: net: swcfg: ksz8863: remove old implementation

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/phy/ksz8863-cfg.c | 1901 -----------------------------------------
 1 file changed, 1901 deletions(-)
 delete mode 100644 drivers/net/phy/ksz8863-cfg.c

diff --git a/drivers/net/phy/ksz8863-cfg.c b/drivers/net/phy/ksz8863-cfg.c
deleted file mode 100644
index b5b20c5..0000000
--- a/drivers/net/phy/ksz8863-cfg.c
+++ /dev/null
@@ -1,1901 +0,0 @@
-/*
- * ksz8863-cfg.c
- *
- * Copyright (c) 2010 SAGEM Communications
- * Copyright (c) 2011 Wago Kontakttechnik GmbH & Co.KG
- * Copyright (c) 2017 Wago Kontakttechnik GmbH & Co.KG
- *
- * Author: Karl Beldan <karl.beldan@sagemcom.com>
- * Author: Heinrich Toews <heinrich.toews@wago.com>
- * Author: Oleg Karfich <oleg.karfich@wago.com>
- *
- * Licensed under the GPL version 2
- */
-#include <linux/module.h>
-#include <linux/string.h>
-#include <linux/delay.h>
-#include <linux/fs.h>
-#include <linux/ioctl.h>
-#include <asm/uaccess.h>
-#include <linux/switch.h>
-#include <linux/of_mdio.h>
-#include <linux/of_net.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-#include <linux/etherdevice.h>
-
-#include <linux/ksz8863.h>
-
-#define KSZ8863_CPU_PORT                2
-#define KSZ8863_NUM_PORTS               3
-#define KSZ8863_NUM_VLANS               16
-
-// Global Control
-#define GC3_VLAN_ENABLE_SHIFT           7
-// Port Control
-#define PC0_TAG_INSERT_SHIFT            2
-#define PC0_TAG_REMOVE_SHIFT            1
-#define PC1_TAG_DOUBLE_SHIFT            4
-#define PC2_IN_PORT_VLAN_FILT_SHIFT     6
-// Indirect Access Control
-#define IAC0_RD_bWR_SHIFT               4
-#define IAC0_TBL_SEL_SHIFT              2
-#define IAC0_TBL_SEL_STATIC_MAC         0
-#define IAC0_TBL_SEL_VLAN               1
-#define IAC0_TBL_SEL_DYN_MAC            2
-#define IAC0_TBL_SEL_MIB_CNT            3
-#define MAX_TBL_ENTRY_LEN               (IndirectDataRegister0 - IndirectDataRegister8 + 1)
-// Indirect Data
-#define ID8_READ_IN_PROGRESS_SHIFT      7
-// Reset
-#define RESET_SOFTWARE_SHIFT            4
-#define RESET_PCS_SHIFT                 0
-
-#define KSZ8863_MAX_STATIC_ENTRIES      20
-
-#define MASK(msb, lsb)          \
-        ( (((u32)1<<((msb)-(lsb)+1))-1) << (lsb) )
-#define GET(v, msb, lsb)        \
-        ( ((u32)(v) & MASK(msb,lsb)) >> (lsb) )
-#define SET(v, f, msb, lsb)     \
-        ( (v) = ((v)&~MASK(msb,lsb)) | (( (u32)(f)<<(lsb) ) & MASK(msb,lsb)) )
-
-#define DFLT_CFG_FLAGS                  KSZ8863_CFG_PWRDOWN_FLAG
-
-#define MAC_FMT "%02x:%02x:%02x:%02x:%02x:%02x"
-
-struct static_mac_tbl_e {
-        unsigned long long mac:48;
-        unsigned forward_ports:3;
-        unsigned valid:1;
-        unsigned override:1;
-        unsigned use_fid:1;
-        unsigned fid:4;
-} __attribute__((packed));
-
-static u8 host_mac[6] = {0,0,0,0,0,0}; /* own mac address parsed from kernel command line */
-
-static int tbl_nwrite(unsigned table, u16 addr, u8 *buf, unsigned len);
-
-#define KSZ8863_HOST_PORT_MASK (0x4u)
-
-static int ksz8863_set_host_mac(void)
-{
-	struct static_mac_tbl_e e;
-	u8 buf[sizeof(struct static_mac_tbl_e)];
-	int i;
-	u8 *p = (u8*) &e;
-
-	if (!is_valid_ether_addr(host_mac)) {
-		pr_info("ksz8863: mac address parsing error, static forwarding entry not set\n");
-		return -1;
-	}
-
-	p[0] = host_mac[5];
-	p[1] = host_mac[4];
-	p[2] = host_mac[3];
-	p[3] = host_mac[2];
-	p[4] = host_mac[1];
-	p[5] = host_mac[0];
-
-	e.forward_ports = KSZ8863_HOST_PORT_MASK;
-	e.valid = 1;
-	e.override = 1;
-	e.use_fid = 0;
-	e.fid = 0;
-
-	pr_info("%s:%d,"MAC_FMT",0x%x,%d,%d,%d,%d\n", __func__,
-	       0,
-	       p[5], p[4], p[3], p[2], p[1], p[0],
-	       e.forward_ports,
-	       e.valid,
-	       e.override,
-	       e.use_fid,
-	       e.fid);
-
-	for (i = 0; i < sizeof(struct static_mac_tbl_e); i++)
-		buf[i] = ((u8 *)&e)[sizeof(struct static_mac_tbl_e) - 1 - i];
-
-	return tbl_nwrite(IAC0_TBL_SEL_STATIC_MAC, 0, buf, sizeof(struct static_mac_tbl_e));
-}
-
-
-static int ksz8863_soft_reset(void)
-{
-        u8 v;
-        int ret;
-        unsigned long time;
-        unsigned rmask = BIT(RESET_SOFTWARE_SHIFT) | BIT(RESET_PCS_SHIFT);
-
-        v = rmask;
-        if ((ret = ksz8863_nwrite(Reset, &v, 1)))
-                return ret;
-
-        time = jiffies + HZ;
-        do {
-                mdelay(10);
-                if ((ret = ksz8863_nread(Reset, &v, 1)))
-                        return ret;
-        } while(v & rmask && time_after(time, jiffies));
-
-		if (v & rmask)
-			return -1;
-		if (ksz8863_set_host_mac())
-			return -2;
-		return 0;
-}
-
-static int ksz8863_setup_dflt_cfg(int flags)
-{
-        u8 reg_val[3];
-        int ret;
-
-	if(ksz8863_fns->nread == NULL || ksz8863_nwrite == NULL)
-		return -ENODEV;
-
-        // Reset
-        if ((ret = ksz8863_soft_reset()))
-                return ret;
-
-#ifdef CONFIG_NET_DSA_KSZ8863
-	if (is_dsa_enabled()) {
-        // Tail tagging - enable
-#define GC1_TAIL_TAG_MODE_ENABLE_SHIFT                  6
-                if ((ret = ksz8863_nread(GlobalControl1, reg_val, 1)))
-                        return ret;
-                *reg_val |= 1 << GC1_TAIL_TAG_MODE_ENABLE_SHIFT;
-                if ((ret = ksz8863_nwrite(GlobalControl1, reg_val, 1)))
-                        return ret;
-		/* if dsa configured than by default set ports 1 + 2 into listening state */
-		reg_val[0] = reg_val[1] = 0x1; /* disable address learning */
-		if ((ret = ksz8863_nwrite(Port1Control2, &reg_val[0], 1)))
-			return ret;
-		if ((ret = ksz8863_nwrite(Port2Control2, &reg_val[1], 1)))
-			return ret;
-        }
-#endif
-
-	/* Turn on IGMP Snooping */
-        if ((ret = ksz8863_nread(GlobalControl3, reg_val, 1)))
-                return ret;
-        *reg_val |= BIT(6);
-        if ((ret = ksz8863_nwrite(GlobalControl3, reg_val, 1)))
-                return ret;
-
-#define GC12_UNKNOWN_PACKET_DFLT_PORT_ENABLE_SHIFT      7
-#define GC12_UNKNOWN_PACKET_DFLT_PORT_SHIFT             0
-        if ((ret = ksz8863_nread(GlobalControl12, reg_val, 1)))
-                return ret;
-        *reg_val |= 1 << GC12_UNKNOWN_PACKET_DFLT_PORT_ENABLE_SHIFT;
-
-	// clear default port bits
-	*reg_val &= ~(7 << GC12_UNKNOWN_PACKET_DFLT_PORT_SHIFT);
-	if (is_dsa_enabled())
-		// Unknown MAC @ddress - broadcoast only to cpu port (needed for multicast traffic)
-		*reg_val |= 4 << GC12_UNKNOWN_PACKET_DFLT_PORT_SHIFT;
-	else
-		// Unknown MAC @ddress - broadcoast to every ports
-		*reg_val |= 7 << GC12_UNKNOWN_PACKET_DFLT_PORT_SHIFT;
-
-        if ((ret = ksz8863_nwrite(GlobalControl12, reg_val, 1)))
-                return ret;
-
-#define PC0_BROADCAST_STORM_PROTECT_ENABLE_SHIFT        7
-#ifndef CONFIG_NET_DSA_KSZ8863
-        // Split TXQ in 4 - the datasheet wrongly states it is default
-#define PC0_TXQ_SPLIT_ENABLE_SHIFT                      0
-#define PC0_PORT_PRIO_SHIFT                             3
-        // Queue 3 has highest priority
-#define PC0_PRIO_DIFFSERV_CLASS_SHIFT                   6
-        // Protect against broadcast storms
-        *reg_val = 1 << PC0_TXQ_SPLIT_ENABLE_SHIFT;
-        *reg_val |= 1 << PC0_BROADCAST_STORM_PROTECT_ENABLE_SHIFT;
-#else
-        *reg_val = 1 << PC0_BROADCAST_STORM_PROTECT_ENABLE_SHIFT;
-#endif
-        reg_val[1] = reg_val[2] = *reg_val;
-
-	/* Enable BCAST Protection on Port1 & Port2 */
-        if ((ret = ksz8863_nwrite(Port1Control0, &reg_val[0], 1)))
-                return ret;
-        if ((ret = ksz8863_nwrite(Port2Control0, &reg_val[1], 1)))
-                return ret;
-
-        /* Set Port 1 and 2 LED Modes Bits [5,4]
-         *   00: LED0 -> Link/ACT, LED1 -> Speed
-         *   01: LED0 -> Link    , LED1 -> ACT
-         *   10: LED0 -> Link/ACT, LED1 -> Duplex
-         *   11: LED0 -> Link    , LED1 -> Duplex
-         */
-
-        // LEDs - LED0 -> Link, LED1 -> ACT
-#define PM_LED_MODE_SELECTION_SHIFT                     4
-        if ((ret = ksz8863_nread(PowerManagementLedMode, reg_val, 1)))
-                return ret;
-        *reg_val &= ~(3 << PM_LED_MODE_SELECTION_SHIFT);
-        *reg_val |=   1 << PM_LED_MODE_SELECTION_SHIFT;
-        if ((ret = ksz8863_nwrite(PowerManagementLedMode, reg_val, 1)))
-                return ret;
-
-	/* Put Port 3 (CPU) into MAC Mode */
-        *reg_val = 1 << 7;
-        if ((ret = ksz8863_nwrite(Port3Control5, reg_val, 1)))
-                return ret;
-
-        // Power Down the ports
-        if (flags & KSZ8863_CFG_PWRDOWN_FLAG) {
-		if ((ret = ksz8863_nread(Port1Control13, reg_val, 1)))
-			return ret;
-#define PC1_POWER_DOWN_SHIFT                            3
-		*reg_val |= 1 << PC1_POWER_DOWN_SHIFT;
-		if ((ret = ksz8863_nwrite(Port1Control13, reg_val, 1)))
-			return ret;
-		if ((ret = ksz8863_nwrite(Port2Control13, reg_val, 1)))
-			return ret;
-	}
-
-	if (is_dsa_enabled()) {
-		/* Setup STP Settings */
-		*reg_val = 0x3; 	/* RX Enable, Learning disable */
-		if ((ret = ksz8863_nwrite(Port1Control2, reg_val, 1))) /* X2 */
-			return ret;
-		if ((ret = ksz8863_nwrite(Port2Control2, reg_val, 1))) /* X1 */
-			return ret;
-		*reg_val = 0x5; 	/* RX Enable, Learning disable */
-		if ((ret = ksz8863_nwrite(Port3Control2, reg_val, 1))) /* CPU */
-			return ret;
-	}
-
-        return 0;
-}
-
-static char __buf[2048];
-
-
-/**
- * TABLES
- */
-static int tbl_nread(unsigned table, u16 addr, u8 *buf, unsigned len)
-{
-        u8 val[2];
-        int ret;
-
-        if (table > IAC0_TBL_SEL_MIB_CNT) {
-                printk(KERN_ERR "%s: invalid table (%d)\n", __func__, table);
-                return -EINVAL;
-        }
-        if (addr & ~((1 << 10) - 1)) {
-                printk(KERN_ERR "%s: invalid address (%d)\n", __func__, addr);
-                return -EINVAL;
-        }
-        if (len > MAX_TBL_ENTRY_LEN || !len) {
-                printk(KERN_ERR "%s: invalid len (%d)\n", __func__, len);
-                return -EINVAL;
-        }
-
-
-        val[0] = 1 << IAC0_RD_bWR_SHIFT;
-        val[0] |= table << IAC0_TBL_SEL_SHIFT;
-        val[0] |= addr >> 8;
-        val[1] = addr & 0xff;
-        if ((ret = ksz8863_nwrite(IndirectAccessControl0, val, 2)))
-                return ret;
-        if (table == IAC0_TBL_SEL_DYN_MAC || table == IAC0_TBL_SEL_MIB_CNT) {
-                unsigned long time = jiffies + HZ;
-                do {
-                        if ((ret = ksz8863_nread(IndirectDataRegister8, val, 1)))
-                                return ret;
-                        mdelay(10);
-                } while(val[0] & BIT(ID8_READ_IN_PROGRESS_SHIFT) && time_after(time, jiffies)); // cpu status read
-                if (val[0] & BIT(ID8_READ_IN_PROGRESS_SHIFT)) {
-                        printk(KERN_ERR "%s: access timed out\n", __func__);
-                        return -1;
-                }
-        }
-        return ksz8863_nread(IndirectDataRegister0 - len + 1, buf, len);
-}
-
-static int tbl_nwrite(unsigned table, u16 addr, u8 *buf, unsigned len)
-{
-        u8 val[2];
-        int ret;
-
-        if (table > IAC0_TBL_SEL_VLAN) {
-                printk(KERN_ERR "%s: invalid table (%d)\n", __func__, table);
-                return -EINVAL;
-        }
-        if (addr & ~((1 << 10) - 1)) {
-                printk(KERN_ERR "%s: invalid address (%d)\n", __func__, addr);
-                return -EINVAL;
-        }
-        if (len > MAX_TBL_ENTRY_LEN || !len) {
-                printk(KERN_ERR "%s: invalid len (%d)\n", __func__, len);
-                return -EINVAL;
-        }
-
-        if ((ret = ksz8863_nwrite(IndirectDataRegister0 - len + 1, buf, len)))
-                return ret;
-
-        val[0] = table << IAC0_TBL_SEL_SHIFT;
-        val[0] |= addr >> 8; // indirect address
-        val[1] = addr & 0xff;
-        return ksz8863_nwrite(IndirectAccessControl0, val, 2);
-}
-
-/**
- * Dynamic MAC Address Table
- */
-struct dyn_mac_tbl_e {
-        unsigned long long mac:48;
-        unsigned fid:4;
-        unsigned port:2;
-        unsigned time:2;
-        unsigned valid_nb:10; // global
-        unsigned empty:1;     // global
-        unsigned reserved:4;
-        unsigned nrdy:1;
-} __attribute__((packed));
-
-static int get_dyn_mac_e(unsigned idx, struct dyn_mac_tbl_e *entry)
-{
-        u8 buf[sizeof(struct dyn_mac_tbl_e)];
-        int i;
-
-        if (idx > 1 << 10)
-                return -EINVAL;
-
-        if (tbl_nread(IAC0_TBL_SEL_DYN_MAC, idx, buf, sizeof(struct dyn_mac_tbl_e)))
-                return -EIO;
-
-        for (i = 0; i < sizeof(struct dyn_mac_tbl_e); i++)
-                ((u8 *)entry)[i] = buf[sizeof(struct dyn_mac_tbl_e) - 1 - i];
-
-        return 0;
-}
-
-
-static int get_static_mac_e(unsigned idx, struct static_mac_tbl_e *entry)
-{
-        u8 buf[sizeof(struct static_mac_tbl_e)];
-        int i;
-
-        if (idx > 1 << 10)
-                return -EINVAL;
-
-        if (tbl_nread(IAC0_TBL_SEL_STATIC_MAC, idx, buf, sizeof(struct static_mac_tbl_e)))
-                return -EIO;
-
-        for (i = 0; i < sizeof(struct static_mac_tbl_e); i++)
-                ((u8 *)entry)[i] = buf[sizeof(struct static_mac_tbl_e) - 1 - i];
-
-        return 0;
-}
-
-/**
- * VLAN table
- */
-struct vlan_tbl_e {
-        unsigned vid:12;
-        unsigned fid:4;
-        unsigned member:3;
-        unsigned valid:1;
-} __attribute__((packed));
-
-static int get_vlan_tbl_e(unsigned idx, struct vlan_tbl_e *entry)
-{
-        u8 buf[sizeof(struct vlan_tbl_e)];
-        int i;
-
-        if (idx > KSZ8863_NUM_VLANS)
-                return -EINVAL;
-
-        if (tbl_nread(IAC0_TBL_SEL_VLAN, idx, buf, sizeof(struct vlan_tbl_e)))
-                return -EIO;
-
-        for (i = 0; i < sizeof(struct vlan_tbl_e); i++)
-                ((u8 *)entry)[i] = buf[sizeof(struct vlan_tbl_e) - 1 - i];
-
-        return 0;
-};
-
-static int set_vlan_tbl_e(unsigned idx, struct vlan_tbl_e *entry)
-{
-        u8 buf[sizeof(struct vlan_tbl_e)];
-        int i;
-
-        if (idx > KSZ8863_NUM_VLANS)
-                return -EINVAL;
-
-        for (i = 0; i < sizeof(struct vlan_tbl_e); i++)
-                buf[i] = ((u8 *)entry)[sizeof(struct vlan_tbl_e) - 1 - i];
-
-        return tbl_nwrite(IAC0_TBL_SEL_VLAN, idx, buf, sizeof(struct vlan_tbl_e));
-};
-
-
-
-/**
- *
- */
-static u8 cur_reg = 0;
-static u8 cur_port = 1;
-
-static int setregbits(u8 reg, u8 val, unsigned msb, unsigned lsb)
-{
-        u8 v;
-        int ret;
-
-        if (msb > 8)
-                return -EINVAL;
-
-        if ((ret = ksz8863_nread(reg, &v, 1)))
-                return ret;
-
-        SET(v, val, msb, lsb);
-
-        return ksz8863_nwrite(reg, &v, 1);
-}
-
-static int getregbits(u8 reg, u8 *val, unsigned msb, unsigned lsb)
-{
-        u8 v;
-        int ret;
-
-        if (msb > 8)
-                return -EINVAL;
-
-        if ((ret = ksz8863_nread(reg, &v, 1)))
-                return ret;
-
-        *val = GET(v, msb, lsb);
-
-        return 0;
-}
-
-
-static int ksz8863_sw_set_sel_reg(struct switch_dev *dev,
-                                  const struct switch_attr *attr,
-                                  struct switch_val *val)
-{
-        cur_reg = val->value.i;
-        return 0;
-}
-
-static int ksz8863_sw_get_sel_reg(struct switch_dev *dev,
-                                  const struct switch_attr *attr,
-                                  struct switch_val *val)
-{
-        val->value.i = cur_reg;
-        return 0;
-}
-
-static int ksz8863_sw_set_reg(struct switch_dev *dev,
-                              const struct switch_attr *attr,
-                              struct switch_val *val)
-{
-        u8 v = val->value.i;
-        return ksz8863_nwrite(cur_reg, &v, 1);
-}
-
-static int ksz8863_sw_get_reg(struct switch_dev *dev,
-                              const struct switch_attr *attr,
-                              struct switch_val *val)
-{
-        u8 v;
-        int ret;
-
-        if ((ret = ksz8863_nread(cur_reg, &v, 1)))
-                return ret;
-        val->value.i = v;
-
-        return 0;
-}
-
-static inline int ksz8863_sw_set_vlan_enable(struct switch_dev *dev,
-                                             const struct switch_attr *attr,
-                                             struct switch_val *val)
-{
-        return setregbits(GlobalControl3, !!val->value.i, GC3_VLAN_ENABLE_SHIFT, GC3_VLAN_ENABLE_SHIFT);
-}
-
-static inline int ksz8863_sw_get_vlan_enable(struct switch_dev *dev,
-                                             const struct switch_attr *attr,
-                                             struct switch_val *val)
-{
-        int ret;
-        u8 v;
-
-        if ((ret = getregbits(GlobalControl3, &v, GC3_VLAN_ENABLE_SHIFT, GC3_VLAN_ENABLE_SHIFT)))
-                return ret;
-        val->value.i = v;
-
-        return 0;
-}
-
-static int ksz8863_sw_set_vlan_table(struct switch_dev *dev,
-                                     const struct switch_attr *attr,
-                                     struct switch_val *val)
-{
-        struct vlan_tbl_e entry;
-        int vid, fid, member, valid;
-
-        if (sscanf(val->value.s, "%d,%d,%d,%d",
-                   &vid,
-                   &fid,
-                   &member,
-                   &valid) != 4)
-                return -EINVAL;
-
-        entry.vid    = vid;
-        entry.fid    = fid;
-        entry.member = member;
-        entry.valid  = valid;
-
-        return set_vlan_tbl_e(val->port_vlan, &entry);
-}
-
-static int ksz8863_sw_get_vlan_table(struct switch_dev *dev,
-                                     const struct switch_attr *attr,
-                                     struct switch_val *val)
-{
-        struct vlan_tbl_e entry;
-        int ret;
-
-        if ((ret = get_vlan_tbl_e(val->port_vlan, &entry)))
-                return ret;
-
-        val->len = snprintf(__buf, sizeof(__buf), "%d,%d,%d,%d",
-                            entry.vid,
-                            entry.fid,
-                            entry.member,
-                            entry.valid);
-        val->value.s = __buf;
-
-        return 0;
-}
-
-static int ksz8863_sw_get_dynmacs(struct switch_dev *dev,
-                                  const struct switch_attr *attr,
-                                  struct switch_val *val)
-{
-        struct dyn_mac_tbl_e entry;
-        u8 *buf;
-        int count;
-        int i;
-        int ret;
-
-        if ((ret = get_dyn_mac_e(0, &entry)))
-                return ret;
-
-        val->len = 0;
-        __buf[0] = '\0';
-        val->value.s = __buf;
-
-        if (entry.empty)
-                return 0;
-
-        count = entry.valid_nb + 1;
-        for (i = 0; i < count && sizeof(__buf) > val->len + 64; i++) {
-                if ((ret = get_dyn_mac_e(i, &entry)))
-                        return ret;
-                buf = (char *)&entry;
-                val->len += snprintf(__buf + val->len, sizeof(__buf) - val->len,
-                                     MAC_FMT "  %d  %02d  %d\n",
-                                     buf[5], buf[4], buf[3], buf[2], buf[1], buf[0],
-                                     entry.port,
-                                     entry.fid,
-                                     entry.time);
-        }
-
-        if (i < count)
-                printk(KERN_ERR "%s: --- %d MACs not displayed ---\n", __func__, count - i);
-
-        return 0;
-}
-
-static int ksz8863_sw_get_staticmacs(struct switch_dev *dev,
-				     const struct switch_attr *attr,
-				     struct switch_val *val)
-{
-        struct static_mac_tbl_e entry;
-        u8 *buf;
-        int i;
-        int ret;
-
-        if ((ret = get_static_mac_e(0, &entry)))
-                return ret;
-
-        val->len = 0;
-        __buf[0] = '\0';
-        val->value.s = __buf;
-
-	for (i = 1; i < KSZ8863_MAX_STATIC_ENTRIES; i++) {
-
-		  if (!entry.valid)
-			  break;
-
-		  buf = (char *)&entry;
-		  val->len += snprintf(__buf + val->len, sizeof(__buf) - val->len,
-				       MAC_FMT "  0x%x  %02d  %d\n",
-				       buf[5], buf[4], buf[3], buf[2], buf[1], buf[0],
-				       entry.forward_ports & 0x7,
-				       entry.fid,
-				       entry.override);
-
-		  /* get the next entry */
-		  if ((ret = get_static_mac_e(i, &entry)))
-			  return ret;
-        }
-
-        return 0;
-}
-
-
-static int ksz8863_sw_set_staticmacs(struct switch_dev *dev,
-				     const struct switch_attr *attr,
-				     struct switch_val *val)
-{
-        struct static_mac_tbl_e entry;
-	u8 buf[sizeof(struct static_mac_tbl_e)];
-        u8 *macaddr = (char *)&entry;
-	u16 idx;
-	int values[12], i;
-
-	/* scan data
-	 * command syntax should be <0,00:30:DE:FF:00:C0,0x4,1,1,0,0>2
-	 */
-        if (sscanf(val->value.s, "%d,"MAC_FMT",%x,%d,%d,%d,%d",
-		   &values[11],
-		   &values[5], &values[4], &values[3], &values[2], &values[1], &values[0],
-		   &values[6], &values[7], &values[8], &values[9], &values[10])!= 12)
-		return -EINVAL;
-
-	/* set the mac address */
-	for (i = 0; i < 6; i++)
-		macaddr[i] = (char) values[i];
-
-	entry.forward_ports = (unsigned) values[6] & 0x7;
-	entry.valid = (unsigned) values[7] & 0x1;
-	entry.override = (unsigned) values[8] & 0x1;
-	entry.use_fid = (unsigned) values[9] & 0x1;
-	entry.fid = (unsigned) values[10] & 0xf;
-	idx = (u16) values[11];
-
-	pr_info("%s:%d,"MAC_FMT",0x%x,%d,%d,%d,%d\n", __func__,
-	       idx,
-	       macaddr[5], macaddr[4], macaddr[3], macaddr[2], macaddr[1], macaddr[0],
-	       entry.forward_ports,
-	       entry.valid,
-	       entry.override,
-	       entry.use_fid,
-	       entry.fid);
-
-        for (i = 0; i < sizeof(struct static_mac_tbl_e); i++)
-                buf[i] = ((u8 *)&entry)[sizeof(struct static_mac_tbl_e) - 1 - i];
-
-        return tbl_nwrite(IAC0_TBL_SEL_STATIC_MAC, idx, buf, sizeof(struct static_mac_tbl_e));
-}
-
-static int ksz8863_sw_set_sel_port(struct switch_dev *dev,
-                                   const struct switch_attr *attr,
-                                   struct switch_val *val)
-{
-	if (val->value.i < 1 || val->value.i > 3)
-		return -EINVAL;
-
-        cur_port = val->value.i;
-        return 0;
-}
-
-static int ksz8863_sw_get_sel_port(struct switch_dev *dev,
-                                   const struct switch_attr *attr,
-                                   struct switch_val *val)
-{
-        val->value.i = cur_port;
-        return 0;
-}
-
-struct ksz_tbl_mib_entry {
-	int id;
-	char* str_id;
-	char* str_descr;
-};
-
-struct ksz_tbl_mib_entry ksz_tbl_mib [] = {
-	{  0x0, "RxLoPriorityByte", 	"Rx lo-priority (default) octet count including bad packets" },
-	{  0x1, "RxHiPriorityByte", 	"Rx hi-priority octet count including bad packets" },
-	{  0x2, "RxUndersizePkt", 	"Rx undersize packets w/ good CRC" },
-	{  0x3, "RxFragments", 		"Rx fragment packets w/ bad CRC, symbol errors or alignment errors" },
-	{  0x4, "RxOversize", 		"Rx oversize packets w/ good CRC (max: 1536 or 1522 bytes)" },
-	{  0x5, "RxJabbers", 		"Rx packets longer than 1522 bytes w/ either CRC errors," \
-					"alignment errors, or symbol errors (depends on max packet size setting)" },
-	{  0x6, "RxSymbolError",		"Rx packets w/ invalid data symbol and legal packet size." },
-	{  0x7, "RxCRCError", 		"Rx packets within (64,1522) bytes w/ an integral number of bytes and a bad CRC " \
-					"(upper limit depends on max packet size setting)" },
-	{  0x8, "RxAlignmentError", 	"Rx packets within (64,1522) bytes w/ a non-integral number of bytes and a bad CRC " \
-					"(upper limit depends on max packet size setting)" },
-	{  0x9, "RxControl8808Pkts", 	"Number of MAC control frames received by a port with 88-08h in EtherType field" },
-	{  0xA, "RxPausePkts", 		"Number of PAUSE frames received by a port. PAUSE frame is qualified with EtherType " \
-					"(88-08h), DA, control opcode (00-01), data length (64B min), and a valid CRC" },
-	{  0xB, "RxBroadcast", 		"Rx good broadcast packets (not including error broadcast packets or valid multicast packets)" },
-	{  0xC, "RxMulticast", 		"Rx good multicast packets (not including MAC control frames, " \
-					"error multicast packets or valid broadcast packets)" },
-	{  0xD, "RxUnicast", 		"Rx good unicast packets" },
-	{  0xE, "Rx64Octets", 		"Total Rx packets (bad packets included) that were 64 octets in length" },
-	{  0xF, "Rx65to127Octets", 	"Total Rx packets (bad packets included) that are between 65 and 127 octets in length" },
-	{ 0x10, "Rx128to255Octets", 	"Total Rx packets (bad packets included) that are between 128 and 255 octets in length" },
-	{ 0x11, "Rx256to511Octets", 	"Total Rx packets (bad packets included) that are between 256 and 511 octets in length" },
-	{ 0x12, "Rx512to1023Octets", 	"Total Rx packets (bad packets included) that are between 512 and 1023 octets in length" },
-	{ 0x13, "Rx1024to1522Octets", 	"Total Rx packets (bad packets included) that are between 1024 and 1522 octets in length " \
-					"(upper limit depends on max packet size setting)" },
-	{ 0x14, "TxLoPriorityByte", 	"Tx lo-priority good octet count, including PAUSE packets" },
-	{ 0x15, "TxHiPriorityByte", 	"Tx hi-priority good octet count, including PAUSE packets" },
-	{ 0x16, "TxLateCollision", 	"The number of times a collision is detected later than 512 bit-times into the Tx of a packet" },
-	{ 0x17, "TxPausePkts", 		"Number of PAUSE frames transmitted by a port" },
-	{ 0x18, "TxBroadcastPkts", 	"Tx good broadcast packets (not including error broadcast or valid multicast packets)" },
-	{ 0x19, "TxMulticastPkts", 	"Tx good multicast packets (not including error multicast packets or valid broadcast packets)" },
-	{ 0x1A, "TxUnicastPkts", 	"Tx good unicast packets" },
-	{ 0x1B, "TxDeferred", 		"Tx packets by a port for which the 1st Tx attempt is delayed due to the busy medium" },
-	{ 0x1C, "TxTotalCollision", 	"Tx total collision, half duplex only" },
-	{ 0x1D, "TxExcessiveCollision", "A count of frames for which Tx fails due to excessive collisions" },
-	{ 0x1E, "TxSingleCollision", 	"Successfully Tx frames on a port for which Tx is inhibited by exactly one collision" },
-	{ 0x1F, "TxMultipleCollision", 	"Successfully Tx frames on a port for which Tx is inhibited by more than one collision" },
-	{    0, NULL, NULL },
-};
-
-#define KSZ_TBL_MIB_OFLOW BIT(7)
-#define KSZ_TBL_MIB_VALID BIT(6)
-static int ksz8863_sw_get_statistics(struct switch_dev *dev,
-                                  const struct switch_attr *attr,
-                                  struct switch_val *val)
-{
-        u8 buf[4];
-        int i = 0;
-        int ret = 0;
-	int offset = (cur_port - 1) << 5;
-
-        val->len = 0;
-        __buf[0] = '\0';
-        val->value.s = __buf;
-
-	val->len += snprintf(__buf + val->len, sizeof(__buf) - val->len,
-			     "Statistics for PORT %d (off 0x%x):\n",
-			     cur_port, offset);
-
-	while (ksz_tbl_mib[i].str_id != NULL) {
-		u32 value;
-		u8 oflow;
-
-		if (tbl_nread(IAC0_TBL_SEL_MIB_CNT, ksz_tbl_mib[i].id + offset, buf, sizeof(buf))) {
-	                ret = -EIO;
-			break;
-		}
-
-		if (!(buf[0] & KSZ_TBL_MIB_VALID))
-			continue;
-
-		oflow = (buf[0] & KSZ_TBL_MIB_OFLOW);
-
-		buf[0] &= ~(KSZ_TBL_MIB_OFLOW | KSZ_TBL_MIB_VALID);
-
-		value = (buf[3] <<  0) |
-			(buf[2] <<  8) |
-			(buf[1] << 16) |
-			(buf[0] << 24);
-
-		if (sizeof(__buf) < (val->len + 64)) {
-			pr_err("SWCONFIG: MSG buffer full!\n");
-			ret = -EFAULT;
-			break;
-		}
-
-                val->len += snprintf(__buf + val->len, sizeof(__buf) - val->len,
-                                     "%25s\t%15u\t%s\n",
-                                     ksz_tbl_mib[i].str_id,
-                                     value,
-				     oflow ? "*" : "");
-
-		i++;
-	}
-
-        return ret;
-}
-
-static inline int ksz8863_sw_set_ins_tag(struct switch_dev *dev,
-                                         const struct switch_attr *attr,
-                                         struct switch_val *val)
-{
-        return setregbits(Port1Control0 + val->port_vlan * KSZ8863_PORTS_REGS_OFFSET,
-                          !!val->value.i, PC0_TAG_INSERT_SHIFT, PC0_TAG_INSERT_SHIFT);
-}
-
-static inline int ksz8863_sw_get_ins_tag(struct switch_dev *dev,
-                                         const struct switch_attr *attr,
-                                         struct switch_val *val)
-{
-        int ret;
-        u8 v;
-
-        if ((ret = getregbits(Port1Control0 + val->port_vlan * KSZ8863_PORTS_REGS_OFFSET,
-                              &v, PC0_TAG_INSERT_SHIFT, PC0_TAG_INSERT_SHIFT)))
-                return ret;
-        val->value.i = v;
-
-        return 0;
-}
-
-static inline int ksz8863_sw_set_tail_tag(struct switch_dev *dev,
-                                         const struct switch_attr *attr,
-                                         struct switch_val *val)
-{
-        return setregbits(GlobalControl1, !!val->value.i,
-			  GC1_TAIL_TAG_MODE_ENABLE_SHIFT,
-			  GC1_TAIL_TAG_MODE_ENABLE_SHIFT);
-}
-
-static inline int ksz8863_sw_get_tail_tag(struct switch_dev *dev,
-					  const struct switch_attr *attr,
-					  struct switch_val *val)
-{
-        int ret;
-        u8 v;
-
-        if ((ret = getregbits(GlobalControl1, &v,
-			      GC1_TAIL_TAG_MODE_ENABLE_SHIFT,
-			      GC1_TAIL_TAG_MODE_ENABLE_SHIFT)))
-		return ret;
-
-        val->value.i = v;
-
-        return 0;
-}
-
-/* Broadcast Storm Protection
- *
- * Register 6 (0x06): Global Control 4
- * Register 7 (0x07): Global Control 5
- *
- * |     GlobalControl4      |     GlobalControl5       |
- * ------------------------------------------------------
- * | 7  6  5  4  3  2  1  0  |  7  6  5  4  3  2  1  0  |
- * | x  x  x  x  x [--------- bcast rate[10:0]--------] |
- *
- * "The rate is based on a 67ms interval for 100BT and a 500ms interval for 10BT.
- * At the beginning of each interval, the counter is cleared to zero, and the
- * rate limit mechanism starts to count the number of bytes during the interval.
- * The rate definition is described in register 6 (0x06) and 7 (0x07).
- * The default setting is 0x63 (99 decimal). This is equal to a rate of 1%, calculated as follows:
- * 148,800 frames/sec * 67ms/interval * 1% = 99 frames/interval (approx.) = 0x63
- * Note: 148,800 frames/sec is based on 64-byte block of packets in 100BASE-TX with
- * 12 bytes of IPG and 8 bytes of preamble between two packets. " (Datasheet, Page 28)
- *
- * */
-static inline int ksz8863_sw_set_bcast_protect(struct switch_dev *dev,
-					       const struct switch_attr *attr,
-					       struct switch_val *val)
-{
-	u8 gc4_v, gc5_v, v[2];
-	int ret, rate = val->value.i;
-	bool mode_10bt;
-	int frames_per_sec, ms_per_interval, frames_per_interval, div, num;
-
-        if ((ret = ksz8863_nread(Port1Control0, &v[0], 1)))
-                return ret;
-
-        if ((ret = ksz8863_nread(Port2Control0, &v[1], 1)))
-                return ret;
-
-	if (rate == 0) {
-                /* disable broadcast storm protection */
-		v[0] &= ~BIT(7);
-		if ((ret = ksz8863_nwrite(Port1Control0, &v[0], 1)))
-			return ret;
-
-		v[1] &= ~BIT(7);
-		if ((ret = ksz8863_nwrite(Port2Control0, &v[1], 1)))
-			return ret;
-
-		pr_info("%s: Disabled Broadcast Storm Protection on Port1 and Port2\n", __func__);
-		return 0;
-	}
-
-	/* the maximum rate is aprox 20% (2047 Frames/Interval) */
-	if (rate > 20) {
-		pr_info("%s: Rate (%d%%) is too high. Throttle to max (20%%)\n", __func__, rate);
-		rate = 20;
-	}
-
-        if ((ret = ksz8863_nread(GlobalControl4, &gc4_v, 1)))
-                return ret;
-
-	pr_debug("%s: read: gc4 (0x%x)\n", __func__, (u32) gc4_v);
-
-       /* Check for Interface Mode -- BIT 4: Switch MII 10BT */
-	if (gc4_v & BIT(4)) { /* 10BT */
-		mode_10bt = true;
-		frames_per_sec = 148800 / 10;
-		ms_per_interval = 500;
-	} else { /* 100BT */
-		mode_10bt = false;
-		frames_per_sec = 148800;
-		ms_per_interval = 67;
-	}
-
-	pr_debug("%s: %s Mode (fps %d, mpi %d)\n", __func__, mode_10bt ? "10BT" : "100BT",
-		frames_per_sec, ms_per_interval);
-
-	/* frames_per_interval = ((frames_per_sec * ms_per_interval) / 1000) * (rate / 100); */
-	div = 1000 * 100;
-	num = frames_per_sec * ms_per_interval * rate;
-	frames_per_interval = num / div;
-	if ((num % div) > (div / 2)) {
-		pr_debug("%s: INC frames_per_interval\n", __func__);
-		frames_per_interval++;
-	}
-
-	gc5_v = (frames_per_interval & 0xff);
-	gc4_v &= ~0x7;
-	gc4_v |= (frames_per_interval >> 8) & 0x7;
-
-        if ((ret = ksz8863_nwrite(GlobalControl5, &gc5_v, 1)))
-                return ret;
-
-        if ((ret = ksz8863_nwrite(GlobalControl4, &gc4_v, 1)))
-                return ret;
-
-	pr_debug("%s: written: gc4 (0x%x), gc5 (0x%x)\n", __func__, (u32) gc4_v, (u32) gc5_v);
-
-        /* enable broadcast storm protection */
-	v[0] |= BIT(7);
-	if ((ret = ksz8863_nwrite(Port1Control0, &v[0], 1)))
-		return ret;
-	v[1] |= BIT(7);
-	if ((ret = ksz8863_nwrite(Port2Control0, &v[1], 1)))
-		return ret;
-
-	pr_info("%s: Enabled Broadcast Storm Protection (Port 1 & 2) (%s: Rate %d, %d Frames/Interval)\n",
-		__func__, mode_10bt ? "10BT" : "100BT", rate, frames_per_interval);
-
-        return 0;
-}
-
-static inline int ksz8863_sw_get_bcast_protect(struct switch_dev *dev,
-					       const struct switch_attr *attr,
-					       struct switch_val *val)
-{
-	u8 gc4_v, gc5_v, v[2];
-	int ret, rate;
-	bool mode_10bt, bcast_en;
-	int frames_per_sec, ms_per_interval, frames_per_interval, div, num;
-
-        if ((ret = ksz8863_nread(GlobalControl4, &gc4_v, 1)))
-                return ret;
-
-        if ((ret = ksz8863_nread(GlobalControl5, &gc5_v, 1)))
-                return ret;
-
-       /* Check for Interface Mode -- BIT 4: Switch MII 10BT */
-	if (gc4_v & BIT(4)) { /* 10BT */
-		mode_10bt = true;
-		frames_per_sec = 148800 / 10;
-		ms_per_interval = 500;
-	} else { /* 100BT */
-		mode_10bt = false;
-		frames_per_sec = 148800;
-		ms_per_interval = 67;
-	}
-
-	frames_per_interval = ((gc4_v & 0x7) << 8) | gc5_v;
-
-	div = frames_per_sec * ms_per_interval;
-	num = frames_per_interval * 1000 * 100;
-	rate = num / div;
-	if ((num % div) > (div / 2)) {
-		pr_debug("%s: INC rate\n", __func__);
-		rate++;
-	}
-
-        if ((ret = ksz8863_nread(Port1Control0, &v[0], 1)))
-                return ret;
-
-        if ((ret = ksz8863_nread(Port2Control0, &v[1], 1)))
-                return ret;
-
-	if ((v[0] & BIT(7)) && (v[1] & BIT(7)))
-		bcast_en = true;
-	else
-		bcast_en = false;
-
-	pr_info("%s: Broadcast Storm Protection is %s (on Port1/Port2) (%s: Calc-Rate %d, %d Frames/Interval)\n",
-		__func__, bcast_en ? "enabled" : "disabled", mode_10bt ? "10BT" : "100BT",
-		rate, frames_per_interval);
-
-	/* return a 0-value to indicate that broadcast protection is disabled */
-        val->value.i = bcast_en ? rate : 0;
-
-        return 0;
-}
-
-static int ksz8863_sw_set_ratelimit(struct switch_dev *dev,
-				    const struct switch_attr *attr,
-				    struct switch_val *val)
-{
-	u8 v[4];
-	u8 reg;
-        int rate, ret;
-	int rate_step, rate_start, rate_stop;
-	char *modestr = __buf;
-	bool mode_10bt;
-
-	pr_info("%s: received <%s>\n", __func__, val->value.s);
-
-	if (strlen(val->value.s) > 8) {
-		pr_err("%s: argument <%s> is too long (max 8 chars)!\n", __func__, val->value.s);
-		return -EINVAL;
-	}
-
-	if (strncmp(val->value.s, "off", 3) == 0) {
-		pr_info("%s: turning off rate limiting!\n", __func__);
-		reg = 0;
-		goto limit_off;
-	}
-
-        if (sscanf(val->value.s, "%d.%s",
-                   &rate,
-                   modestr) != 2)
-                return -EINVAL;
-
-	pr_debug("%s: rate %d, modestr <%s>\n", __func__, rate, modestr);
-
-       /* Check for Interface Mode -- BIT 4: Switch MII 10BT */
-        if ((ret = ksz8863_nread(GlobalControl4, v, 1)))
-                return ret;
-	if (v[0] & BIT(4)) /*  10BT */
-		mode_10bt = true;
-	else                /* 100BT */
-		mode_10bt = false;
-
-	if (strncmp(modestr, "mbps", 4) == 0) {
-
-		/* '00' and '0x64'/'0x09' will set full speed */
-		rate_start = 0;
-		rate_stop  = mode_10bt ? 10 : 100;
-
-		if ((rate < rate_start) || (rate > rate_stop))
-			return -EINVAL;
-
-		reg = rate;
-
-	} else if (strncmp(modestr, "kbps", 4) == 0) {
-		/* lookup kbps */
-		rate_step = 64;
-		rate_start = rate_step;
-		rate_stop  = 960;
-
-		if ((rate < rate_start) || (rate > rate_stop)
-		    || ((rate % rate_step) != 0))
-			return -EINVAL;
-
-		reg = 0x64 + (rate / rate_step); /* 0x65..0x73 */
-	} else {
-		return -EINVAL;
-	}
-
-	/* enable rate limiting and rate into all prio queues */
-	reg |= BIT(7);
-
-limit_off:
-	v[0] = v[1] = v[2] = v[3] = reg;
-	pr_info("%s: write: rate reg 0x%x\n", __func__, (u32) reg);
-	if ((ret = ksz8863_nwrite(Port3EgressRateLimitQ0, v, 4)))
-		return ret;
-
-	if (reg)
-		pr_info("%s: %s: rate limit set to <%d.%s>\n",
-			__func__, mode_10bt ? "10BT" : "100BT", rate, modestr);
-
-        return 0;
-}
-
-static int ksz8863_sw_get_ratelimit(struct switch_dev *dev,
-				    const struct switch_attr *attr,
-				    struct switch_val *val)
-{
-	u8 v[4];
-        int rate = -1, ret, i;
-	int rate_reg, rate_stop;
-	char modestr[6];
-	bool disabled = true;
-	bool mode_10bt;
-
-       /* Check for Interface Mode -- BIT 4: Switch MII 10BT */
-        if ((ret = ksz8863_nread(GlobalControl4, v, 1)))
-                return ret;
-	if (v[0] & BIT(4)) /*  10BT */
-		mode_10bt = true;
-	else                /* 100BT */
-		mode_10bt = false;
-
-	if ((ret = ksz8863_nread(Port3EgressRateLimitQ0, v, 4)))
-		return ret;
-
-	strcpy(modestr, "none");
-
-	/* we take just the first queue */
-	val->len = snprintf(__buf, sizeof(__buf), "disabled");
-	val->value.s = __buf;
-
-	for (i = 0; i < 4; i++) {
-		if (v[i] & BIT(7)) {
-
-			disabled = false;
-			rate_reg = v[i] & 0x7f;
-
-			rate_stop = mode_10bt ? 10 : 100;
-			if (rate_reg <= rate_stop) {
-				/* mbps */
-				if ((rate_reg == 0) || (rate_reg == rate_stop))
-					rate = rate_stop;
-				else
-					rate = rate_reg;
-				strcpy(modestr, "mbps");
-			} else if (rate_reg <= 0x73) {
-				/* kbps */
-				rate = 64 * (rate_reg - 0x64);
-				strcpy(modestr, "kbps");
-			}
-		} else
-			disabled = true;
-
-		if (i == 0) {
-			if (!disabled) {
-				/* we take just the first queue */
-				val->len = snprintf(__buf, sizeof(__buf), "%d.%s",
-						    rate,
-						    modestr);
-				val->value.s = __buf;
-			}
-		}
-
-		pr_info("%s: Q%d: rate limiting is %s, %d.%s.\n",
-			__func__, i, disabled ? "disabled" : "enabled", rate, modestr);
-	}
-
-        return 0;
-}
-
-#define KSZ_SNIFF_TX_BIT  BIT(5)
-#define KSZ_SNIFF_RX_BIT  BIT(6)
-#define KSZ_SNIFFER_BIT   BIT(7)
-
-#define KSZ_SNIFFER_MASK (BIT(5) | BIT(6) | BIT(7))
-
-static inline int ksz8863_sw_set_port_mirror(struct switch_dev *dev,
-					     const struct switch_attr *attr,
-					     struct switch_val *val)
-{
-	u8 v[3], gc3_v;
-	int ret, mirror = val->value.i;
-
-	/* enable tx/rx sniff */
-	if ((ret = ksz8863_nread(GlobalControl3, &gc3_v, 1)))
-		return ret;
-        if ((ret = ksz8863_nread(Port1Control1, &v[0], 1)))
-                return ret;
-        if ((ret = ksz8863_nread(Port2Control1, &v[1], 1)))
-                return ret;
-        if ((ret = ksz8863_nread(Port3Control1, &v[2], 1)))
-                return ret;
-
-	/* reset */
-	v[0] &= ~KSZ_SNIFFER_MASK;
-	v[1] &= ~KSZ_SNIFFER_MASK;
-	v[2] &= ~KSZ_SNIFFER_MASK;
-
-	/* X1 = 2, X2 = 1, so we twist it! */
-	switch (mirror) {
-	case 0:
-		gc3_v &= ~BIT(0); /* disable tx/rx sniff */
-		break;
-	case 1:
-		v[1] |= KSZ_SNIFF_RX_BIT | KSZ_SNIFF_TX_BIT;	/* Port2 (X1) is MIRROR (TX+RX-SNIFF) */
-		v[0] |= KSZ_SNIFFER_BIT;			/* Port1 (X2) is SNIFFER              */
-
-		v[2] |= KSZ_SNIFF_RX_BIT | KSZ_SNIFF_TX_BIT; /* Port3 (CPU) is always TX+RX-SNIFF */
-
-		gc3_v |= BIT(0); /* enable tx/rx sniff */
-		break;
-	case 2:
-		v[0] |= KSZ_SNIFF_RX_BIT | KSZ_SNIFF_TX_BIT;	/* Port1 (X2) is MIRROR (TX+RX-SNIFF) */
-		v[1] |= KSZ_SNIFFER_BIT;			/* Port2 (X1) is SNIFFER              */
-
-		v[2] |= KSZ_SNIFF_RX_BIT | KSZ_SNIFF_TX_BIT; /* Port3 (CPU) is always TX+RX-SNIFF */
-
-		gc3_v |= BIT(0); /* enable tx/rx sniff */
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	if ((ret = ksz8863_nwrite(GlobalControl3, &gc3_v, 1)))
-		return ret;
-	if ((ret = ksz8863_nwrite(Port1Control1, &v[0], 1)))
-		return ret;
-	if ((ret = ksz8863_nwrite(Port2Control1, &v[1], 1)))
-		return ret;
-	if ((ret = ksz8863_nwrite(Port3Control1, &v[2], 1)))
-		return ret;
-
-	if (mirror == 0)
-		pr_info("%s: turn-off port MIRRORING!\n", __func__);
-	else
-		pr_info("%s: X%d is MIRROR-Port (X%d is SNIFFER)\n", __func__, mirror, mirror == 1 ? 2 : 1);
-
-	return 0;
-}
-
-static inline int ksz8863_sw_get_port_mirror(struct switch_dev *dev,
-					     const struct switch_attr *attr,
-					     struct switch_val *val)
-{
-	u8 v[3];
-	int ret, mirror;
-
-	/* enable tx/rx sniff */
-        if ((ret = ksz8863_nread(Port1Control1, &v[0], 1)))
-                return ret;
-        if ((ret = ksz8863_nread(Port2Control1, &v[1], 1)))
-                return ret;
-        if ((ret = ksz8863_nread(Port3Control1, &v[2], 1)))
-                return ret;
-
-	if ((v[2] & BIT(7))) {
-		pr_err("%s: invalid: port 3 is not allowed to be mirror!\n", __func__);
-		return -1;
-	}
-
-	/* X1 = 2, X2 = 1, so we twist it! */
-	if ((v[0] & KSZ_SNIFFER_BIT) && !(v[1] & KSZ_SNIFFER_BIT))
-		mirror = 1;
-	else if ((v[1] & KSZ_SNIFFER_BIT) && !(v[0] & KSZ_SNIFFER_BIT))
-		mirror = 2;
-	else if (!(v[1] & KSZ_SNIFFER_BIT) && !(v[0] & KSZ_SNIFFER_BIT))
-		mirror = 0;
-	else
-		return -1;
-
-        val->value.i = mirror;
-
-	if (mirror)
-		pr_info("%s: mirror-port: X%d\n", __func__, mirror);
-	else
-		pr_info("%s: Port mirrorroring is OFF!\n", __func__);
-
-	return 0;
-}
-
-/* The common way to handle fast aging does not work correctly.
- *
- * [origin code snippet]
- * ksz8863_nread(GlobalControl1, &val, 1);
- * val |= BIT(1); for enabling
- * val &= BIT(1); for disabling
- * ksz8863_nwrite(GlobalControl1, &val, 1);
- *
- * This workaround disables learning on all ports
- * thus the dynamic table will not be built.
- */
-static inline int
-ksz8863_sw_set_fastaging(struct switch_dev *dev,
-			 const struct switch_attr *attr,
-			 struct switch_val *val)
-{
-	u8 reg;
-	int error = 1;
-	const int enable = val->value.i;
-
-	do { /* break the loop on error */
-		if (is_dsa_enabled()) {
-			pr_info("%s: ERROR: fastaging not featured in dsa mode\n",
-				__func__);
-			break;
-		}
-		if (enable) {
-			/* disable learning on all ports */
-			if ((ksz8863_nread(Port1Control2, &reg, 1)))
-				break;
-			reg |= 0x01;
-			if ((ksz8863_nwrite(Port1Control2, &reg, 1)))
-				break;
-			if ((ksz8863_nread(Port2Control2, &reg, 1)))
-				break;
-			reg |= 0x01;
-			if ((ksz8863_nwrite(Port2Control2, &reg, 1)))
-				break;
-			if ((ksz8863_nread(Port3Control2, &reg, 1)))
-				break;
-			reg |= 0x01;
-			if ((ksz8863_nwrite(Port3Control2, &reg, 1)))
-				break;
-			/* flush dynamic mac table */
-			if ((ksz8863_nread(GlobalControl0, &reg, 1)))
-				break;
-			reg |= 0x20;
-			if ((ksz8863_nwrite(GlobalControl0, &reg, 1)))
-				break;
-		} else {
-			/* enable learning on all ports */
-			if ((ksz8863_nread(Port1Control2, &reg, 1)))
-				break;
-			reg &= 0xfe;
-			if ((ksz8863_nwrite(Port1Control2, &reg, 1)))
-				break;
-			if ((ksz8863_nread(Port2Control2, &reg, 1)))
-				break;
-			reg &= 0xfe;
-			if ((ksz8863_nwrite(Port2Control2, &reg, 1)))
-				break;
-			if ((ksz8863_nread(Port3Control2, &reg, 1)))
-				break;
-			reg &= 0xfe;
-			if ((ksz8863_nwrite(Port3Control2, &reg, 1)))
-				break;
-		}
-		error = 0;
-	} while (false);
-
-	if (error)
-		pr_info("%s: ERROR: %s fast aging failed\n", __func__,
-			enable ? "enabling" : "disabling");
-	else
-		pr_info("%s: fast aging %s\n", __func__, enable ?
-			"enabled" : "disabled");
-
-	return error;
-}
-
-/* The common way to handle fast aging does not work correctly.
- * The workaround disables learning on all ports. The dedicated
- * fast aging register does not matter.
- *
- * [origin code snippet]
- * ksz8863_nread(GlobalControl1, &val, 1);
- * if (val & BIT(1))
- *		val->value.i = 1;	ENABLED
- *	else
- *		val->value.i = 0;	DISABLED
- */
-static inline int
-ksz8863_sw_get_fastaging(struct switch_dev *dev,
-			 const struct switch_attr *attr,
-			 struct switch_val *val)
-{
-	u8 reg[3];
-	int error = 1;
-
-	do { /* break the loop on error */
-		if (is_dsa_enabled())
-			val->value.i = 0; /* fast aging not enabled */
-		else {
-			/* check if learning is disable on all ports */
-			if ((ksz8863_nread(Port1Control2, &reg[0], 1)))
-				break;
-			if ((ksz8863_nread(Port2Control2, &reg[1], 1)))
-				break;
-			if ((ksz8863_nread(Port3Control2, &reg[2], 1)))
-				break;
-			if ((reg[0] & 0x1) && (reg[1] & 0x1) &&
-			    (reg[2] & 0x1)) {
-				val->value.i = 1;
-				pr_info("%s: fast aging enabled\n", __func__);
-			} else {
-				val->value.i = 0;
-				pr_info("%s: fast aging disabled\n", __func__);
-			}
-		}
-		error = 0;
-	} while (false);
-
-	if (error)
-		pr_info("%s: ERROR: reading fast aging setting failed\n",
-			__func__);
-	return error;
-}
-
-#ifdef CONFIG_NET_DSA_KSZ8863
-static inline int ksz8863_sw_set_dsa_enable(struct switch_dev *dev,
-					    const struct switch_attr *attr,
-					    struct switch_val *val)
-{
-	dsa_enable(!!val->value.i);
-
-	ksz8863_setup_dflt_cfg(DFLT_CFG_FLAGS);
-
-	return 0;
-}
-
-static inline int ksz8863_sw_get_dsa_enable(struct switch_dev *dev,
-					    const struct switch_attr *attr,
-					    struct switch_val *val)
-{
-        val->value.i = is_dsa_enabled();
-
-        return 0;
-}
-#endif
-
-static inline int ksz8863_sw_set_rem_tag(struct switch_dev *dev,
-                                         const struct switch_attr *attr,
-                                         struct switch_val *val)
-{
-        return setregbits(Port1Control0 + val->port_vlan * KSZ8863_PORTS_REGS_OFFSET,
-                          !!val->value.i, PC0_TAG_REMOVE_SHIFT, PC0_TAG_REMOVE_SHIFT);
-}
-
-static inline int ksz8863_sw_get_rem_tag(struct switch_dev *dev,
-                                         const struct switch_attr *attr,
-                                         struct switch_val *val)
-{
-        int ret;
-        u8 v;
-
-        if ((ret = getregbits(Port1Control0 + val->port_vlan * KSZ8863_PORTS_REGS_OFFSET,
-                              &v, PC0_TAG_REMOVE_SHIFT, PC0_TAG_REMOVE_SHIFT)))
-                return ret;
-        val->value.i = v;
-
-        return 0;
-}
-
-static inline int ksz8863_sw_set_force_tag(struct switch_dev *dev,
-                                           const struct switch_attr *attr,
-                                           struct switch_val *val)
-{
-        return setregbits(Port1Control1 + val->port_vlan * KSZ8863_PORTS_REGS_OFFSET,
-                          !!val->value.i, PC1_TAG_DOUBLE_SHIFT, PC1_TAG_DOUBLE_SHIFT);
-}
-
-static inline int ksz8863_sw_get_force_tag(struct switch_dev *dev,
-                                           const struct switch_attr *attr,
-                                           struct switch_val *val)
-{
-        int ret;
-        u8 v;
-
-        if ((ret = getregbits(Port1Control1 + val->port_vlan * KSZ8863_PORTS_REGS_OFFSET,
-                              &v, PC1_TAG_DOUBLE_SHIFT, PC1_TAG_DOUBLE_SHIFT)))
-                return ret;
-        val->value.i = v;
-
-        return 0;
-}
-
-static inline int ksz8863_sw_set_port_memb(struct switch_dev *dev,
-                                           const struct switch_attr *attr,
-                                           struct switch_val *val)
-{
-        return setregbits(Port1Control1 + val->port_vlan * KSZ8863_PORTS_REGS_OFFSET,
-                          val->value.i, 2, 0);
-}
-
-static inline int ksz8863_sw_get_port_memb(struct switch_dev *dev,
-                                           const struct switch_attr *attr,
-                                           struct switch_val *val)
-{
-        int ret;
-        u8 v;
-
-        if ((ret = getregbits(Port1Control1 + val->port_vlan * KSZ8863_PORTS_REGS_OFFSET,
-                              &v, 2, 0)))
-                return ret;
-        val->value.i = v;
-
-        return 0;
-}
-
-
-
-static inline int ksz8863_sw_set_eg_pvid(struct switch_dev *dev,
-                                         const struct switch_attr *attr,
-                                         struct switch_val *val)
-{
-        return setregbits(InsertSrcPvid, val->value.i, 5, 0);
-}
-
-static int ksz8863_sw_get_eg_pvid(struct switch_dev *dev,
-                                  const struct switch_attr *attr,
-                                  struct switch_val *val)
-{
-        int ret;
-        u8 v;
-
-        if ((ret = getregbits(InsertSrcPvid, &v, 5, 0)))
-                return ret;
-
-        val->value.i = v;
-
-        return 0;
-}
-
-struct dflt_tag {
-        unsigned vid_11_8:4;
-        unsigned cfi:1;
-        unsigned prio:3;
-        unsigned vid_7_0:8;
-} __attribute__((packed));
-
-static int ksz8863_sw_set_dflt_tag(struct switch_dev *dev,
-                                   const struct switch_attr *attr,
-                                   struct switch_val *val)
-{
-        struct dflt_tag tag;
-        int vid, cfi, prio;
-
-        if (sscanf(val->value.s, "%d,%d,%d",
-                   &vid,
-                   &cfi,
-                   &prio) != 3)
-                return -EINVAL;
-
-        tag.vid_11_8 = (vid >> 8) & MASK(4, 0);
-        tag.cfi = cfi;
-        tag.prio = prio;
-        tag.vid_7_0 = vid & MASK(8, 0);
-
-        return ksz8863_nwrite(Port1Control3 + val->port_vlan * KSZ8863_PORTS_REGS_OFFSET,
-                              (u8 *)&tag, sizeof(struct dflt_tag));
-}
-
-static int ksz8863_sw_get_dflt_tag(struct switch_dev *dev,
-                                   const struct switch_attr *attr,
-                                   struct switch_val *val)
-{
-        struct dflt_tag tag;
-        int ret;
-
-        if ((ret = ksz8863_nread(Port1Control3 + val->port_vlan * KSZ8863_PORTS_REGS_OFFSET,
-                                 (u8 *)&tag, sizeof(struct dflt_tag))))
-                return ret;
-
-        val->len = snprintf(__buf, sizeof(__buf), "%d,%d,%d",
-                            (tag.vid_11_8 << 8) | tag.vid_7_0,
-                            tag.cfi,
-                            tag.prio);
-        val->value.s = __buf;
-
-        return 0;
-}
-
-
-static inline int ksz8863_sw_reset(struct switch_dev *dev)
-{
-        return ksz8863_soft_reset();
-}
-
-static int ksz8863_sw_setup_dflt_cfg(struct switch_dev *dev,
-                                     const struct switch_attr *attr,
-                                     struct switch_val *val)
-{
-        return ksz8863_setup_dflt_cfg(DFLT_CFG_FLAGS);
-}
-
-
-static struct switch_attr ksz8863_global_attrs[] = {
-        {
-                .type = SWITCH_TYPE_NOVAL,
-                .name = "setup_dflt",
-                .description = "Setup default config",
-                .set = ksz8863_sw_setup_dflt_cfg,
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "sel_reg",
-                .description = "Select register for rw operation",
-                .set = ksz8863_sw_set_sel_reg,
-                .get = ksz8863_sw_get_sel_reg,
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "reg",
-                .description = "Read/Write selected register",
-                .set = ksz8863_sw_set_reg,
-                .get = ksz8863_sw_get_reg,
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "vlan_enable",
-                .description = "Enable VLAN mode",
-                .set = ksz8863_sw_set_vlan_enable,
-                .get = ksz8863_sw_get_vlan_enable,
-        }, {
-                .type = SWITCH_TYPE_STRING,
-                .name = "dynmacs",
-                .description = "Dynamic MAC address table - \'mac, port, fid, aging\'",
-                .get = ksz8863_sw_get_dynmacs,
-        }, {
-                .type = SWITCH_TYPE_STRING,
-                .name = "statmacs",
-                .description = "Static MAC address table"
-		" - read: \'mac, forward ports, fid, override\'"
-		" - write: \'idx,mac,forward ports,valid,override,use_fid,fid\'",
-		.set = ksz8863_sw_set_staticmacs,
-                .get = ksz8863_sw_get_staticmacs,
-        }, {
-                // TODO mv in port attrs
-                .type = SWITCH_TYPE_INT,
-                .name = "eports_pvid",
-                .description = "Ports whose src PVID will be inserted at egress ports - 6 bits - TODO -",
-                .set = ksz8863_sw_set_eg_pvid,
-                .get = ksz8863_sw_get_eg_pvid,
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "tail_tag",
-                .description = "Enables or Disables Tail Tag Mode",
-                .set = ksz8863_sw_set_tail_tag,
-                .get = ksz8863_sw_get_tail_tag,
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "bcast_protect",
-                .description = "Sets the broadcast storm protection rate limit (0..20%) for Port 1 & 2. '0' will disable protection",
-                .set = ksz8863_sw_set_bcast_protect,
-                .get = ksz8863_sw_get_bcast_protect,
-        }, {
-                .type = SWITCH_TYPE_STRING,
-                .name = "rate_limit",
-                .description = "Enables Rate Limiting on Egress Port3 (CPU-Ingress), format='50.mbps'/'64.kbps'. 'off' will disable rate limiting",
-                .set = ksz8863_sw_set_ratelimit,
-                .get = ksz8863_sw_get_ratelimit,
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "port_mirror",
-                .description = "Enables the mirror port  (1=X1, 2=X2, 0=off)",
-                .set = ksz8863_sw_set_port_mirror,
-                .get = ksz8863_sw_get_port_mirror,
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "fast_aging",
-                .description = "Enables:1/Disables:0 Fast Aging.",
-                .set = ksz8863_sw_set_fastaging,
-                .get = ksz8863_sw_get_fastaging,
-#ifdef CONFIG_NET_DSA_KSZ8863
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "dsa_enable",
-                .description = "Enables or Disables DSA Network-Path",
-                .set = ksz8863_sw_set_dsa_enable,
-                .get = ksz8863_sw_get_dsa_enable,
-#endif
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "sel_port",
-                .description = "Select port for statistics",
-                .set = ksz8863_sw_set_sel_port,
-                .get = ksz8863_sw_get_sel_port,
-        }, {
-                .type = SWITCH_TYPE_STRING,
-                .name = "stats",
-                .description = "Get Switch statistics (*: marks counter overflow bit)",
-                .get = ksz8863_sw_get_statistics,
-        },
-};
-
-static struct switch_attr ksz8863_port_attrs[] = {
-        {
-                .type = SWITCH_TYPE_INT,
-                .name = "ins_tag",
-                .description = "Insert tag",
-                .set = ksz8863_sw_set_ins_tag,
-                .get = ksz8863_sw_get_ins_tag,
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "rem_tag",
-                .description = "Remove tag",
-                .set = ksz8863_sw_set_rem_tag,
-                .get = ksz8863_sw_get_rem_tag,
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "force_tag",
-                .description = "All packets will be tagged with port default tag of ingress port",
-                .set = ksz8863_sw_set_force_tag,
-                .get = ksz8863_sw_get_force_tag,
-        }, {
-                .type = SWITCH_TYPE_STRING,
-                .name = "default_tag",
-                .description = "Default tag for insertion - \'vid[12],cfi[1],prio[3]\'",
-                .set = ksz8863_sw_set_dflt_tag,
-                .get = ksz8863_sw_get_dflt_tag,
-        }, {
-                .type = SWITCH_TYPE_INT,
-                .name = "port_memb",
-                .description = "The port can only communicate within the membership "
-                        "- \'port3_en[1]port2_en[1]port1_en[1]\'",
-                .set = ksz8863_sw_set_port_memb,
-                .get = ksz8863_sw_get_port_memb,
-        },
-};
-
-static struct switch_attr ksz8863_vlan_attrs[] = {
-        {
-                .type = SWITCH_TYPE_STRING,
-                .name = "vlan_table",
-                .description = "VLAN table entry - \'vid[12],fid[4],membership[3],valid[1]\'",
-                .set = ksz8863_sw_set_vlan_table,
-                .get = ksz8863_sw_get_vlan_table,
-        },
- };
-
-struct switch_dev_ops ksz8863_switch_dev_ops = {
-	.attr_global = {
-		.attr = ksz8863_global_attrs,
-	        .n_attr = ARRAY_SIZE(ksz8863_global_attrs),
-	},
-        .attr_port = {
-                .attr = ksz8863_port_attrs,
-                .n_attr = ARRAY_SIZE(ksz8863_port_attrs),
-        },
-        .attr_vlan = {
-                .attr = ksz8863_vlan_attrs,
-                .n_attr = ARRAY_SIZE(ksz8863_vlan_attrs),
-        },
-        .reset_switch = ksz8863_sw_reset,
-};
-
-static struct switch_dev *ksz8863_of_get_swdev(struct device *dev)
-{
-	struct switch_dev *swdev;
-	struct device_node *np = dev->of_node;
-	struct device_node *mdio_node;
-	int ret;
-
-	swdev = devm_kzalloc(dev, sizeof(*swdev), GFP_KERNEL);
-	if (!swdev)
-		return ERR_PTR(-ENOMEM);
-
-	if (np) {
-		swdev->name = np->name;
-
-		if (of_property_read_string(np, "swcfg,alias", &swdev->alias)) {
-			dev_err(dev, "No switch alias given\n");
-			ret = -EINVAL;
-			goto out_err_free;
-		}
-
-		if (of_property_read_u32(np, "swcfg,cpu_port", &swdev->cpu_port)) {
-			dev_err(dev, "No cpu port given\n");
-			ret = -EINVAL;
-			goto out_err_free;
-		}
-
-		if (of_property_read_u32(np, "swcfg,ports", &swdev->ports)) {
-			dev_err(dev, "No ports given\n");
-			ret = -EINVAL;
-			goto out_err_free;
-		}
-
-		if (of_property_read_u32(np, "swcfg,vlans", &swdev->vlans)) {
-			dev_err(dev, "No vlans given\n");
-			ret = -EINVAL;
-			goto out_err_free;
-		}
-
-		/* get mdio node */
-		mdio_node = of_parse_phandle(np, "swcfg,mii-bus", 0);
-		if (!mdio_node) {
-			dev_err(dev, "can't find node 'swcfg,mii-bus'\n");
-			ret = -ENODEV;
-			goto out_err_free;
-		}
-
-		swdev->mii_bus = of_mdio_find_bus(mdio_node);
-		if (!swdev->mii_bus) {
-			dev_err(dev, "can't find mii bus device\n");
-			ret = -EPROBE_DEFER;
-			goto out_err_free;
-		}
-
-		dev_info(dev, "mii_bus: found and using '%s'\n", swdev->mii_bus->name);
-
-		swdev->of_node = np;
-		swdev->ops = &ksz8863_switch_dev_ops;
-	}
-
-	return swdev;
-
-out_err_free:
-
-	devm_kfree(dev, swdev);
-	return ERR_PTR(ret);
-}
-
-
-static int ksz8863_cfg_probe(struct platform_device *pdev)
-{
-	struct switch_dev *swdev;
-	struct device_node *of_ethernet;
-	struct device_node *of_aliases;
-	const char *of_prop_name;
-	static const char *mac_addr;
-	int err;
-
-	if (!ksz8863_fns || !ksz8863_fns->nread)
-		return -EPROBE_DEFER;
-
-	if (pdev->dev.of_node) {
-		swdev = ksz8863_of_get_swdev(&pdev->dev);
-		if (IS_ERR(swdev))
-			return PTR_ERR(swdev);
-
-		dev_info(&pdev->dev, "SWCFG: switch device '%s'\n", swdev->name);
-	}
-
-	err = register_switch(swdev, NULL);
-        if (err) {
-                printk(KERN_ERR "%s: switch registration failed\n", __func__);
-		goto out;
-        }
-
-	pdev->dev.platform_data = swdev;
-
-        ksz8863_fns->setup_dflt_cfg = ksz8863_setup_dflt_cfg;
-	ksz8863_fns->set_host_mac = ksz8863_set_host_mac;
-
-	/* get mac address from oftree */
-	of_aliases = of_find_node_by_path("/aliases");
-	if (!of_property_read_string(of_aliases, "ethernet0", &of_prop_name)) {
-		of_ethernet = of_find_node_by_path(of_prop_name);
-		mac_addr = of_get_mac_address(of_ethernet);
-		if (mac_addr) {
-			/* copy mac address from oftree to hw variable */
-			memcpy(host_mac, mac_addr, sizeof(host_mac));
-		}
-	}
-
-	dev_info(&pdev->dev, "SWCONFIG: %s Driver probed\n", pdev->name);
-
-out:
-        return err;
-}
-
-static int ksz8863_cfg_remove(struct platform_device *pdev)
-{
-	struct switch_dev *swdev = pdev->dev.platform_data;
-        unregister_switch(swdev);
-	return 0;
-}
-
-static const struct of_device_id ksz8863_of_match[] = {
-	{ .compatible = "swcfg,ksz8863" },
-	{ /* sentinel */ },
-};
-MODULE_DEVICE_TABLE(of, ksz8863_of_match);
-
-static struct platform_driver ksz8863_driver = {
-	.probe  = ksz8863_cfg_probe,
-	.remove = ksz8863_cfg_remove,
-	.driver = {
-		.name   = "ksz8863-cfg",
-		.owner  = THIS_MODULE,
-		.of_match_table = ksz8863_of_match,
-	},
-};
-module_platform_driver(ksz8863_driver);
-
-MODULE_AUTHOR("karl.beldan@sagemcom.com>");
-MODULE_LICENSE("GPL");
-- 
2.7.4

