From a560d9c9d8ac37f7e78ef5f08b2d7549edc8a30a Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Fri, 27 Jul 2018 12:02:33 +0200
Subject: [PATCH] swconfig: mv88e6321: disable EEE

MV88E6321 internal phys on port 3 and 4 are capable to use EEE
(Energy Efficient Ethernet). If two of this phys connected to
each other and EEE is enabled they negotiate to use EEE. However,
if cut through is enabled too, some frames get broken. This patch
deactivate EEE for internal phys on port 3 and 4.

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/phy/mv88e6321-cfg.c | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/drivers/net/phy/mv88e6321-cfg.c b/drivers/net/phy/mv88e6321-cfg.c
index 175d43b..91937de 100644
--- a/drivers/net/phy/mv88e6321-cfg.c
+++ b/drivers/net/phy/mv88e6321-cfg.c
@@ -368,6 +368,35 @@ static int mv88e6321_sw_force_speed_internal_phys(struct switch_dev *dev,
 	if (ret < 0)
 		goto out;
 
+	/* Disable EEE */
+	ret = global_chip->info->ops->phy_write(global_chip, int_phy_addr, 13,
+						0x0007);
+	if (ret) {
+		pr_err("XMDIO Write PHY (%d) dev: 7 (%d)\n",
+		       int_phy_addr, ret);
+	}
+
+	ret = global_chip->info->ops->phy_write(global_chip, int_phy_addr, 14,
+						60);
+	if (ret) {
+		pr_err("XMDIO Write PHY (%d) dev: 7 reg: 60 (%d)\n",
+		       int_phy_addr, ret);
+	}
+
+	ret = global_chip->info->ops->phy_write(global_chip, int_phy_addr, 13,
+						0x4007);
+	if (ret) {
+		pr_err("XMDIO Write PHY (%d) dev: 7 reg: 60 op=data, no post increment (%d)\n",
+		       int_phy_addr, ret);
+	}
+
+	ret = global_chip->info->ops->phy_write(global_chip, int_phy_addr, 14,
+						0x0000);
+	if (ret) {
+		pr_err("XMDIO Write PHY (%d) dev: 7 reg: 60 val: 0 (%d)\n",
+		       int_phy_addr, ret);
+	}
+
 	/* 3.     PHY Register 0x00 bit[9] = 1 Restart Auto Negotiation */
 	ret = global_chip->info->ops->phy_read(global_chip, int_phy_addr, 0,
 					&reg_val);
@@ -389,6 +418,7 @@ static int mv88e6321_sw_force_speed_internal_phys(struct switch_dev *dev,
 	reg_val &= ~BIT(11);
 	ret = global_chip->info->ops->phy_write(global_chip, int_phy_addr, 0,
 					reg_val);
+
 out:
 	mutex_unlock(&global_chip->reg_lock);
 
-- 
2.7.4

