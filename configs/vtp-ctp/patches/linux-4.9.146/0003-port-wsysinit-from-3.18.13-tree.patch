From 237cc611a109c0d4858ab3b0bb2742375d6d02df Mon Sep 17 00:00:00 2001
From: Heinrich Toews <heinrich.toews@wago.com>
Date: Thu, 17 Nov 2016 07:03:42 +0000
Subject: [PATCH] port wsysinit from 3.18.13 tree

---
 arch/arm/mach-omap2/Kconfig               |   5 +
 arch/arm/mach-omap2/Makefile              |   1 +
 arch/arm/mach-omap2/wsysinit-boot-table.c |  65 +++++
 arch/arm/mach-omap2/wsysinit-testenv.c    | 198 +++++++++++++++
 arch/arm/mach-omap2/wsysinit.c            | 408 ++++++++++++++++++++++++++++++
 include/linux/wsysinit-boot-table.h       |  27 ++
 include/linux/wsysinit-devconf.h          |  35 +++
 include/linux/wsysinit-prio.h             |  16 ++
 include/linux/wsysinit-prodcution.h       |  43 ++++
 9 files changed, 798 insertions(+)
 create mode 100644 arch/arm/mach-omap2/wsysinit-boot-table.c
 create mode 100644 arch/arm/mach-omap2/wsysinit-testenv.c
 create mode 100644 arch/arm/mach-omap2/wsysinit.c
 create mode 100644 include/linux/wsysinit-boot-table.h
 create mode 100644 include/linux/wsysinit-devconf.h
 create mode 100644 include/linux/wsysinit-prio.h
 create mode 100644 include/linux/wsysinit-prodcution.h

diff --git a/arch/arm/mach-omap2/Kconfig b/arch/arm/mach-omap2/Kconfig
index 0465338..834f552 100644
--- a/arch/arm/mach-omap2/Kconfig
+++ b/arch/arm/mach-omap2/Kconfig
@@ -108,6 +108,11 @@ config ARCH_OMAP2PLUS
 	help
 	  Systems based on OMAP2, OMAP3, OMAP4 or OMAP5
 
+config WAGO_SYSTEM_BASED_STARTUP
+       bool "Wago System based startup code"
+       help
+         Enable Wago System based startup code
+
 config OMAP_INTERCONNECT_BARRIER
 	bool
 	select ARM_HEAVY_MB
diff --git a/arch/arm/mach-omap2/Makefile b/arch/arm/mach-omap2/Makefile
index e37ceb8..8c7edaf 100644
--- a/arch/arm/mach-omap2/Makefile
+++ b/arch/arm/mach-omap2/Makefile
@@ -258,3 +258,4 @@ smsc911x-$(CONFIG_SMSC911X)		:= gpmc-smsc911x.o
 obj-y					+= $(smsc911x-m) $(smsc911x-y)
 
 obj-y					+= common-board-devices.o twl-common.o dss-common.o
+obj-$(CONFIG_WAGO_SYSTEM_BASED_STARTUP)  += wsysinit.o wsysinit-boot-table.o wsysinit-testenv.o
diff --git a/arch/arm/mach-omap2/wsysinit-boot-table.c b/arch/arm/mach-omap2/wsysinit-boot-table.c
new file mode 100644
index 0000000..96e0eab
--- /dev/null
+++ b/arch/arm/mach-omap2/wsysinit-boot-table.c
@@ -0,0 +1,65 @@
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/bug.h>
+#include <linux/kernel.h>
+#include <linux/wsysinit-boot-table.h>
+
+/*
+ * boot_id calculation
+ * -------------------
+ * The boot_id is an 8-bit value consisting of
+ * a device_id and a boot_mode_id:
+ *
+ * boot_id:  [ 7 6 | 5 4 3 2 1 0 ]
+ *              |         |
+ *         device_id   boot_mode_id
+ *
+ * device_id:  0: -          boot_mode_id:  [ 5 4 3 2 1 0 ]
+ *             1: nand                        x | | | | |
+ *             2: mmc                           | | | | develop mode enable bit
+ *             3: -                             | | | uart enable bit
+ *                                              | | recover mode enable bit
+ *                                              | update
+ *                                              overwrite mode
+ */
+struct boot_table_entry wsysinit_boot_table[] = {
+	WSYSINIT_BOOT_TABLE_ENTRY(0x40, "nand-default-0-0"    , NULL, NULL, NULL), /*       0b01.000000 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x41, "nand-default-0-1"    , NULL, NULL, NULL), /*       0b01.000001 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x42, "nand-default-1-0"    , NULL, NULL, NULL), /*       0b01.000010 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x43, "nand-default-1-1"    , NULL, NULL, NULL), /*       0b01.000011 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x44, "nand-recover-0-0"    , NULL, NULL, NULL), /*       0b01.000100 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x45, "nand-recover-0-1"    , NULL, NULL, NULL), /*       0b01.000101 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x46, "nand-recover-1-0"    , NULL, NULL, NULL), /*       0b01.000110 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x47, "nand-recover-1-1"    , NULL, NULL, NULL), /*       0b01.000111 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x48, "nand-default-0-0-upd", NULL, NULL, NULL), /*       0b01.001000 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x49, "nand-default-0-1-upd", NULL, NULL, NULL), /*       0b01.001001 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x4a, "nand-default-1-0-upd", NULL, NULL, NULL), /*       0b01.001010 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x4b, "nand-default-1-1-upd", NULL, NULL, NULL), /*       0b01.001011 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x4c, "nand-recover-0-0-upd", NULL, NULL, NULL), /*       0b01.001100 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x4d, "nand-recover-0-1-upd", NULL, NULL, NULL), /*       0b01.001101 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x4e, "nand-recover-1-0-upd", NULL, NULL, NULL), /*       0b01.001110 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x4f, "nand-recover-1-1-upd", NULL, NULL, NULL), /*       0b01.001111 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x50, "nand-overwrite"      , NULL, NULL, NULL), /*       0b01.010000 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x80, "mmc-default-0-0"     , NULL, NULL, NULL), /*       0b10.000000 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x81, "mmc-default-0-1"     , NULL, NULL, NULL), /*       0b10.000001 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x82, "mmc-default-1-0"     , NULL, NULL, NULL), /*       0b10.000010 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x83, "mmc-default-1-1"     , NULL, NULL, NULL), /*       0b10.000011 */
+	WSYSINIT_BOOT_TABLE_ENTRY(0x90, "mmc-overwrite"       , NULL, NULL, NULL), /*       0b10.010000 */
+};
+
+/* Boot Table */
+struct boot_table_entry *wsysinit_boot_table_lookup(unsigned char boot_id)
+{
+	struct boot_table_entry *entry = NULL;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(wsysinit_boot_table); i++) {
+		if (boot_id == wsysinit_boot_table[i].id) {
+			entry = &wsysinit_boot_table[i];
+			break;
+		}
+	}
+
+	return entry;
+}
+EXPORT_SYMBOL(wsysinit_boot_table_lookup);
diff --git a/arch/arm/mach-omap2/wsysinit-testenv.c b/arch/arm/mach-omap2/wsysinit-testenv.c
new file mode 100644
index 0000000..ee27743
--- /dev/null
+++ b/arch/arm/mach-omap2/wsysinit-testenv.c
@@ -0,0 +1,198 @@
+/*
+ * wsysinit module to make device-tree test-environment descriptions
+ * available in the sys-fs
+ *
+ * Copyright (C) 2015 WAGO Automation
+ *
+ * Author: Oleg Karfich
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/of_platform.h>
+#include <linux/of_gpio.h>
+#include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/err.h>
+
+#define DEVICE_NAME	"wsysinit-testenv-drv"
+#define DRIVER_NAME	"wago,testenv"
+
+// reference to our "struct platform_device"
+static struct platform_device *wsysinit_testenv_pdev;
+
+// sys-fs
+extern struct class *wsysinit_sysfs_class;
+static struct device *wsysinit_testenv_device;
+static dev_t wsysinit_testenv_dev;
+
+// list specific
+struct device_attr_table {
+	struct list_head list;
+	struct device_attribute device_attr;
+};
+static LIST_HEAD(device_attr_list);
+
+static const struct of_device_id of_wsysinit_testenv_match[] = {
+	{ .compatible = DRIVER_NAME },
+	{ },
+};
+
+ssize_t show_generic(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct device_node *np, *nchild;
+	struct property *properties, *next;
+	int len = 0;
+
+	/*
+	 * we need to iterate over all instances of 'wago,testenv'
+	 * to return values
+	 */
+	for_each_matching_node(np, of_wsysinit_testenv_match)
+	{
+		for_each_child_of_node(np, nchild)
+		{
+			if(strcmp(nchild->name, attr->attr.name) != 0)
+				continue;
+
+			properties = nchild->properties;
+			while(properties)
+			{
+				next = properties->next;
+
+				if((strcmp(properties->value, nchild->name) != 0) && (strcmp(properties->name, "compatible") != 0))
+					len += scnprintf(buf + len, PAGE_SIZE, "%s=%s\n", properties->name, (char*)properties->value);
+
+				properties = next;
+			}
+			break;
+		}
+	}
+	return len;
+}
+
+static void wsysinit_testenv_clean_list(void)
+{
+	struct device_attr_table *device_attr;
+	struct list_head *pos, *q;
+
+	list_for_each_safe(pos, q, &device_attr_list)
+	{
+		device_attr = list_entry(pos, struct device_attr_table, list);
+
+		device_remove_file(wsysinit_testenv_device, &device_attr->device_attr);
+		list_del(pos);
+		kfree(device_attr);
+	}
+}
+
+static int wsysinit_testenv_sysfs_init(void)
+{
+	int ret;
+	struct device_node *np, *nchild;
+	struct device_attr_table *dev_attribute_table;
+
+	// use existing wago class from ../mach-omap2/wsysinit.c + 155
+	if(!wsysinit_sysfs_class)
+	{
+		pr_err("%s : %d : WAGO sys-class not available, defer probing..\n",__func__, __LINE__);
+		ret = -EPROBE_DEFER;
+		goto out;
+	}
+
+	np = wsysinit_testenv_pdev->dev.of_node;
+	wsysinit_testenv_device = device_create(wsysinit_sysfs_class, NULL, wsysinit_testenv_dev, NULL,  np->name);
+	if(IS_ERR(wsysinit_testenv_device))
+	{
+		pr_err("%s : %d : device_create(): err=%li\n",__func__, __LINE__, PTR_ERR(wsysinit_testenv_device));
+		ret = ((-1) * PTR_ERR(wsysinit_testenv_device));
+		goto out;
+	}
+
+	for_each_child_of_node(np, nchild)
+	{
+		dev_attribute_table = kzalloc(sizeof(*dev_attribute_table), GFP_KERNEL);
+		if(!dev_attribute_table)
+		{
+			ret = -ENOMEM;
+			goto out_clean;
+		}
+
+		dev_attribute_table->device_attr.attr.name = nchild->name;
+		dev_attribute_table->device_attr.attr.mode = S_IRUGO;
+		dev_attribute_table->device_attr.show = show_generic;
+
+		ret = device_create_file(wsysinit_testenv_device, &dev_attribute_table->device_attr);
+		if(ret)
+		{
+			pr_err("%s : %d : device_create(): ret=%d\n",__func__, __LINE__, ret);
+			ret *= (-1);
+			kfree(dev_attribute_table);
+			goto out_clean;
+		}
+
+		list_add_tail(&dev_attribute_table->list, &device_attr_list);
+	}
+
+	return 0;
+
+out_clean:
+	device_unregister(wsysinit_testenv_device);
+	wsysinit_testenv_clean_list();
+	goto out;
+
+out:
+	return ret;
+}
+
+static void wsysinit_testenv_sysfs_exit(void)
+{
+	wsysinit_testenv_clean_list();
+	device_unregister(wsysinit_testenv_device);
+}
+
+static int wsysinit_testenv_probe(struct platform_device *pdev)
+{
+	wsysinit_testenv_pdev = pdev;
+
+	return wsysinit_testenv_sysfs_init();
+}
+
+static int wsysinit_testenv_remove(struct platform_device *pdev)
+{
+	wsysinit_testenv_sysfs_exit();
+
+	return 0;
+}
+
+static struct platform_driver wsysinit_testenv_driver = {
+	.probe		= wsysinit_testenv_probe,
+	.remove		= wsysinit_testenv_remove,
+	.driver		= {
+		.name	= DEVICE_NAME,
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(of_wsysinit_testenv_match),
+	},
+};
+
+static int __init wsysinit_testenv_init(void)
+{
+	return platform_driver_register(&wsysinit_testenv_driver);
+}
+
+static void __exit wsysinit_testenv_exit(void)
+{
+	platform_driver_unregister(&wsysinit_testenv_driver);
+}
+
+module_init(wsysinit_testenv_init);
+module_exit(wsysinit_testenv_exit);
+
+MODULE_DEVICE_TABLE(of, of_wsysinit_testenv_match);
+MODULE_DESCRIPTION("WAGO driver to get test property from device-tree");
+MODULE_LICENSE("GPL");
diff --git a/arch/arm/mach-omap2/wsysinit.c b/arch/arm/mach-omap2/wsysinit.c
new file mode 100644
index 0000000..c630fc1
--- /dev/null
+++ b/arch/arm/mach-omap2/wsysinit.c
@@ -0,0 +1,408 @@
+/*
+ * Wago System Init Functions
+ *
+ * Copyright (C) 2014 WAGO Automation
+ *
+ * Author: Heinrich Toews
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#undef DEBUG
+
+#include <linux/irq.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/err.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/kobject.h>
+#include <linux/fs.h>
+
+#include <asm/mach-types.h>
+
+#include <linux/delay.h>
+#include <linux/wsysinit-devconf.h>
+#include <linux/wsysinit-prodcution.h>
+#include <linux/wsysinit-boot-table.h>
+
+#ifdef CONFIG_IRQ_PRIORITY_TABLE
+#include <linux/wsysinit-prio.h>
+#endif
+
+#include <generated/utsrelease.h>
+
+#include <linux/timex.h>
+
+#include "soc.h"
+
+#define	DEVICE_NAME		"wsysinit-drv"
+
+struct wsysinit_settings {
+	bool wsysinit_init_sysfs;
+	bool dp_reset;
+	int dp_gpio_rst;
+	bool dp_alow;
+	const char *nand_eccmode;
+	const char *tty_service;
+	const char *tty_rs232_485;
+	int drvvbus_gpio;
+	const char *board_variant;
+	u32 adjtimex_tick;
+	u32 adjtimex_frequency;
+};
+
+static struct wsysinit_settings wsysinitset = { 0,};
+
+#ifdef CONFIG_OF
+static struct of_device_id wsysinit_dt_ids[] = {
+	{ .compatible = "wago,sysinit" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, wsysinit_dt_ids);
+
+static int dp_trig_reset(struct wsysinit_settings *ps)
+{
+	/* check if value is valid */
+	if (ps == NULL || !gpio_is_valid(ps->dp_gpio_rst))
+		return -EINVAL;
+
+	gpiod_set_value(gpio_to_desc(ps->dp_gpio_rst), 1);
+	mdelay(100);
+	gpiod_set_value(gpio_to_desc(ps->dp_gpio_rst), 0);
+
+	pr_info("DPx resetted (pin is active %s)!\n", ps->dp_alow ? "low" : "high");
+
+	return 0;
+}
+
+static ssize_t dp_sysfs_trig_reset(struct device *dev,
+				   struct device_attribute *attr,
+				   const char *buf,
+				   size_t count)
+{
+	u32 val = simple_strtoul(buf, NULL, 10);
+
+	/* check if value is valid */
+	if (val != 1)
+		return -EINVAL;
+
+	dp_trig_reset(&wsysinitset);
+
+	return count;
+}
+
+static int wsysinit_init_probe_dt(struct platform_device *pdev)
+{
+	int ret;
+	struct device_node *np = pdev->dev.of_node;
+	enum of_gpio_flags flags;
+	struct timex tmx = {0,};
+
+	pr_debug("WSYSINIT StartUp: probing device tree\n");
+
+	wsysinitset.wsysinit_init_sysfs = of_property_read_bool(np, "add-sysfs-entries");
+
+	wsysinitset.dp_reset = of_property_read_bool(np, "dp,reset");
+	wsysinitset.dp_gpio_rst = of_get_named_gpio_flags(np, "dp,gpio-rst", 0, &flags);
+	if (wsysinitset.dp_gpio_rst == -EPROBE_DEFER)
+		return -EPROBE_DEFER;
+
+	if (wsysinitset.dp_gpio_rst >= 0) {
+		int rqflags = 0;
+
+		wsysinitset.dp_alow = (flags & OF_GPIO_ACTIVE_LOW) ? 1 : 0;
+
+		if (wsysinitset.dp_alow) /* FLAG_ACTIVE_LOW ?? */
+			rqflags |= GPIOF_ACTIVE_LOW | GPIOF_OUT_INIT_LOW;
+		else
+			rqflags |= GPIOF_OUT_INIT_HIGH;
+
+		ret = devm_gpio_request_one(&pdev->dev, wsysinitset.dp_gpio_rst,
+					    rqflags | GPIOF_EXPORT_DIR_FIXED, /*   */
+					    "Profibus Reset Pin");
+		if (ret < 0) {
+			dev_err(&pdev->dev, "failed to claim DP reset pin\n");
+			return ret;
+		}
+
+		if (wsysinitset.dp_reset)
+			dp_trig_reset(&wsysinitset);
+
+		/* devm_gpio_free(&pdev->dev, wsysinitset.dp_gpio_rst); */
+	} else if (wsysinitset.dp_reset) {
+		dev_err(&pdev->dev, "failed to find DP gpio reset signal!\n");
+		return -1;
+	}
+
+	if (of_property_read_string(np, "nand,eccmode", &wsysinitset.nand_eccmode))
+		wsysinitset.nand_eccmode = NULL;
+
+	if (of_property_read_string(np, "tty,service", &wsysinitset.tty_service))
+		wsysinitset.tty_service = NULL;
+
+	if (of_property_read_string(np, "tty,rs232-485", &wsysinitset.tty_rs232_485))
+		wsysinitset.tty_rs232_485 = NULL;
+
+	wsysinitset.drvvbus_gpio = of_get_named_gpio(np, "musb,drvvbus-gpio", 0);
+
+	if (wsysinitset.drvvbus_gpio >= 0) {
+		ret = devm_gpio_request_one(&pdev->dev, wsysinitset.drvvbus_gpio,
+					    GPIOF_OUT_INIT_HIGH | GPIOF_EXPORT_DIR_FIXED,
+					    "DRVVBUS GPIO");
+		if (ret < 0) {
+			dev_err(&pdev->dev, "failed to claim DRVVBUS reset pin\n");
+			return ret;
+		}
+
+		dev_info(&pdev->dev, "DRVBUS enabled (GPIO %d).\n", wsysinitset.drvvbus_gpio);
+	} else {
+		dev_info(&pdev->dev, "DRVBUS not touched (GPIO %d).\n", wsysinitset.drvvbus_gpio);
+	}
+
+	if (of_property_read_string(np, "board,variant", &wsysinitset.board_variant))
+		wsysinitset.board_variant = NULL;
+
+	if (!of_property_read_u32(np, "adjtimex,tick", &wsysinitset.adjtimex_tick)) {
+		tmx.modes |= ADJ_TICK;
+		tmx.tick = (__kernel_long_t) wsysinitset.adjtimex_tick;
+	}
+
+	if (!of_property_read_u32(np, "adjtimex,frequency", &wsysinitset.adjtimex_frequency)) {
+		tmx.modes |= ADJ_FREQUENCY;
+		tmx.freq = (__kernel_long_t) wsysinitset.adjtimex_frequency;
+	}
+
+	if (tmx.modes) {
+		do_adjtimex(&tmx);
+
+		pr_debug("%s: adjtimex: tick %u, frequency %u\n", __func__,
+			 wsysinitset.adjtimex_tick, wsysinitset.adjtimex_frequency);
+	}
+
+	return 0;
+}
+#else
+static int wsysinit_init_probe_dt(struct platform_device *pdev)
+{
+	return 0;
+}
+#endif
+
+/* WSYSINIT Specific Kernel Parameters */
+
+int __wsysinit_boot_id = 0x2;
+core_param(pxc_boot_id, __wsysinit_boot_id, int, 0000);
+EXPORT_SYMBOL(__wsysinit_boot_id);
+
+int __wsysinit_devconf = WSYSINIT_DEVCONF_FULL;
+core_param(devconf, __wsysinit_devconf, int, 0000);
+EXPORT_SYMBOL(__wsysinit_devconf);
+
+char *__wsysinit_bootversion = NULL;
+core_param(bootversion, __wsysinit_bootversion, charp, 0);
+EXPORT_SYMBOL(__wsysinit_bootversion);
+
+int __wsysinit_production_mode = WSYSINIT_PRODUCTION_MODE_DISABLED;
+core_param(production_mode, __wsysinit_production_mode, int, 0000);
+EXPORT_SYMBOL(__wsysinit_production_mode);
+
+/* WSYSINIT SYSFS Init */
+
+static dev_t wsysinit_sysfs_dev;
+struct class* wsysinit_sysfs_class = NULL;
+struct device* wsysinit_sysfs_device = NULL;
+EXPORT_SYMBOL(wsysinit_sysfs_class);
+EXPORT_SYMBOL(wsysinit_sysfs_device);
+
+ssize_t wsysinit_sysfs_boot_show(struct device* dev, struct device_attribute* attr, char* buf);
+
+DEVICE_ATTR (boot_mode, 0444, wsysinit_sysfs_boot_show, NULL);
+DEVICE_ATTR (boot_id, 0444, wsysinit_sysfs_boot_show, NULL);
+
+ssize_t wsysinit_sysfs_boot_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	if (attr == &dev_attr_boot_mode) {
+		struct boot_table_entry *bentry = wsysinit_boot_table_lookup(__wsysinit_boot_id);
+		if (bentry)
+			sprintf (buf, "%s\n", bentry->name);
+		else
+			sprintf (buf, "unknown\n");
+	}
+	if (attr == &dev_attr_boot_id)
+		sprintf(buf, "0x%x\n", __wsysinit_boot_id);
+
+	return strlen(buf);
+}
+
+ssize_t wsysinit_sysfs_devconf_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	sprintf(buf, "0x%.4X\n", (u16) __wsysinit_devconf);
+	return strlen(buf);
+}
+
+ssize_t wsysinit_sysfs_bootversion_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	if (__wsysinit_bootversion)
+		sprintf (buf, "%s\n", __wsysinit_bootversion);
+	else
+		sprintf (buf, "unknown\n");
+	return strlen(buf);
+}
+
+ssize_t wsysinit_sysfs_kernelversion_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	sprintf (buf, "%s\n", UTS_RELEASE);
+	return strlen(buf);
+}
+
+ssize_t wsysinit_sysfs_production_mode_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	sprintf(buf, "%d\n", __wsysinit_production_mode);
+	return strlen(buf);
+}
+
+ssize_t wsysinit_sysfs_nand_eccmode_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	if (wsysinitset.nand_eccmode)
+		sprintf(buf, "%s\n", wsysinitset.nand_eccmode);
+	else
+		sprintf(buf, "%s\n", "unknown");
+
+	return strlen(buf);
+}
+
+ssize_t wsysinit_sysfs_tty_service_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	if (wsysinitset.tty_service)
+		sprintf(buf, "%s\n", wsysinitset.tty_service);
+	else
+		sprintf(buf, "%s\n", "unknown");
+
+	return strlen(buf);
+}
+
+ssize_t wsysinit_sysfs_tty_rs232_485_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	if (wsysinitset.tty_rs232_485)
+		sprintf(buf, "%s\n", wsysinitset.tty_rs232_485);
+	else
+		sprintf(buf, "%s\n", "unknown");
+
+	return strlen(buf);
+}
+
+ssize_t wsysinit_sysfs_board_variant_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	if (wsysinitset.board_variant)
+		sprintf(buf, "%s\n", wsysinitset.board_variant);
+	else
+		sprintf(buf, "%s\n", "unknown");
+
+	return strlen(buf);
+}
+
+DEVICE_ATTR (         devconf , 0444,         wsysinit_sysfs_devconf_show, NULL);
+DEVICE_ATTR (     bootversion , 0444,     wsysinit_sysfs_bootversion_show, NULL);
+DEVICE_ATTR (   kernelversion , 0444,   wsysinit_sysfs_kernelversion_show, NULL);
+DEVICE_ATTR ( production_mode , 0444, wsysinit_sysfs_production_mode_show, NULL);
+DEVICE_ATTR (    nand_eccmode , 0444,    wsysinit_sysfs_nand_eccmode_show, NULL);
+DEVICE_ATTR (    tty_service  , 0444,     wsysinit_sysfs_tty_service_show, NULL);
+DEVICE_ATTR (    tty_rs232_485, 0444,   wsysinit_sysfs_tty_rs232_485_show, NULL);
+DEVICE_ATTR (    dp_trig_reset, 0200,               NULL, dp_sysfs_trig_reset);
+DEVICE_ATTR (    board_variant, 0444,   wsysinit_sysfs_board_variant_show, NULL);
+
+static void wsysinit_sysfs_init(void)
+{
+	device_create_file(wsysinit_sysfs_device, &dev_attr_boot_mode);
+	device_create_file(wsysinit_sysfs_device, &dev_attr_boot_id);
+	device_create_file(wsysinit_sysfs_device, &dev_attr_devconf);
+	device_create_file(wsysinit_sysfs_device, &dev_attr_bootversion);
+	device_create_file(wsysinit_sysfs_device, &dev_attr_kernelversion);
+	device_create_file(wsysinit_sysfs_device, &dev_attr_production_mode);
+	device_create_file(wsysinit_sysfs_device, &dev_attr_dp_trig_reset);
+	device_create_file(wsysinit_sysfs_device, &dev_attr_board_variant);
+
+	if (wsysinitset.nand_eccmode)
+		device_create_file(wsysinit_sysfs_device, &dev_attr_nand_eccmode);
+
+	if (wsysinitset.tty_service)
+		device_create_file(wsysinit_sysfs_device, &dev_attr_tty_service);
+
+	if (wsysinitset.tty_rs232_485)
+		device_create_file(wsysinit_sysfs_device, &dev_attr_tty_rs232_485);
+
+#ifdef CONFIG_IRQ_PRIORITY_TABLE
+        wsysinit_tbl_sysfs_init();
+#endif
+}
+
+static int wsysinit_init_probe(struct platform_device *pdev)
+{
+	int rc;
+
+	if (!pdev->dev.of_node) {
+		dev_err(&pdev->dev, "WSYSINIT Init: No DT node found!\n");
+		return -1;
+	}
+
+	rc = wsysinit_init_probe_dt(pdev);
+	if (rc < 0) {
+		dev_err(&pdev->dev, "failed to probe DT parameters\n");
+		return rc;
+	}
+
+	if (wsysinitset.wsysinit_init_sysfs)
+		wsysinit_sysfs_init();
+
+	pr_info("Wago WSYSINIT Init: %s probed.\n", pdev->dev.of_node->name);
+
+	return 0;
+}
+
+static int wsysinit_init_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static struct platform_driver wsysinit_init_driver = {
+	.probe		= wsysinit_init_probe,
+	.remove		= wsysinit_init_remove,
+	.driver		= {
+		.name	= DEVICE_NAME,
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(wsysinit_dt_ids),
+	},
+};
+
+static __init int wsysinit_init(void)
+{
+	pr_info("WSYSINIT: create sysfs entries\n");
+
+	wsysinit_sysfs_class = class_create (THIS_MODULE, "wago");
+	if (IS_ERR(wsysinit_sysfs_class)) {
+
+		pr_err("%s: class_create: error %li\n",
+			__func__, PTR_ERR(wsysinit_sysfs_class));
+		unregister_chrdev_region(wsysinit_sysfs_dev, 1);
+		return -1;
+	}
+
+	wsysinit_sysfs_device = device_create (wsysinit_sysfs_class, NULL,
+                        wsysinit_sysfs_dev, NULL, "system");
+
+	return platform_driver_register(&wsysinit_init_driver);
+}
+
+static __exit void wsysinit_exit(void)
+{
+	platform_driver_unregister(&wsysinit_init_driver);
+}
+
+omap_postcore_initcall(wsysinit_init);
+module_exit(wsysinit_exit);
diff --git a/include/linux/wsysinit-boot-table.h b/include/linux/wsysinit-boot-table.h
new file mode 100644
index 0000000..c5ec9fa
--- /dev/null
+++ b/include/linux/wsysinit-boot-table.h
@@ -0,0 +1,27 @@
+#ifndef _WSYSINIT_BOOT_TABLE_H
+#define _WSYSINIT_BOOT_TABLE_H
+
+/* keep in sync with barebox! */
+
+#define WSYSINIT_BOOT_DEVICE_MASK   0xc0
+#define WSYSINIT_BOOT_MODE_MASK     0x3f
+#define WSYSINIT_BOOT_DEVELOP       (1 << 0)
+#define WSYSINIT_BOOT_UART          (1 << 1)
+#define WSYSINIT_BOOT_RECOVER       (1 << 2)
+#define WSYSINIT_BOOT_UPDATE        (1 << 3)
+#define WSYSINIT_BOOT_OVERWRITE     (1 << 4)
+#define WSYSINIT_DEVICE_NAND        (1 << 6)
+#define WSYSINIT_DEVICE_MMC         (1 << 7)
+
+struct boot_table_entry {
+	unsigned char id;
+	char *name;
+	char *cportion[3];	/* we use three cmdline portions */
+};
+
+#define WSYSINIT_BOOT_TABLE_ENTRY(_id, _name, _cportion_0, _cportion_1, _cportion_2) \
+	{ .id = _id, .name = _name, .cportion = { _cportion_0, _cportion_1, _cportion_2, }, }
+
+extern struct boot_table_entry wsysinit_boot_table[];
+struct boot_table_entry *wsysinit_boot_table_lookup(unsigned char boot_id);
+#endif /* _WSYSINIT_BOOT_TABLE_H */
diff --git a/include/linux/wsysinit-devconf.h b/include/linux/wsysinit-devconf.h
new file mode 100644
index 0000000..50cf3a7
--- /dev/null
+++ b/include/linux/wsysinit-devconf.h
@@ -0,0 +1,35 @@
+#ifndef _WSYSINIT_DEVCONF_H
+#define _WSYSINIT_DEVCONF_H
+
+/*
+ * The devconf variable is a 16bit value.
+ * Data is stored in little endian format.
+ *
+ * 0x1fe |---------------------------------------|
+ *       |          DEVCONF Byte 0 (Low Byte)    |
+ *       | ------------------------------------- |
+ *       |          DEVCONF Byte 1 (High Byte)   |
+ * 0x200 |---------------------------------------|
+ *
+ *   15  14  13  12  11  10  9  8  7  6  5  4  3  2  1  0
+ *    |   |   |   |   |   |  |  |  |  |  |  |  |  |  |  |
+ *    x   x   x   x   x   x  x  x  x  x  x  x  |  |  |  PROFIBUS_SL
+ *                                             |  |  CAN
+ *                                             |  RS232_485
+ *                                             ETHERNET_IP
+ *   x: reserved for future use
+ *
+ */
+#define WSYSINIT_DEVCONF_PROFIBUS_SL       (1 << 0)
+#define WSYSINIT_DEVCONF_CAN               (1 << 1)
+#define WSYSINIT_DEVCONF_RS232_485         (1 << 2)
+#define WSYSINIT_DEVCONF_ETHERNET_IP       (1 << 3)
+
+#define WSYSINIT_DEVCONF_MASK              (WSYSINIT_DEVCONF_PROFIBUS_SL | WSYSINIT_DEVCONF_CAN | \
+                                          WSYSINIT_DEVCONF_RS232_485 | WSYSINIT_DEVCONF_ETHERNET_IP)
+
+#define WSYSINIT_DEVCONF_FULL              WSYSINIT_DEVCONF_MASK
+
+extern int __wsysinit_devconf;
+
+#endif /* _WSYSINIT_DEVCONF_H */
diff --git a/include/linux/wsysinit-prio.h b/include/linux/wsysinit-prio.h
new file mode 100644
index 0000000..b28f288
--- /dev/null
+++ b/include/linux/wsysinit-prio.h
@@ -0,0 +1,16 @@
+#ifndef __WSYSINIT_PRIO_H
+#define __WSYSINIT_PRIO_H
+
+struct wsysinit_irq_prio_tbl_entry {
+	const char *name;
+	int prio;
+};
+
+extern struct wsysinit_irq_prio_tbl_entry* wsysinit_tbl_get_entry_by_name(const char *name);
+extern int wsysinit_tbl_get_prio_by_name(const char *name);
+extern void wsysinit_tbl_dump(void);
+extern void wsysinit_tbl_sysfs_init(void);
+
+//extern struct wsysinit_irq_prio_tbl_entry *wsysinit_irq_prio_tbl;
+
+#endif /* __WSYSINIT_PRIO_H */
diff --git a/include/linux/wsysinit-prodcution.h b/include/linux/wsysinit-prodcution.h
new file mode 100644
index 0000000..742dfb7
--- /dev/null
+++ b/include/linux/wsysinit-prodcution.h
@@ -0,0 +1,43 @@
+#ifndef _WSYSINIT_PRODUCTION_H
+#define _WSYSINIT_PRODUCTION_H
+
+/*
+ * TERMINOLOGY:
+ *    -            firmware: the complete software (bootloader, linux, rootfs, codesys runtime, ...)
+ *                           that will run later on the product (size: about 18MB)
+ *    - production-firmware: a bootable linux image that contains
+ *                           an initial ramdisk with the firmware package included.
+ *                           (size: about 25MB)
+ *
+ * We have different modes where we
+ * (re)install our initial or new firmware.
+ *    1. The Initial Production Setup (Yet no type label/mac addr set)
+ *       --> Location: Our Company
+ *         - come up first with default boot_mode_id 0x3 (uart, dev mode)
+ *         - erase eeprom completely
+ *         - set the type label with mac addr
+ *         - kernel parameter: boot_mode_id=0x3
+ *    2. Production Setup initiated through the use case
+ *       'Upgrade device to new Software' (type label with mac addr will
+ *       --> Location: Our Company
+ *         - mode is initiated through io-check running on a present firmware
+ *           by removing the type label/mac addr. Barebox recognizes that no
+ *           mac addr is present and so moves into production mode.
+ *         - same bahaviour as mentioned in 1)
+ *    3. Factory Reset - The Customer wants his device back to initial state.
+ *       --> Location: Customer
+ *         - at 1) and 2) production-firmware was stored in revocery nand partition
+ *         - build specific cmdline
+ *             - disable network (only during production_mode=2)
+ *             - boot_mode_id: disable kernel cosole.
+ *             - userspace: /etc/inittab don't use ttyO0 when UART bit in devconf is not set!
+ *               --> see 'configs/wago-pfc200-production/projectroot/etc/init.d/rcS'
+ *             - don't erase the eeprom
+ *             - but boot_mode_id is resetted to 0x2
+ *
+ */
+#define WSYSINIT_PRODUCTION_MODE_DISABLED     0
+#define WSYSINIT_PRODUCTION_MODE_NORMAL       1
+#define WSYSINIT_PRODUCTION_MODE_FACTORY      2
+
+#endif /* _WSYSINIT_PRODUCTION_H */
-- 
2.7.4

