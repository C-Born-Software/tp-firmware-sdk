From b26d32306d820fd9b03fd6d43b4365413f1c2027 Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Wed, 16 Oct 2019 07:25:27 +0200
Subject: [PATCH] xload-pfc: mount root and devices properly

barebox does not like if root is mounted twice at a time. In case of an
formated sd card we get the below dump in a loop. Fix this by mounting the root
node only once and using explicit mount functions for character devices
like normal barebox shell code does.

	Board: PAC-768-330x MLO
	i2c-omap 44e0b000.i2c: bus 0 rev0.11 at 400 kHz
	omap-hsmmc 48060000.mmc: registered as 48060000.mmc
	mmc0: detected SD card version 2.0
	mmc0: registered mmc0
	omap-hsmmc 481d8000.mmc: registered as 481d8000.mmc
	mmc1: detected MMC card version 5.1
	mmc1: registered mmc1
	malloc space: 0x8feff840 -> 0x9fdff07f (size 255 MiB)
	pfc_check_and_set_debug_uart: debug mode active
	pfc_xload: rom-code boots us from: mmc1
	pfc_xload: board-variant: pac100
	pfc_xload: try to boot vfat from mmc0
	could not read barebox.bin.pac100 from sd card
	pfc_xload: file barebox.bin.pac100 not found on mmc0
	unable to handle paging request at address 0x0001000b
	pc : [<9fe0169e>]    lr : [<9fe017a3>]
	sp : 9ffefb68  ip : ffffffff  fp : 0000de3f
	r10: 9ffeffa4  r9 : 9fe0f41f  r8 : 8ff5e644
	r7 : 00000000  r6 : 00000060  r5 : 8feff840  r4 : 0000ffff
	r3 : 0000001a  r2 : 00000000  r1 : 8feef840  r0 : 8feff840
	Flags: nzcv  IRQs off  FIQs on  Mode SVC_32

	no stack data available

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 arch/arm/configs/am335x_pac_mlo_defconfig |  1 -
 arch/arm/configs/am335x_pfc_mlo_defconfig |  1 -
 arch/arm/configs/am35xx_pfc_mlo_defconfig |  3 +-
 arch/arm/mach-omap/xload-pfc.c            | 53 +++++++++++++------------------
 4 files changed, 23 insertions(+), 35 deletions(-)

diff --git a/arch/arm/configs/am335x_pac_mlo_defconfig b/arch/arm/configs/am335x_pac_mlo_defconfig
index c90c3ab..1b4a658 100644
--- a/arch/arm/configs/am335x_pac_mlo_defconfig
+++ b/arch/arm/configs/am335x_pac_mlo_defconfig
@@ -27,6 +27,5 @@ CONFIG_MCI_STARTUP=y
 CONFIG_MCI_OMAP_HSMMC=y
 CONFIG_EEPROM_AT24=y
 CONFIG_PINCTRL_SINGLE=y
-# CONFIG_FS_DEVFS is not set
 CONFIG_FS_FAT=y
 CONFIG_FS_FAT_LFN=y
diff --git a/arch/arm/configs/am335x_pfc_mlo_defconfig b/arch/arm/configs/am335x_pfc_mlo_defconfig
index bc22d2c..55085cc 100644
--- a/arch/arm/configs/am335x_pfc_mlo_defconfig
+++ b/arch/arm/configs/am335x_pfc_mlo_defconfig
@@ -42,6 +42,5 @@ CONFIG_MCI_OMAP_HSMMC=y
 CONFIG_EEPROM_AT24=y
 CONFIG_PINCTRL_SINGLE=y
 CONFIG_BUS_OMAP_GPMC=y
-# CONFIG_FS_DEVFS is not set
 CONFIG_FS_FAT=y
 CONFIG_FS_FAT_LFN=y
diff --git a/arch/arm/configs/am35xx_pfc_mlo_defconfig b/arch/arm/configs/am35xx_pfc_mlo_defconfig
index bc9fdaa..31a0636 100644
--- a/arch/arm/configs/am35xx_pfc_mlo_defconfig
+++ b/arch/arm/configs/am35xx_pfc_mlo_defconfig
@@ -14,6 +14,7 @@ CONFIG_PROMPT="X-load pfc200>"
 CONFIG_SHELL_NONE=y
 # CONFIG_ERRNO_MESSAGES is not set
 # CONFIG_TIMESTAMP is not set
+CONFIG_COMPILE_LOGLEVEL=3
 CONFIG_DEBUG_INFO=y
 CONFIG_DRIVER_SERIAL_NS16550=y
 CONFIG_DRIVER_SERIAL_NS16550_OMAP_EXTENSIONS=y
@@ -36,7 +37,5 @@ CONFIG_MCI_STARTUP=y
 # CONFIG_MCI_WRITE is not set
 CONFIG_MCI_MMC_BOOT_PARTITIONS=y
 CONFIG_MCI_OMAP_HSMMC=y
-# CONFIG_FS_RAMFS is not set
-# CONFIG_FS_DEVFS is not set
 CONFIG_FS_FAT=y
 CONFIG_FS_FAT_LFN=y
diff --git a/arch/arm/mach-omap/xload-pfc.c b/arch/arm/mach-omap/xload-pfc.c
index aab6662..216cdc0 100644
--- a/arch/arm/mach-omap/xload-pfc.c
+++ b/arch/arm/mach-omap/xload-pfc.c
@@ -30,6 +30,7 @@
 #include <fcntl.h>
 #include <sys/mount.h>
 #include <libfile.h>
+#include <fs.h>
 
 #define UIMAGE_HEADER_SIZE 64
 
@@ -139,53 +140,43 @@ static void *pfc_xload_boot_parts(char **parts, int num_parts)
 static void *pfc_xload_boot_mmc(char *bootfile)
 {
 	int ret;
-	void *buf;
 	int len;
+	const char *rootpath;
 	const char *diskdev;
 	char *partname;
 	char *bootfile_path;
-
-	if (!bootfile)
-		bootfile = "barebox.bin";
+	struct cdev *cdev;
+	void *buf = NULL;
 
 	diskdev = omap_get_bootmmc_devname();
 	if (!diskdev)
-		diskdev = "disk0";
+		goto out;
 
-	device_detect_by_name(diskdev);
+	ret = device_detect_by_name(diskdev);
+	if (ret)
+		goto out;
 
 	partname = basprintf("%s.0", diskdev);
-
-	ret = mount(partname, NULL, "/", NULL);
-
-	if (ret) {
-		pr_info("%s: Unable to mount %s (%d)\n", __func__,
-								partname, ret);
-		free(partname);
-		return NULL;
+	cdev = cdev_by_name(partname);
+	if (!cdev) {
+		pr_err("failed to get device %s\n", partname);
+		goto free;
 	}
 
-	free(partname);
-
-	bootfile_path = basprintf("/%s", bootfile);
-	buf = read_file(bootfile_path, &len);
-	if (!buf) {
-		free(bootfile_path);
-		bootfile_path = basprintf("/boot/%s", bootfile);
-		buf = read_file(bootfile_path, &len);
+	rootpath = cdev_mount_default(cdev, NULL);
+	if (IS_ERR(rootpath)) {
+		pr_err("failed to mount %s: (%ld)\n", cdev->name,
+							PTR_ERR(rootpath));
+		goto free;
 	}
 
-	if (!buf)
-		pr_info("could not read %s from sd card\n", bootfile);
-	else
-		pr_info("%s found on %s\n", bootfile_path, diskdev);
-
+	bootfile_path = basprintf("%s/%s", rootpath, bootfile);
+	buf = read_file(bootfile_path, &len);
 	free(bootfile_path);
-	ret = umount("/");
-	if (ret)
-		pr_err("%s: umount on '/' returned with errno %d.\n",
-				__func__, ret);
 
+free:
+	free(partname);
+out:
 	return buf;
 }
 
-- 
2.7.4

