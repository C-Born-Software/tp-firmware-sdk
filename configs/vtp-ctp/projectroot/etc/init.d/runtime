#!/bin/bash

# source profile codesys3 needs some environment variables (qt5, xorg, display)
. /etc/profile > /dev/null 2>&1

WAITHITTOUCH_PRESSED=0

function wait4xorg
{
  #VTPCTP
  local COUNTER=0
  while [ ! -e "/tmp/.start_application.done" ]; do
    #Xorg not running
    #echo "Waiting for Xorg"
    ((COUNTER++))
    sleep 1
    
    if [ $COUNTER -gt 60 ]; then
    echo "Timeout waiting for Xorg"
    break;
    fi
    #echo "Waiting for Xorg $COUNTER"
  done
  sleep 1
  echo "Waiting for Xorg DONE"
}

function wait4touchpressed
{
  local RETURNVALUE=0
  #create QT5 XDG_RUNTIME_DIR
  if [ ! -d "/tmp/runtime-root" ]; then
    mkdir /tmp/runtime-root
    chmod 0700 /tmp/runtime-root
  fi

  #show countdown message waithittouch
  COUNTDOWN=`getconfvalue /etc/specific/bootsettings.conf countdown`
  if [ -z $COUNTDOWN ]; then
   COUNTDOWN=10
  fi

  if [ $COUNTDOWN == 0 ]; then    
    RETURNVALUE=0
  else
    waithittouch "Touch screen to cancel start sequence !" $COUNTDOWN
    RETURNVALUE=$?
    #echo "waithittouch return=$RETURNVALUE"
  fi

  if [ $RETURNVALUE == 0 ]; then    
     echo "waithittouch NOT pressed"
     WAITHITTOUCH_PRESSED=0
  else 
     echo "waithittouch pressed"     
     WAITHITTOUCH_PRESSED=1
  fi  
}

prepare_home_dir()
{
  # prepare home dir according to CODESYS_HOMEDIR_SDCARD config parameter,
  # depending on boot media
  mount | grep -q "/dev/mmcblk0p1"
  local sd_is_mounted=$?
  . $RUNTIME_CONFIG
  if [ -z "$(pidof codesys3)" -a -z "$(pidof plclinux_rt)" ]; then
    if [ ! -a /home/codesys -o -L /home/codesys ]; then
      if [ "$(/etc/config-tools/get_filesystem_data active-partition-medium)" = "internal-flash-emmc" -a \
           "$CODESYS_HOMEDIR_SDCARD" = "enabled" -a "$sd_is_mounted" = "0" ]; then
        rm /home/codesys
        ln -s /media/sd /home/codesys
      else
        # booted from sd-card, direct /home/codesys link to real directory
        rm /home/codesys
        ln -s /home/codesys_root /home/codesys
      fi
      # copy non-destructive cds2 files, even if cds3 is started. cds3 ignores the files.
      cp -rn /home/codesys2_skel/* /home/codesys/
    fi
  fi
}

start_codesys2()
{
  if [ -n "`pidof plclinux_rt`" ]; then
    echo "CoDeSys already started"
  else  
    local PROGRAM="/usr/sbin/plclinux_rt"
    local WRAPPER="/usr/bin/rtswrapper"
    export LD_LIBRARY_PATH=/home/codesys
    echo -n "Starting CoDeSys v2.3..."
    umask 0002
    echo $PROGRAM > /var/run/runtime
    if [ "$1" == "0" ]
    then
      start-stop-daemon -S -x "$WRAPPER" -o -b -- "$PROGRAM"
    else
      start-stop-daemon -S -x "$PROGRAM" -o
    fi
  fi
}

set_licence()
{
  DEVICEID=$(printf "0x%X" $(/etc/config-tools/get_typelabel_value DEVICEID))
  LINK=/etc/specific/3S.$DEVICEID.dat
  if [ "$LINK" != "$(readlink /usr/share/codesys3/3S.dat)" ]
  then
    ln -sf /usr/share/codesys3/3S.$DEVICEID.dat /usr/share/codesys3/3S.dat
  fi
}

start_eruntime()
{
  local PIDPROGRAM="/usr/bin/codesys3"
  local PROGRAM="/usr/bin/codesys3"
  local WRAPPER="/usr/bin/rtswrapper"
  local ORDER="$(/etc/config-tools/get_typelabel_value ORDER)"
  
  if [ "${ORDER:0:3}" == "762" ]
  then
    local MULTICORE="$(/etc/config-tools/get_eruntime multicore)"
    local BOOTAPP="$(/etc/config-tools/get_eruntime bootapp)"
    if [ "$MULTICORE" == "no" ]; then
      PROGRAM="/usr/bin/taskset 1 /usr/bin/codesys3"
    fi
    #eDisplay, targetvisu needs X11, we have to wait
    wait4xorg
    if [ ! -e /home/codesys/eRUNTIME.cfg ]; then
      #cfg does not exists, show wbm 
      WAITHITTOUCH_PRESSED=0
      echo "STARTING WBM - cfg does not exists"
      /etc/script/start_wbm.sh &
    else
      #cfg exists, start WBM if no application is included
      if [ "$BOOTAPP" == "yes" ]; then
        #bootapp exists, show countdown
        wait4touchpressed
      else
        #no app exists, start WBM and codesys3
        WAITHITTOUCH_PRESSED=0
        echo "Starting Browser with startpage from Plclist"
        /etc/script/start_webbrowser.sh &
      fi
    fi
  fi  

  if [ $WAITHITTOUCH_PRESSED == 0 ]; then    
    echo "Starting eRUNTIME..."
    set_licence
    umask 0002
    echo $PIDPROGRAM > /var/run/runtime        
    if [ "$1" == "0" ]
    then
      start-stop-daemon -S -x "$WRAPPER" -o -b -- "$PROGRAM"
    else
      start-stop-daemon -S -x "$PROGRAM" -o
    fi
  else    
    echo "Starting WBM"
    /etc/script/start_wbm.sh &
  fi
}

start_runtime()
{
  prepare_home_dir
  case $1 in
    2)
     start_codesys2 $2
     ;;
    3)
     start_eruntime $2
     ;;    
  esac
}

stop_runtime()
{
  local RESULT=1

  rm /var/run/runtime
  case $1 in
    2)
     echo -n "Terminate CoDeSys v2.3..."
     start-stop-daemon -K -qx /usr/sbin/plclinux_rt
     RESULT=$?
     ;;
    3)
     echo -n "Terminate eRUNTIME..."
     start-stop-daemon -K -qx /usr/bin/codesys3
     RESULT=$?
     ;;
  esac
  
  if [ "$RESULT" != "0" ]
  then
    echo -n "error while Terminating kill all runtimes..."
    killall plclinux_rt &> /dev/null
    killall codesys3    &> /dev/null
  fi  
}

CONFIG=/etc/specific/rtsversion
RUNTIME_CONFIG=/etc/specific/runtimes.conf
USED_RUNTIME_VERSION=2
RUNTIME_ORDER="2 3 0"
FOREGROUND="0"
CREATE_CONFIG="0"

if [ -a $CONFIG ] 
then
  USED_RUNTIME_VERSION=$(cat $CONFIG)
else
  CREATE_CONFIG="1"
fi
POSSIBLE_RUNTIMES=$(/etc/config-tools/get_possible_runtimes)

##backdoor for starting the not configured runtime
if [ "$2" != "" ]
then
  USED_RUNTIME_VERSION=$2
fi

if [[ $POSSIBLE_RUNTIMES != *$USED_RUNTIME_VERSION* ]]
then
  CREATE_CONFIG="1"
  for RUNTIME_TO_BE_USED in $RUNTIME_ORDER
  do
    if [[ $POSSIBLE_RUNTIMES == *$RUNTIME_TO_BE_USED* ]]
    then 
      USED_RUNTIME_VERSION=$RUNTIME_TO_BE_USED
      break
    fi
  done
fi

COMMAND=$1
if [ "$COMMAND" == "debug" ]
then
  FOREGROUND="1"
  COMMAND=start
fi

case $COMMAND in
    start)
        # start runtime
        # TEMP FOR 8215
        if [[ $(/etc/config-tools/get_typelabel_value ORDER) == "750-8215" ]]; then
          sleep 4
        fi
        @RTS_CGROUPS@
        start_runtime $USED_RUNTIME_VERSION $FOREGROUND
        [[ -d /etc/config-tools/events/codesys/ ]] && run-parts -a start /etc/config-tools/events/codesys/ >/dev/null 2>&1
        if [ "$CREATE_CONFIG" == "1" ]
        then
	  echo "$USED_RUNTIME_VERSION" > $CONFIG
        fi
        echo "done."
        ;;

    stop)
	stop_runtime $USED_RUNTIME_VERSION
	[[ -d /etc/config-tools/events/codesys/ ]] && run-parts -a stop /etc/config-tools/events/codesys/ >/dev/null 2>&1        
        echo "done"
        ;;

esac
