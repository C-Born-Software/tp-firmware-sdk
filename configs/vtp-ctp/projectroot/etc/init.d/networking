#!/bin/bash

order=$(/etc/config-tools/get_typelabel_value ORDER)

# go up process hierarchy to see if we were started from rcS
# during system initialisation.
function is_initphase
{
  local STATUS="1"
  local RCS="(rcS)"
  local PARENTPID=$$
  local PNAME=""

  while [ "$PARENTPID" -ne 1 ]; do
    set -- $(< /proc/$PARENTPID/stat)
    PNAME=$2
    PARENTPID=$4
    if [ "$PNAME" = $RCS ]; then
      STATUS="0"
      break
    fi
  done
  return $STATUS
}

function do_ifupdown
{
    mode=$1

    if [ "$mode" = UP ]; then
        # kernel defaults X1 and X2 to be powered down.
        # ifup of ethX1 or ethX2 powers on the network ports. If a port is disabled,
        # /etc/network/interfaces is set so that no power on occurs.
        ifup lo
        ifup eth0
        ifup ethX1
        ifup ethX2
        if [[ ${order:0:8} == "750-8215" ]]; then
        	ifconfig ethX11 up
        	ifconfig ethX12 up
        fi
        if is_initphase "$@"; then
            /etc/init.d/networking-finish bridgeup &
        else
            /etc/init.d/networking-finish bridgeup
        fi
    else
        ifdown -a
    fi
}


function get_next_macs()
{
    local startMac="$1"
    local macCount="$2"
    local isValidMac="FALSE"

    # Check MAC address has valid format.
    [[ "$startMac" =~ ^([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}$ ]] && isValidMac="TRUE"

    if [[ $isValidMac == "TRUE" ]]; then
        # Remove colons
        mac_plain=${startMac//:/}
        macs=($mac_plain)

        local i=1
        while [ $i -le "$macCount" ] ; do
            macs=( "${macs[@]}" $(printf "%012X" $(( 0x$mac_plain + i )) ) )
            ((i++))
        done
    else
        echo "NETWORK_INIT - Invalid MAC address \"startMac\". Failed generating subsequent addresses."
    fi
}

function networking_stop
{
    if grep -q "nfsroot" /proc/cmdline; then
        echo "booting from nfs, skip networking stop"
        exit 0
    fi

    do_ifupdown DOWN
    brctl delbr br1
    brctl delbr br0
    if [[ ${order:0:8} == "750-8215" ]]; then
    	brctl delbr br2
    fi
}


function enable_interrupt_pacing
{
    ethtool -C eth0 rx-usecs 1000
}


function networking_start
{
    if [[ ${order:0:8} == "750-8215" ]]; then
        /etc/config-tools/set_dsa_mode_c --value 1
        enable_interrupt_pacing
    fi

    if grep -q "nfsroot" /proc/cmdline; then
        echo "booting from nfs, skip networking start"
        exit 0
    fi
    echo "starting network interfaces..."

    # set weak endsystem mode as default. See rfc1122 and kernel Documentation/networking/ip-sysctl.txt.
    echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore

    # set arp accept to send replies on gratuitous arp's with our own ip address.
    echo 1 > /proc/sys/net/ipv4/conf/all/arp_accept

    # create /etc/specific/network-interfaces-current with dip switch and gsm modem related configs
    [ -x /etc/config-tools/adapt_netconfig ] && /etc/config-tools/adapt_netconfig --save-dipswitch

    # configure switch, setup bridges etc.
    brctl addbr br0
    brctl addbr br1
    if [[ ${order:0:8} == "750-8215" ]]; then
        brctl addbr br2
    fi

    # Setup mac addresses - default behaviour is to use the controller's mac address for all interfaces
    # If you want to use different mac addresses you need to enable promiscous mode of eth0
    # which is disabled by default.
    # To do that uncomment the following line and set your desired mac addresses here.
    # ifconfig eth0 promisc  # this enables promiscous mode, to disable use 'ifconfig eth0 -promisc'

    # get configured mac address and use it for the dsa slave devices

    # NOTE: config-tools dependency here!!
    local macaddr=$(/etc/config-tools/get_typelabel_value MAC | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}')
    if [[ ${order:0:8} != "750-8215" ]]; then
        # Set same MAC address for ethX1 and ethX2.
        ifconfig ethX1 hw ether "$macaddr"
        ifconfig ethX2 hw ether "$macaddr"
    else
	    # Get next MAC addresses and store them to macs.
        # macs[0] contains the original MAC address ($macaddr).
        declare -a macs
    	get_next_macs "$macaddr" 4
        # Add the main MAC to the ATU, CPU port is 6.
        /sbin/vtp-ctp_mv88e6321_write_atu.sh $macaddr 6 
        # Add the other MACs to the ATU as well.
        /sbin/vtp-ctp_mv88e6321_write_atu.sh ${macs[1]} 6
        /sbin/vtp-ctp_mv88e6321_write_atu.sh ${macs[2]} 6
        /sbin/vtp-ctp_mv88e6321_write_atu.sh ${macs[3]} 6
        /sbin/vtp-ctp_mv88e6321_write_atu.sh ${macs[4]} 6
                        
        ifconfig ethX1 hw ether ${macs[3]}
        ifconfig ethX2 hw ether ${macs[4]}
        ifconfig ethX11 hw ether ${macs[1]}
        ifconfig ethX12 hw ether ${macs[2]}
        brctl addif br2 ethX11
        brctl addif br2 ethX12

        # Set device MAC address for bridges.        
        ifconfig br0 hw ether ${macaddr}
        ifconfig br1 hw ether ${macaddr}
        ifconfig br2 hw ether ${macaddr}
        ifconfig br2 up
    fi

    case $dsa_mode in
        0)
            swconfig dev switch0 set dsa_enable 0
            ;;
        1)
            swconfig dev switch0 set dsa_enable 1

            # ht: we no more need to setup the switch static mac table.
            #     Separation of port 1 and 2 is now reached through configuration of
            #     unicast mac address filtering. Traffic received on ports 1 and 2 will
            #     be always forwarded to port 3. The CPU has programmed a unicast match list to allow only
            #     thouse packets that are of interest.

            ## you need to add one static mac table entry per interface (0x4 = CPU Port)
            # swconfig dev switch0 set statmacs "0,$macaddr,0x4,1,1,0,0"
            ## add broadcast entry
            #swconfig dev switch0 set statmacs "1,ff:ff:ff:ff:ff:ff,0x4,1,1,0,0"
            ;;
        *)
            echo "Error setting DSA mode!"
            ;;

    esac

    do_ifupdown UP

    local SWCONFIG=$(which swconfig)
    if [[ ${order:0:8} != "750-8215" ]]; then
        if [[ -e /etc/switch_settings.conf ]] && [[ -x "${SWCONFIG}" ]]; then
            echo "setting extra switch settings..."
            . /etc/switch_settings.conf

            ${SWCONFIG} dev switch0 set port_mirror     $PORT_MIRROR
            ${SWCONFIG} dev switch0 set bcast_protect   $BCAST_PROTECT
            ${SWCONFIG} dev switch0 set rate_limit      $RATE_LIMIT
            ${SWCONFIG} dev switch0 set fast_aging      $FAST_AGING
        else
            echo "Info: no extra switch settings configured!"
        fi
    else
	# ATTENTION:
	#
	# temporary fix for 8215 devices to force 100mbit on
	# all ports. needs to be removed after hardware redesign
	# of these devices.
	${SWCONFIG} dev switch0 set setup_dflt
    fi
}

if [[ ${order:0:8} == "750-8215" ]]; then
	# We only support separated mode.
	dsa_mode=1
else
	dsa_mode=$(sed -n 's/# dsa_mode=\(.*\)/\1/p' /etc/network/interfaces)
fi

case "$1" in
start)
    networking_start
    ;;
stop)
    networking_stop
    ;;
reload)
    networking_stop
    networking_start
    ;;
restart|force-reload)
    networking_stop
    networking_start
    ;;
*)
    N=$BASH_COMMAND
    echo "usage: $N {start|stop|restart|force-reload}" >&2
    exit 1
    ;;
esac

exit 0
