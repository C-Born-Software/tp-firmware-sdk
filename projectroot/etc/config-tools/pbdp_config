#!/bin/bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018 WAGO Kontakttechnik GmbH & Co. KG

#-----------------------------------------------------------------------------#
# Script-name: pbdb_config
#
# Get config value of pbdpslvappl.conf file
#
# Author: WAGO Kontakttechnik GmbH
#-----------------------------------------------------------------------------#

# load general definitions and functions
if [ ! -f "/etc/config-tools/config_tool_lib" ]; then
  echo "config_tool_lib missing"
  exit 255
fi

. /etc/config-tools/config_tool_lib

PBDP_CONFIG_FILE="/etc/specific/dps.conf"

# show help-text if requested
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo
  echo "* Get and set configuration values of dps.conf file *"
  echo
  echo "Usage: pbdb_config < access parameter-area parameter-name > [ new-parameter-value ]"
  echo 
  echo "access: \"get\" | \"set\""
  echo 
  exit $SUCCESS
fi

status=$SUCCESS

# read input parameter
access=$1
area=$2
paramName=$3
newParamValue=$4
#echo "access:${access} area:${area} paramName:${paramName} newParamValue:${newParamValue}" > /etc/config-tools/output

# check for missing input parameter
if [ -z "$access" ] || [ -z "$area" ] || [ -z "$paramName" ]; then
  status=$MISSING_PARAMETER
  SetLastError "Missing input parameter"
  exit $status
fi

#check whether config-file exists 
if [ ! -f $PBDP_CONFIG_FILE ]; then
  status=$CONFIG_FILE_MISSING
  SetLastError "Config File is missing"
  exit $status
fi

# get line count of file for "end of file" check
maxLineCount=`cat $PBDP_CONFIG_FILE | wc -l`
#echo "maxLineCount:"$maxLineCount

# init status with "can't find parameter"
status=$CONFIG_DATA_ERROR

sectionEnd=0
foundLine=0
paramValue=""

# get the line number of the line with start of area (cut the number from grep output line)
numberedLine=`grep -n "^ *\[${area}\] *$" $PBDP_CONFIG_FILE`
#echo "$numberedLine"

# if we can't find area at all, there is no need to search for parameter - don't start following loop
if [ -z $numberedLine ]; then
  sectionEnd=1
else
  lineNo=`echo ${numberedLine%:*}`
fi

# loop over the following lines until we find the requestet param or start of next area or end of file

while [ "$sectionEnd" = 0 ] && [ "$foundLine" = 0 ]; do

  lineNo=$[$lineNo + 1]
  
  # end of file? -> break loop without success 
  if (( $lineNo > $maxLineCount )); then
    #echo end of file
    sectionEnd=1
  else
  
    # read actual line
    line=`sed -n ''${lineNo}'p' $PBDP_CONFIG_FILE`
    #echo $line

    # check if line already contains start of next area (-> would mean, param was not existing in requested area)
    echo $line | grep "^ *\[" > /dev/null 2> /dev/null
    if [ $? = $SUCCESS ]; then
      sectionEnd=1
      #echo "section end"
    
    else
  
      # check if this line contains our requested parameter
      echo $line | grep "^ *${paramName}=" > /dev/null 2> /dev/null
      if [ $? = $SUCCESS ]; then
     
        foundLine=1
      
        # user wants to get value - filter param value, write it to stdout and stop loop
        if [ "get" = "$access" ]; then
          status=$SUCCESS
          paramValue=`echo ${line#${paramName}=}`
          printf "%s" $paramValue
      
        # user wants to set value - write new parameter to line 
        elif [ "set" = "$access" ]; then
          status=$SUCCESS
          sed -i ''$lineNo'c '$paramName'='$newParamValue'' $PBDP_CONFIG_FILE > /dev/null 2> /dev/null
          if [[ "$?" == "$SUCCESS" ]]; then
            sync
          else
            status=$WRITE_FILE_ERROR
          fi

        # unknown access
        else
          status=$INVALID_PARAMETER
        fi
      fi
    fi
  fi
  
done

exit $status
