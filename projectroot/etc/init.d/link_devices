#!/bin/bash
#
# link devices
#

# this script link devices from sys-fs to /dev/. The devices that
# need to be linked are defined in /etc/specific/.devs_to_link.

DEVS_TO_LINK="/etc/specific/.devs_to_link"
DEV_SEARCH_PATH="/sys/devices/"

check_unnamed()
{
    local extract_result=$1
    local name="$2"
    local device="$3"

    if [[ $extract_result -ne 0 || -z "$name" ]]; then
        echo "unnamed_$device"
    else
        echo "$name"
    fi

    return 0
}

extract_nand_label()
{
    local ubi_device="$1"

    local name=""
    name="$(cat "/sys/class/ubi/$ubi_device/name")"
    check_unnamed $? "$name" "$ubi_device"

    return 0
}

extract_emmc_label()
{
    local partition_device="$1"

    local name=""
    name="$(blkid "/dev/$partition_device" | sed -n 's/.*LABEL=\"\(\S\+\)\".*/\1/p')"
    check_unnamed $? "$name" "$partition_device"

    return 0
}


if [[ -c "/dev/mtd8" ]]; then
    detach_ubi=false
    if [[ ! -e "/sys/class/ubi/ubi0_0" ]]; then
        /sbin/ubiattach --mtdn=8 &>/dev/null
        detach_ubi=true
    fi
    # static partitions for systems with internal flash nand
    PARTITION_NAND_ROOTFS1_DEV_NAME="ubi0_0"
    PARTITION_NAND_ROOTFS1_LINK_NAME="/dev/partition_$(extract_nand_label "$PARTITION_NAND_ROOTFS1_DEV_NAME")"
    PARTITION_NAND_ROOTFS2_DEV_NAME="ubi0_2"
    PARTITION_NAND_ROOTFS2_LINK_NAME="/dev/partition_$(extract_nand_label "$PARTITION_NAND_ROOTFS2_DEV_NAME")"
    PARTITION_NAND_HOME1_DEV_NAME="ubi0_1"
    PARTITION_NAND_HOME1_LINK_NAME="/dev/partition_$(extract_nand_label "$PARTITION_NAND_HOME1_DEV_NAME")"

    if $detach_ubi; then
        /sbin/ubidetach --mtdn=8 &>/dev/null
    fi
else
    # static partitions for systems with internal flash emmc
    PARTITION_EMMC_BOOT_DEV_NAME="mmcblk1p1"
    PARTITION_EMMC_BOOT_LINK_NAME="/dev/partition_$(extract_emmc_label "$PARTITION_EMMC_BOOT_DEV_NAME")"
    PARTITION_EMMC_ROOTFS1_DEV_NAME="mmcblk1p7"
    PARTITION_EMMC_ROOTFS1_LINK_NAME="/dev/partition_$(extract_emmc_label "$PARTITION_EMMC_ROOTFS1_DEV_NAME")"
    PARTITION_EMMC_ROOTFS2_DEV_NAME="mmcblk1p10"
    PARTITION_EMMC_ROOTFS2_LINK_NAME="/dev/partition_$(extract_emmc_label "$PARTITION_EMMC_ROOTFS2_DEV_NAME")"
    PARTITION_EMMC_HOME1_DEV_NAME="mmcblk1p8"
    PARTITION_EMMC_HOME1_LINK_NAME="/dev/partition_$(extract_emmc_label "$PARTITION_EMMC_HOME1_DEV_NAME")"
    PARTITION_EMMC_HOME2_DEV_NAME="mmcblk1p9"
    PARTITION_EMMC_HOME2_LINK_NAME="/dev/partition_$(extract_emmc_label "$PARTITION_EMMC_HOME2_DEV_NAME")"
    PARTITION_EMMC_LOG_DEV_NAME="mmcblk1p5"
    PARTITION_EMMC_LOG_LINK_NAME="/dev/partition_$(extract_emmc_label "$PARTITION_EMMC_LOG_DEV_NAME")"
    PARTITION_EMMC_SETTINGS_DEV_NAME="mmcblk1p6"
    PARTITION_EMMC_SETTINGS_LINK_NAME="/dev/partition_$(extract_emmc_label "$PARTITION_EMMC_SETTINGS_DEV_NAME")"
fi

# get configured kbus uart from sys-fs
KBUS_TTY_PFCXXX_DEV_NAME="$(cat /sys/class/wago/system/kbus_tty_device_name)"
KBUS_TTY_PFCXXX_LINK_NAME="/dev/ttyKbus"

# get configured rs232_485 uart from sys-fs
SERIAL_TTY_PFCXXX_DEV_NAME="$(cat /sys/class/wago/system/tty_rs232_485)"
SERIAL_TTY_PFCXXX_LINK_NAME="/dev/serial"

# get configured service uart from sys-fs
SERVICE_TTY_PFCXXX_DEV_NAME="$(cat /sys/class/wago/system/tty_service)"
SERVICE_TTY_PFCXXX_LINK_NAME="/dev/service"

# get configured modem uart from sys-fs
# the device does alwas exist in all PFCs and displays
GSM_MODEM_TTY_PFCXXX_DEV_NAME="ttyMdm0"
GSM_MODEM_TTY_PFCXXX_LINK_NAME="/dev/ttyRUNTIME66"

# led name mapping
LED_SRC_PATH="/sys/class/leds/"
LED_DEST_PATH="/dev/leds/"

if [ ! -f "${DEVS_TO_LINK}" ]; then
        echo "${DEVS_TO_LINK} not found"
        exit 1
fi

# create list of device-paths
index=0
device_paths=()

while read line; do
        tmp_dev=$(find ${DEV_SEARCH_PATH} -iname ${line})
        if [ ! -z "${tmp_dev}" ]; then
                device_paths[$index]=${tmp_dev}
                index=$(($index + 1))
        else
                echo "${line} not found in ${DEV_SEARCH_PATH}"
        fi
done <${DEVS_TO_LINK}

if [ ${#device_paths[@]} -eq 0 ]; then
        echo "no device-paths found"
        exit 1
fi

case $1 in

  start)
        # if device kbus0 exist the kernel supports KBus so from the userspace we can check if kbus0 exists
        if [ -e /dev/kbus0 ]; then
                if [ -c "/dev/${KBUS_TTY_PFCXXX_DEV_NAME}" ]; then
                        ln -s /dev/${KBUS_TTY_PFCXXX_DEV_NAME} "${KBUS_TTY_PFCXXX_LINK_NAME}"
                else
                        echo "ERROR: could not set ${KBUS_TTY_PFCXXX_LINK_NAME}, kbus will not be active"
                fi
        fi

        if [ -c "/dev/${SERIAL_TTY_PFCXXX_DEV_NAME}" ]; then
                ln -s /dev/${SERIAL_TTY_PFCXXX_DEV_NAME} "${SERIAL_TTY_PFCXXX_LINK_NAME}"
        else
                echo "ERROR: could not set ${SERIAL_TTY_PFCXXX_LINK_NAME}, getty will fail"
        fi

        if [ -c "/dev/${SERVICE_TTY_PFCXXX_DEV_NAME}" ]; then
                ln -s /dev/${SERVICE_TTY_PFCXXX_DEV_NAME} "${SERVICE_TTY_PFCXXX_LINK_NAME}"
        else
                echo "ERROR: could not set ${SERVICE_TTY_PFCXXX_LINK_NAME}, getty will fail"
        fi

        ln -s /dev/${GSM_MODEM_TTY_PFCXXX_DEV_NAME} "${GSM_MODEM_TTY_PFCXXX_LINK_NAME}"

        for path in "${device_paths[@]}"; do
                ln -s ${path} /dev/
        done

        # ----- led naming -----
        # create folder 
        if [ ! -d "${LED_DEST_PATH}" ]; then
                mkdir "${LED_DEST_PATH}"
        fi

        # link led names 
        if [ -d "${LED_DEST_PATH}" ]; then
                ln -s ${LED_SRC_PATH}* "${LED_DEST_PATH}"
        else
                echo "ERROR: could not set ${LED_DEST_PATH}, leds will not work"
        fi

        # ----- internal flash partitions -----
        if [[ -c "/dev/mtd8" ]]; then
                ln -s /dev/${PARTITION_NAND_ROOTFS1_DEV_NAME}    "${PARTITION_NAND_ROOTFS1_LINK_NAME}"
                ln -s /dev/${PARTITION_NAND_ROOTFS2_DEV_NAME}    "${PARTITION_NAND_ROOTFS2_LINK_NAME}"
                ln -s /dev/${PARTITION_NAND_HOME1_DEV_NAME}      "${PARTITION_NAND_HOME1_LINK_NAME}"
        else
                ln -s /dev/${PARTITION_EMMC_BOOT_DEV_NAME}       "${PARTITION_EMMC_BOOT_LINK_NAME}"
                ln -s /dev/${PARTITION_EMMC_ROOTFS1_DEV_NAME}    "${PARTITION_EMMC_ROOTFS1_LINK_NAME}"
                ln -s /dev/${PARTITION_EMMC_ROOTFS2_DEV_NAME}    "${PARTITION_EMMC_ROOTFS2_LINK_NAME}"
                ln -s /dev/${PARTITION_EMMC_HOME1_DEV_NAME}      "${PARTITION_EMMC_HOME1_LINK_NAME}"
                ln -s /dev/${PARTITION_EMMC_HOME2_DEV_NAME}      "${PARTITION_EMMC_HOME2_LINK_NAME}"
                ln -s /dev/${PARTITION_EMMC_LOG_DEV_NAME}        "${PARTITION_EMMC_LOG_LINK_NAME}"
                ln -s /dev/${PARTITION_EMMC_SETTINGS_DEV_NAME}   "${PARTITION_EMMC_SETTINGS_LINK_NAME}"
        fi
  ;;
  stop)
  ;;

esac
